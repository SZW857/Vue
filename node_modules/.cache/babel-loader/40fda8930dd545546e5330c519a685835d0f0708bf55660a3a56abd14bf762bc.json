{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar lodashUnified = require('lodash-unified');\nvar index$2 = require('../../../select/index.js');\nrequire('../../../../hooks/index.js');\nvar usePagination = require('../usePagination.js');\nvar sizes = require('./sizes.js');\nvar pluginVue_exportHelper = require('../../../../_virtual/plugin-vue_export-helper.js');\nvar index = require('../../../../hooks/use-locale/index.js');\nvar index$1 = require('../../../../hooks/use-namespace/index.js');\nconst __default__ = vue.defineComponent({\n  name: \"ElPaginationSizes\"\n});\nconst _sfc_main = /* @__PURE__ */vue.defineComponent({\n  ...__default__,\n  props: sizes.paginationSizesProps,\n  emits: [\"page-size-change\"],\n  setup(__props, {\n    emit\n  }) {\n    const props = __props;\n    const {\n      t\n    } = index.useLocale();\n    const ns = index$1.useNamespace(\"pagination\");\n    const pagination = usePagination.usePagination();\n    const innerPageSize = vue.ref(props.pageSize);\n    vue.watch(() => props.pageSizes, (newVal, oldVal) => {\n      if (lodashUnified.isEqual(newVal, oldVal)) return;\n      if (Array.isArray(newVal)) {\n        const pageSize = newVal.includes(props.pageSize) ? props.pageSize : props.pageSizes[0];\n        emit(\"page-size-change\", pageSize);\n      }\n    });\n    vue.watch(() => props.pageSize, newVal => {\n      innerPageSize.value = newVal;\n    });\n    const innerPageSizes = vue.computed(() => props.pageSizes);\n    function handleChange(val) {\n      var _a;\n      if (val !== innerPageSize.value) {\n        innerPageSize.value = val;\n        (_a = pagination.handleSizeChange) == null ? void 0 : _a.call(pagination, Number(val));\n      }\n    }\n    return (_ctx, _cache) => {\n      return vue.openBlock(), vue.createElementBlock(\"span\", {\n        class: vue.normalizeClass(vue.unref(ns).e(\"sizes\"))\n      }, [vue.createVNode(vue.unref(index$2.ElSelect), {\n        \"model-value\": innerPageSize.value,\n        disabled: _ctx.disabled,\n        \"popper-class\": _ctx.popperClass,\n        size: _ctx.size,\n        \"validate-event\": false,\n        onChange: handleChange\n      }, {\n        default: vue.withCtx(() => [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(vue.unref(innerPageSizes), item => {\n          return vue.openBlock(), vue.createBlock(vue.unref(index$2.ElOption), {\n            key: item,\n            value: item,\n            label: item + vue.unref(t)(\"el.pagination.pagesize\")\n          }, null, 8, [\"value\", \"label\"]);\n        }), 128))]),\n        _: 1\n      }, 8, [\"model-value\", \"disabled\", \"popper-class\", \"size\"])], 2);\n    };\n  }\n});\nvar Sizes = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/pagination/src/components/sizes.vue\"]]);\nexports[\"default\"] = Sizes;","map":{"version":3,"mappings":";;;;;;;;;;;;;;uCA4Bc;EACZA,IAAM;AACR;;;;;;;;;IAIM;MAAEC;IAAA,IAAMC,eAAU;IAClB,WAAKC,qBAAa,YAAY;IACpC,MAAMC,aAAaC,2BAAc;IAC3B,sBAAgBC,OAAY,OAAMC,QAAS;IAEjDC,UACE,MAAMC,MAAMC,SACZ,GAACC,QAAQC,MAAW;MACd,0BAAQD,QAAQC,MAAM,GAAG;MACzB,UAAMC,OAAQ,OAAM,CAAG;QACnB,iBAAWF,OAAOG,QAAS,OAAMP,QAAS,CAC5C,SAAMA,QACN,SAAMG,SAAU;QACpBK,KAAK,oBAAoBR,QAAQ;MAAA;IACnC,CAEJ;IAEAC,UACE,MAAMC,MAAMF,QACZ,EAACI,MAAW;MACVK,cAAcC,KAAQ;IAAA,CAE1B;IAEA,MAAMC,cAAiB,gBAAS,MAAMT,MAAMC,SAAS;IACrD,sBAAsBS,GAAa;MAC7B;MACF,yBAAsB;QACXH;QACb;MAAA","names":["name","t","useLocale","useNamespace","pagination","usePagination","ref","pageSize","watch","props","pageSizes","newVal","oldVal","isArray","includes","emit","innerPageSize","value","innerPageSizes","val"],"sources":["../../../../../../../packages/components/pagination/src/components/sizes.vue"],"sourcesContent":["<template>\n  <span :class=\"ns.e('sizes')\">\n    <el-select\n      :model-value=\"innerPageSize\"\n      :disabled=\"disabled\"\n      :popper-class=\"popperClass\"\n      :size=\"size\"\n      :validate-event=\"false\"\n      @change=\"handleChange\"\n    >\n      <el-option\n        v-for=\"item in innerPageSizes\"\n        :key=\"item\"\n        :value=\"item\"\n        :label=\"item + t('el.pagination.pagesize')\"\n      />\n    </el-select>\n  </span>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, ref, watch } from 'vue'\nimport { isEqual } from 'lodash-unified'\nimport { ElOption, ElSelect } from '@element-plus/components/select'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { usePagination } from '../usePagination'\nimport { paginationSizesProps } from './sizes'\n\ndefineOptions({\n  name: 'ElPaginationSizes',\n})\n\nconst props = defineProps(paginationSizesProps)\nconst emit = defineEmits(['page-size-change'])\nconst { t } = useLocale()\nconst ns = useNamespace('pagination')\nconst pagination = usePagination()\nconst innerPageSize = ref<number>(props.pageSize!)\n\nwatch(\n  () => props.pageSizes,\n  (newVal, oldVal) => {\n    if (isEqual(newVal, oldVal)) return\n    if (Array.isArray(newVal)) {\n      const pageSize = newVal.includes(props.pageSize!)\n        ? props.pageSize\n        : props.pageSizes[0]\n      emit('page-size-change', pageSize)\n    }\n  }\n)\n\nwatch(\n  () => props.pageSize,\n  (newVal) => {\n    innerPageSize.value = newVal!\n  }\n)\n\nconst innerPageSizes = computed(() => props.pageSizes)\nfunction handleChange(val: number) {\n  if (val !== innerPageSize.value) {\n    innerPageSize.value = val\n    pagination.handleSizeChange?.(Number(val))\n  }\n}\n</script>\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}