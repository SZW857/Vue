{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// The GlyphSet object\n\nimport Glyph from './glyph';\n\n// Define a property on the glyph that depends on the path being loaded.\nfunction defineDependentProperty(glyph, externalName, internalName) {\n  Object.defineProperty(glyph, externalName, {\n    get: function () {\n      // Request the path property to make sure the path is loaded.\n      glyph.path; // jshint ignore:line\n      return glyph[internalName];\n    },\n    set: function (newValue) {\n      glyph[internalName] = newValue;\n    },\n    enumerable: true,\n    configurable: true\n  });\n}\n\n/**\n * A GlyphSet represents all glyphs available in the font, but modelled using\n * a deferred glyph loader, for retrieving glyphs only once they are absolutely\n * necessary, to keep the memory footprint down.\n * @exports opentype.GlyphSet\n * @class\n * @param {opentype.Font}\n * @param {Array}\n */\nfunction GlyphSet(font, glyphs) {\n  this.font = font;\n  this.glyphs = {};\n  if (Array.isArray(glyphs)) {\n    for (let i = 0; i < glyphs.length; i++) {\n      this.glyphs[i] = glyphs[i];\n    }\n  }\n  this.length = glyphs && glyphs.length || 0;\n}\n\n/**\n * @param  {number} index\n * @return {opentype.Glyph}\n */\nGlyphSet.prototype.get = function (index) {\n  if (typeof this.glyphs[index] === 'function') {\n    this.glyphs[index] = this.glyphs[index]();\n  }\n  return this.glyphs[index];\n};\n\n/**\n * @param  {number} index\n * @param  {Object}\n */\nGlyphSet.prototype.push = function (index, loader) {\n  this.glyphs[index] = loader;\n  this.length++;\n};\n\n/**\n * @alias opentype.glyphLoader\n * @param  {opentype.Font} font\n * @param  {number} index\n * @return {opentype.Glyph}\n */\nfunction glyphLoader(font, index) {\n  return new Glyph({\n    index: index,\n    font: font\n  });\n}\n\n/**\n * Generate a stub glyph that can be filled with all metadata *except*\n * the \"points\" and \"path\" properties, which must be loaded only once\n * the glyph's path is actually requested for text shaping.\n * @alias opentype.ttfGlyphLoader\n * @param  {opentype.Font} font\n * @param  {number} index\n * @param  {Function} parseGlyph\n * @param  {Object} data\n * @param  {number} position\n * @param  {Function} buildPath\n * @return {opentype.Glyph}\n */\nfunction ttfGlyphLoader(font, index, parseGlyph, data, position, buildPath) {\n  return function () {\n    const glyph = new Glyph({\n      index: index,\n      font: font\n    });\n    glyph.path = function () {\n      parseGlyph(glyph, data, position);\n      const path = buildPath(font.glyphs, glyph);\n      path.unitsPerEm = font.unitsPerEm;\n      return path;\n    };\n    defineDependentProperty(glyph, 'xMin', '_xMin');\n    defineDependentProperty(glyph, 'xMax', '_xMax');\n    defineDependentProperty(glyph, 'yMin', '_yMin');\n    defineDependentProperty(glyph, 'yMax', '_yMax');\n    return glyph;\n  };\n}\n/**\n * @alias opentype.cffGlyphLoader\n * @param  {opentype.Font} font\n * @param  {number} index\n * @param  {Function} parseCFFCharstring\n * @param  {string} charstring\n * @return {opentype.Glyph}\n */\nfunction cffGlyphLoader(font, index, parseCFFCharstring, charstring) {\n  return function () {\n    const glyph = new Glyph({\n      index: index,\n      font: font\n    });\n    glyph.path = function () {\n      const path = parseCFFCharstring(font, glyph, charstring);\n      path.unitsPerEm = font.unitsPerEm;\n      return path;\n    };\n    return glyph;\n  };\n}\nexport default {\n  GlyphSet,\n  glyphLoader,\n  ttfGlyphLoader,\n  cffGlyphLoader\n};","map":{"version":3,"names":["Glyph","defineDependentProperty","glyph","externalName","internalName","Object","defineProperty","get","path","set","newValue","enumerable","configurable","GlyphSet","font","glyphs","Array","isArray","i","length","prototype","index","push","loader","glyphLoader","ttfGlyphLoader","parseGlyph","data","position","buildPath","unitsPerEm","cffGlyphLoader","parseCFFCharstring","charstring"],"sources":["C:/Users/14486/Desktop/社区公益系统前端/vue_community/node_modules/opentype.js/src/glyphset.js"],"sourcesContent":["// The GlyphSet object\n\nimport Glyph from './glyph';\n\n// Define a property on the glyph that depends on the path being loaded.\nfunction defineDependentProperty(glyph, externalName, internalName) {\n    Object.defineProperty(glyph, externalName, {\n        get: function() {\n            // Request the path property to make sure the path is loaded.\n            glyph.path; // jshint ignore:line\n            return glyph[internalName];\n        },\n        set: function(newValue) {\n            glyph[internalName] = newValue;\n        },\n        enumerable: true,\n        configurable: true\n    });\n}\n\n/**\n * A GlyphSet represents all glyphs available in the font, but modelled using\n * a deferred glyph loader, for retrieving glyphs only once they are absolutely\n * necessary, to keep the memory footprint down.\n * @exports opentype.GlyphSet\n * @class\n * @param {opentype.Font}\n * @param {Array}\n */\nfunction GlyphSet(font, glyphs) {\n    this.font = font;\n    this.glyphs = {};\n    if (Array.isArray(glyphs)) {\n        for (let i = 0; i < glyphs.length; i++) {\n            this.glyphs[i] = glyphs[i];\n        }\n    }\n\n    this.length = (glyphs && glyphs.length) || 0;\n}\n\n/**\n * @param  {number} index\n * @return {opentype.Glyph}\n */\nGlyphSet.prototype.get = function(index) {\n    if (typeof this.glyphs[index] === 'function') {\n        this.glyphs[index] = this.glyphs[index]();\n    }\n\n    return this.glyphs[index];\n};\n\n/**\n * @param  {number} index\n * @param  {Object}\n */\nGlyphSet.prototype.push = function(index, loader) {\n    this.glyphs[index] = loader;\n    this.length++;\n};\n\n/**\n * @alias opentype.glyphLoader\n * @param  {opentype.Font} font\n * @param  {number} index\n * @return {opentype.Glyph}\n */\nfunction glyphLoader(font, index) {\n    return new Glyph({index: index, font: font});\n}\n\n/**\n * Generate a stub glyph that can be filled with all metadata *except*\n * the \"points\" and \"path\" properties, which must be loaded only once\n * the glyph's path is actually requested for text shaping.\n * @alias opentype.ttfGlyphLoader\n * @param  {opentype.Font} font\n * @param  {number} index\n * @param  {Function} parseGlyph\n * @param  {Object} data\n * @param  {number} position\n * @param  {Function} buildPath\n * @return {opentype.Glyph}\n */\nfunction ttfGlyphLoader(font, index, parseGlyph, data, position, buildPath) {\n    return function() {\n        const glyph = new Glyph({index: index, font: font});\n\n        glyph.path = function() {\n            parseGlyph(glyph, data, position);\n            const path = buildPath(font.glyphs, glyph);\n            path.unitsPerEm = font.unitsPerEm;\n            return path;\n        };\n\n        defineDependentProperty(glyph, 'xMin', '_xMin');\n        defineDependentProperty(glyph, 'xMax', '_xMax');\n        defineDependentProperty(glyph, 'yMin', '_yMin');\n        defineDependentProperty(glyph, 'yMax', '_yMax');\n\n        return glyph;\n    };\n}\n/**\n * @alias opentype.cffGlyphLoader\n * @param  {opentype.Font} font\n * @param  {number} index\n * @param  {Function} parseCFFCharstring\n * @param  {string} charstring\n * @return {opentype.Glyph}\n */\nfunction cffGlyphLoader(font, index, parseCFFCharstring, charstring) {\n    return function() {\n        const glyph = new Glyph({index: index, font: font});\n\n        glyph.path = function() {\n            const path = parseCFFCharstring(font, glyph, charstring);\n            path.unitsPerEm = font.unitsPerEm;\n            return path;\n        };\n\n        return glyph;\n    };\n}\n\nexport default { GlyphSet, glyphLoader, ttfGlyphLoader, cffGlyphLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}