{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nrequire('../../../../hooks/index.js');\nvar colorPicker = require('../color-picker.js');\nvar color = require('../utils/color.js');\nvar pluginVue_exportHelper = require('../../../../_virtual/plugin-vue_export-helper.js');\nvar index = require('../../../../hooks/use-namespace/index.js');\nconst _sfc_main = vue.defineComponent({\n  props: {\n    colors: {\n      type: Array,\n      required: true\n    },\n    color: {\n      type: Object,\n      required: true\n    }\n  },\n  setup(props) {\n    const ns = index.useNamespace(\"color-predefine\");\n    const {\n      currentColor\n    } = vue.inject(colorPicker.colorPickerContextKey);\n    const rgbaColors = vue.ref(parseColors(props.colors, props.color));\n    vue.watch(() => currentColor.value, val => {\n      const color$1 = new color[\"default\"]();\n      color$1.fromString(val);\n      rgbaColors.value.forEach(item => {\n        item.selected = color$1.compare(item);\n      });\n    });\n    vue.watchEffect(() => {\n      rgbaColors.value = parseColors(props.colors, props.color);\n    });\n    function handleSelect(index) {\n      props.color.fromString(props.colors[index]);\n    }\n    function parseColors(colors, color$1) {\n      return colors.map(value => {\n        const c = new color[\"default\"]();\n        c.enableAlpha = true;\n        c.format = \"rgba\";\n        c.fromString(value);\n        c.selected = c.value === color$1.value;\n        return c;\n      });\n    }\n    return {\n      rgbaColors,\n      handleSelect,\n      ns\n    };\n  }\n});\nconst _hoisted_1 = [\"onClick\"];\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return vue.openBlock(), vue.createElementBlock(\"div\", {\n    class: vue.normalizeClass(_ctx.ns.b())\n  }, [vue.createElementVNode(\"div\", {\n    class: vue.normalizeClass(_ctx.ns.e(\"colors\"))\n  }, [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.rgbaColors, (item, index) => {\n    return vue.openBlock(), vue.createElementBlock(\"div\", {\n      key: _ctx.colors[index],\n      class: vue.normalizeClass([_ctx.ns.e(\"color-selector\"), _ctx.ns.is(\"alpha\", item._alpha < 100), {\n        selected: item.selected\n      }]),\n      onClick: $event => _ctx.handleSelect(index)\n    }, [vue.createElementVNode(\"div\", {\n      style: vue.normalizeStyle({\n        backgroundColor: item.value\n      })\n    }, null, 4)], 10, _hoisted_1);\n  }), 128))], 2)], 2);\n}\nvar Predefine = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/color-picker/src/components/predefine.vue\"]]);\nexports[\"default\"] = Predefine;","map":{"version":3,"mappings":";;;;;;;;;;;AA2BA,MAAKA,YAAaC,mBAAa;EAC7BC,KAAO;IACLC,MAAQ;MACNC,IAAM;MACNC,QAAU;IAAA,CACZ;IACAC,KAAO;MACLF,IAAM;MACNC,QAAU;IAAA;EACZ,CACF;EACAE,MAAML,KAAO;IACL,WAAKM,mBAAa,iBAAiB;IACnC;MAAEC;IAAiB,eAAOC,iCAAqB;IAErD,MAAMC,aAAaC,OAAI,aAAYV,MAAMC,MAAQ,QAAMG,KAAK,CAAC;IAI7DO,UACE,MAAMJ,aAAaK,KACnB,EAACC,GAAQ;MACD,gBAAQ,IAAIC,gBAAM;MACxBV,QAAMW,WAAWF,GAAG;MAETJ,iBAAMO,OAAQ,CAACC,IAAS;QAC5BA,gBAAWb,OAAM,SAAQa,IAAI;MAAA,CACnC;IAAA,CAEL;IAEAC,gBAAY,MAAM;MAChBT,WAAWG,KAAQ,eAAYZ,KAAM,SAAQA,MAAMI,KAAK;IAAA,CACzD;IAED,sBAAsBe,KAAe;MACnCnB,MAAMI,KAAM,YAAWJ,KAAM,QAAOmB,KAAM;IAAA;IAG5C,qBAAqBlB,QAAkBG,OAAc;MAC5C,cAAOgB,GAAI,CAACR,KAAU;QACrB,UAAI,IAAIE,gBAAM;QACpBO,EAAEC,WAAc;QAChBD,EAAEE,MAAS;QACXF,EAAEN,WAAWH,KAAK;QAChBS,aAAWA,CAAE,WAAUjB,OAAM;QACxB;MAAA,CACR;IAAA;IAEI;MACLK;MACAe;MACAC;IAAA,CACF;EAAA;AAEJ,CAAC;;;0BAjFCC,sBAeM;IAfAC,OAAKC,kBAAE,SAAGC,CAAC;EAAA,IACfC,sBAaM;IAbAH,OAAKC,kBAAE,SAAGG,CAAC;EAAA,KACfC,4CAWMC,YAVoB,wCAAU,CAA1BhB,MAAME,KAAK;4BADrBO,sBAWM;MATHQ,KAAKC,IAAO;MACZR,KAAK,sBAAcQ,QAAGJ,CAAC,oBAA8BI,IAAG,OAAE,OAAU,OAAKC,MAAM;QAAAC,UAA+BpB,KAAKoB;MAAQ;MAK3HC,OAAK,YAAEH,kBAAahB,KAAK;IAAA,IAE1BW,sBAAgD;MAA1CS,OAAKC,kBAAqB;QAAAC,sBAAK7B;MAAK;IAAA","names":["_sfc_main","defineComponent","props","colors","type","required","color","setup","useNamespace","currentColor","colorPickerContextKey","rgbaColors","ref","watch","value","val","Color","fromString","forEach","item","watchEffect","index","map","c","enableAlpha","format","handleSelect","ns","_createElementBlock","class","_normalizeClass","b","_createElementVNode","e","_openBlock","_Fragment","key","_ctx","_alpha","selected","onClick","style","_normalizeStyle","backgroundColor"],"sources":["../../../../../../../packages/components/color-picker/src/components/predefine.vue"],"sourcesContent":["<template>\n  <div :class=\"ns.b()\">\n    <div :class=\"ns.e('colors')\">\n      <div\n        v-for=\"(item, index) in rgbaColors\"\n        :key=\"colors[index]\"\n        :class=\"[\n          ns.e('color-selector'),\n          ns.is('alpha', item._alpha < 100),\n          { selected: item.selected },\n        ]\"\n        @click=\"handleSelect(index)\"\n      >\n        <div :style=\"{ backgroundColor: item.value }\" />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, inject, ref, watch, watchEffect } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { colorPickerContextKey } from '../color-picker'\nimport Color from '../utils/color'\n\nimport type { PropType, Ref } from 'vue'\n\nexport default defineComponent({\n  props: {\n    colors: {\n      type: Array as PropType<string[]>,\n      required: true,\n    },\n    color: {\n      type: Object as PropType<Color>,\n      required: true,\n    },\n  },\n  setup(props) {\n    const ns = useNamespace('color-predefine')\n    const { currentColor } = inject(colorPickerContextKey)!\n\n    const rgbaColors = ref(parseColors(props.colors, props.color)) as Ref<\n      Color[]\n    >\n\n    watch(\n      () => currentColor.value,\n      (val) => {\n        const color = new Color()\n        color.fromString(val)\n\n        rgbaColors.value.forEach((item) => {\n          item.selected = color.compare(item)\n        })\n      }\n    )\n\n    watchEffect(() => {\n      rgbaColors.value = parseColors(props.colors, props.color)\n    })\n\n    function handleSelect(index: number) {\n      props.color.fromString(props.colors[index])\n    }\n\n    function parseColors(colors: string[], color: Color) {\n      return colors.map((value) => {\n        const c = new Color()\n        c.enableAlpha = true\n        c.format = 'rgba'\n        c.fromString(value)\n        c.selected = c.value === color.value\n        return c\n      })\n    }\n    return {\n      rgbaColors,\n      handleSelect,\n      ns,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}