{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// The `post` table stores additional PostScript information, such as glyph names.\n// https://www.microsoft.com/typography/OTSPEC/post.htm\n\nimport { standardNames } from '../encoding';\nimport parse from '../parse';\nimport table from '../table';\n\n// Parse the PostScript `post` table\nfunction parsePostTable(data, start) {\n  const post = {};\n  const p = new parse.Parser(data, start);\n  post.version = p.parseVersion();\n  post.italicAngle = p.parseFixed();\n  post.underlinePosition = p.parseShort();\n  post.underlineThickness = p.parseShort();\n  post.isFixedPitch = p.parseULong();\n  post.minMemType42 = p.parseULong();\n  post.maxMemType42 = p.parseULong();\n  post.minMemType1 = p.parseULong();\n  post.maxMemType1 = p.parseULong();\n  switch (post.version) {\n    case 1:\n      post.names = standardNames.slice();\n      break;\n    case 2:\n      post.numberOfGlyphs = p.parseUShort();\n      post.glyphNameIndex = new Array(post.numberOfGlyphs);\n      for (let i = 0; i < post.numberOfGlyphs; i++) {\n        post.glyphNameIndex[i] = p.parseUShort();\n      }\n      post.names = [];\n      for (let i = 0; i < post.numberOfGlyphs; i++) {\n        if (post.glyphNameIndex[i] >= standardNames.length) {\n          const nameLength = p.parseChar();\n          post.names.push(p.parseString(nameLength));\n        }\n      }\n      break;\n    case 2.5:\n      post.numberOfGlyphs = p.parseUShort();\n      post.offset = new Array(post.numberOfGlyphs);\n      for (let i = 0; i < post.numberOfGlyphs; i++) {\n        post.offset[i] = p.parseChar();\n      }\n      break;\n  }\n  return post;\n}\nfunction makePostTable() {\n  return new table.Table('post', [{\n    name: 'version',\n    type: 'FIXED',\n    value: 0x00030000\n  }, {\n    name: 'italicAngle',\n    type: 'FIXED',\n    value: 0\n  }, {\n    name: 'underlinePosition',\n    type: 'FWORD',\n    value: 0\n  }, {\n    name: 'underlineThickness',\n    type: 'FWORD',\n    value: 0\n  }, {\n    name: 'isFixedPitch',\n    type: 'ULONG',\n    value: 0\n  }, {\n    name: 'minMemType42',\n    type: 'ULONG',\n    value: 0\n  }, {\n    name: 'maxMemType42',\n    type: 'ULONG',\n    value: 0\n  }, {\n    name: 'minMemType1',\n    type: 'ULONG',\n    value: 0\n  }, {\n    name: 'maxMemType1',\n    type: 'ULONG',\n    value: 0\n  }]);\n}\nexport default {\n  parse: parsePostTable,\n  make: makePostTable\n};","map":{"version":3,"names":["standardNames","parse","table","parsePostTable","data","start","post","p","Parser","version","parseVersion","italicAngle","parseFixed","underlinePosition","parseShort","underlineThickness","isFixedPitch","parseULong","minMemType42","maxMemType42","minMemType1","maxMemType1","names","slice","numberOfGlyphs","parseUShort","glyphNameIndex","Array","i","length","nameLength","parseChar","push","parseString","offset","makePostTable","Table","name","type","value","make"],"sources":["C:/Users/14486/Desktop/社区公益系统前端/vue_community/node_modules/opentype.js/src/tables/post.js"],"sourcesContent":["// The `post` table stores additional PostScript information, such as glyph names.\n// https://www.microsoft.com/typography/OTSPEC/post.htm\n\nimport { standardNames } from '../encoding';\nimport parse from '../parse';\nimport table from '../table';\n\n// Parse the PostScript `post` table\nfunction parsePostTable(data, start) {\n    const post = {};\n    const p = new parse.Parser(data, start);\n    post.version = p.parseVersion();\n    post.italicAngle = p.parseFixed();\n    post.underlinePosition = p.parseShort();\n    post.underlineThickness = p.parseShort();\n    post.isFixedPitch = p.parseULong();\n    post.minMemType42 = p.parseULong();\n    post.maxMemType42 = p.parseULong();\n    post.minMemType1 = p.parseULong();\n    post.maxMemType1 = p.parseULong();\n    switch (post.version) {\n        case 1:\n            post.names = standardNames.slice();\n            break;\n        case 2:\n            post.numberOfGlyphs = p.parseUShort();\n            post.glyphNameIndex = new Array(post.numberOfGlyphs);\n            for (let i = 0; i < post.numberOfGlyphs; i++) {\n                post.glyphNameIndex[i] = p.parseUShort();\n            }\n\n            post.names = [];\n            for (let i = 0; i < post.numberOfGlyphs; i++) {\n                if (post.glyphNameIndex[i] >= standardNames.length) {\n                    const nameLength = p.parseChar();\n                    post.names.push(p.parseString(nameLength));\n                }\n            }\n\n            break;\n        case 2.5:\n            post.numberOfGlyphs = p.parseUShort();\n            post.offset = new Array(post.numberOfGlyphs);\n            for (let i = 0; i < post.numberOfGlyphs; i++) {\n                post.offset[i] = p.parseChar();\n            }\n\n            break;\n    }\n    return post;\n}\n\nfunction makePostTable() {\n    return new table.Table('post', [\n        {name: 'version', type: 'FIXED', value: 0x00030000},\n        {name: 'italicAngle', type: 'FIXED', value: 0},\n        {name: 'underlinePosition', type: 'FWORD', value: 0},\n        {name: 'underlineThickness', type: 'FWORD', value: 0},\n        {name: 'isFixedPitch', type: 'ULONG', value: 0},\n        {name: 'minMemType42', type: 'ULONG', value: 0},\n        {name: 'maxMemType42', type: 'ULONG', value: 0},\n        {name: 'minMemType1', type: 'ULONG', value: 0},\n        {name: 'maxMemType1', type: 'ULONG', value: 0}\n    ]);\n}\n\nexport default { parse: parsePostTable, make: makePostTable };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}