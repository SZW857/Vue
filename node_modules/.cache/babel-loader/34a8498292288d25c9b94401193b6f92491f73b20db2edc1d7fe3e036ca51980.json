{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.typed-array.find-last.js\";\nimport \"core-js/modules/es.typed-array.find-last-index.js\";\n// The Font object\n\nimport Path from './path';\nimport sfnt from './tables/sfnt';\nimport { DefaultEncoding } from './encoding';\nimport glyphset from './glyphset';\nimport Substitution from './substitution';\nimport { isBrowser, checkArgument, arrayBufferToNodeBuffer } from './util';\nimport HintingTrueType from './hintingtt';\n\n/**\n * @typedef FontOptions\n * @type Object\n * @property {Boolean} empty - whether to create a new empty font\n * @property {string} familyName\n * @property {string} styleName\n * @property {string=} fullName\n * @property {string=} postScriptName\n * @property {string=} designer\n * @property {string=} designerURL\n * @property {string=} manufacturer\n * @property {string=} manufacturerURL\n * @property {string=} license\n * @property {string=} licenseURL\n * @property {string=} version\n * @property {string=} description\n * @property {string=} copyright\n * @property {string=} trademark\n * @property {Number} unitsPerEm\n * @property {Number} ascender\n * @property {Number} descender\n * @property {Number} createdTimestamp\n * @property {string=} weightClass\n * @property {string=} widthClass\n * @property {string=} fsSelection\n */\n\n/**\n * A Font represents a loaded OpenType font file.\n * It contains a set of glyphs and methods to draw text on a drawing context,\n * or to get a path representing the text.\n * @exports opentype.Font\n * @class\n * @param {FontOptions}\n * @constructor\n */\nfunction Font(options) {\n  options = options || {};\n  if (!options.empty) {\n    // Check that we've provided the minimum set of names.\n    checkArgument(options.familyName, 'When creating a new Font object, familyName is required.');\n    checkArgument(options.styleName, 'When creating a new Font object, styleName is required.');\n    checkArgument(options.unitsPerEm, 'When creating a new Font object, unitsPerEm is required.');\n    checkArgument(options.ascender, 'When creating a new Font object, ascender is required.');\n    checkArgument(options.descender, 'When creating a new Font object, descender is required.');\n    checkArgument(options.descender < 0, 'Descender should be negative (e.g. -512).');\n\n    // OS X will complain if the names are empty, so we put a single space everywhere by default.\n    this.names = {\n      fontFamily: {\n        en: options.familyName || ' '\n      },\n      fontSubfamily: {\n        en: options.styleName || ' '\n      },\n      fullName: {\n        en: options.fullName || options.familyName + ' ' + options.styleName\n      },\n      postScriptName: {\n        en: options.postScriptName || options.familyName + options.styleName\n      },\n      designer: {\n        en: options.designer || ' '\n      },\n      designerURL: {\n        en: options.designerURL || ' '\n      },\n      manufacturer: {\n        en: options.manufacturer || ' '\n      },\n      manufacturerURL: {\n        en: options.manufacturerURL || ' '\n      },\n      license: {\n        en: options.license || ' '\n      },\n      licenseURL: {\n        en: options.licenseURL || ' '\n      },\n      version: {\n        en: options.version || 'Version 0.1'\n      },\n      description: {\n        en: options.description || ' '\n      },\n      copyright: {\n        en: options.copyright || ' '\n      },\n      trademark: {\n        en: options.trademark || ' '\n      }\n    };\n    this.unitsPerEm = options.unitsPerEm || 1000;\n    this.ascender = options.ascender;\n    this.descender = options.descender;\n    this.createdTimestamp = options.createdTimestamp;\n    this.tables = {\n      os2: {\n        usWeightClass: options.weightClass || this.usWeightClasses.MEDIUM,\n        usWidthClass: options.widthClass || this.usWidthClasses.MEDIUM,\n        fsSelection: options.fsSelection || this.fsSelectionValues.REGULAR\n      }\n    };\n  }\n  this.supported = true; // Deprecated: parseBuffer will throw an error if font is not supported.\n  this.glyphs = new glyphset.GlyphSet(this, options.glyphs || []);\n  this.encoding = new DefaultEncoding(this);\n  this.substitution = new Substitution(this);\n  this.tables = this.tables || {};\n  Object.defineProperty(this, 'hinting', {\n    get: function () {\n      if (this._hinting) return this._hinting;\n      if (this.outlinesFormat === 'truetype') {\n        return this._hinting = new HintingTrueType(this);\n      }\n    }\n  });\n}\n\n/**\n * Check if the font has a glyph for the given character.\n * @param  {string}\n * @return {Boolean}\n */\nFont.prototype.hasChar = function (c) {\n  return this.encoding.charToGlyphIndex(c) !== null;\n};\n\n/**\n * Convert the given character to a single glyph index.\n * Note that this function assumes that there is a one-to-one mapping between\n * the given character and a glyph; for complex scripts this might not be the case.\n * @param  {string}\n * @return {Number}\n */\nFont.prototype.charToGlyphIndex = function (s) {\n  return this.encoding.charToGlyphIndex(s);\n};\n\n/**\n * Convert the given character to a single Glyph object.\n * Note that this function assumes that there is a one-to-one mapping between\n * the given character and a glyph; for complex scripts this might not be the case.\n * @param  {string}\n * @return {opentype.Glyph}\n */\nFont.prototype.charToGlyph = function (c) {\n  const glyphIndex = this.charToGlyphIndex(c);\n  let glyph = this.glyphs.get(glyphIndex);\n  if (!glyph) {\n    // .notdef\n    glyph = this.glyphs.get(0);\n  }\n  return glyph;\n};\n\n/**\n * Convert the given text to a list of Glyph objects.\n * Note that there is no strict one-to-one mapping between characters and\n * glyphs, so the list of returned glyphs can be larger or smaller than the\n * length of the given string.\n * @param  {string}\n * @param  {GlyphRenderOptions} [options]\n * @return {opentype.Glyph[]}\n */\nFont.prototype.stringToGlyphs = function (s, options) {\n  options = options || this.defaultRenderOptions;\n  // Get glyph indexes\n  const indexes = [];\n  for (let i = 0; i < s.length; i += 1) {\n    const c = s[i];\n    indexes.push(this.charToGlyphIndex(c));\n  }\n  let length = indexes.length;\n\n  // Apply substitutions on glyph indexes\n  if (options.features) {\n    const script = options.script || this.substitution.getDefaultScriptName();\n    let manyToOne = [];\n    if (options.features.liga) manyToOne = manyToOne.concat(this.substitution.getFeature('liga', script, options.language));\n    if (options.features.rlig) manyToOne = manyToOne.concat(this.substitution.getFeature('rlig', script, options.language));\n    for (let i = 0; i < length; i += 1) {\n      for (let j = 0; j < manyToOne.length; j++) {\n        const ligature = manyToOne[j];\n        const components = ligature.sub;\n        const compCount = components.length;\n        let k = 0;\n        while (k < compCount && components[k] === indexes[i + k]) k++;\n        if (k === compCount) {\n          indexes.splice(i, compCount, ligature.by);\n          length = length - compCount + 1;\n        }\n      }\n    }\n  }\n\n  // convert glyph indexes to glyph objects\n  const glyphs = new Array(length);\n  const notdef = this.glyphs.get(0);\n  for (let i = 0; i < length; i += 1) {\n    glyphs[i] = this.glyphs.get(indexes[i]) || notdef;\n  }\n  return glyphs;\n};\n\n/**\n * @param  {string}\n * @return {Number}\n */\nFont.prototype.nameToGlyphIndex = function (name) {\n  return this.glyphNames.nameToGlyphIndex(name);\n};\n\n/**\n * @param  {string}\n * @return {opentype.Glyph}\n */\nFont.prototype.nameToGlyph = function (name) {\n  const glyphIndex = this.nameToGlyphIndex(name);\n  let glyph = this.glyphs.get(glyphIndex);\n  if (!glyph) {\n    // .notdef\n    glyph = this.glyphs.get(0);\n  }\n  return glyph;\n};\n\n/**\n * @param  {Number}\n * @return {String}\n */\nFont.prototype.glyphIndexToName = function (gid) {\n  if (!this.glyphNames.glyphIndexToName) {\n    return '';\n  }\n  return this.glyphNames.glyphIndexToName(gid);\n};\n\n/**\n * Retrieve the value of the kerning pair between the left glyph (or its index)\n * and the right glyph (or its index). If no kerning pair is found, return 0.\n * The kerning value gets added to the advance width when calculating the spacing\n * between glyphs.\n * @param  {opentype.Glyph} leftGlyph\n * @param  {opentype.Glyph} rightGlyph\n * @return {Number}\n */\nFont.prototype.getKerningValue = function (leftGlyph, rightGlyph) {\n  leftGlyph = leftGlyph.index || leftGlyph;\n  rightGlyph = rightGlyph.index || rightGlyph;\n  const gposKerning = this.getGposKerningValue;\n  return gposKerning ? gposKerning(leftGlyph, rightGlyph) : this.kerningPairs[leftGlyph + ',' + rightGlyph] || 0;\n};\n\n/**\n * @typedef GlyphRenderOptions\n * @type Object\n * @property {string} [script] - script used to determine which features to apply. By default, 'DFLT' or 'latn' is used.\n *                               See https://www.microsoft.com/typography/otspec/scripttags.htm\n * @property {string} [language='dflt'] - language system used to determine which features to apply.\n *                                        See https://www.microsoft.com/typography/developers/opentype/languagetags.aspx\n * @property {boolean} [kerning=true] - whether to include kerning values\n * @property {object} [features] - OpenType Layout feature tags. Used to enable or disable the features of the given script/language system.\n *                                 See https://www.microsoft.com/typography/otspec/featuretags.htm\n */\nFont.prototype.defaultRenderOptions = {\n  kerning: true,\n  features: {\n    liga: true,\n    rlig: true\n  }\n};\n\n/**\n * Helper function that invokes the given callback for each glyph in the given text.\n * The callback gets `(glyph, x, y, fontSize, options)`.* @param  {string} text\n * @param {string} text - The text to apply.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {GlyphRenderOptions=} options\n * @param  {Function} callback\n */\nFont.prototype.forEachGlyph = function (text, x, y, fontSize, options, callback) {\n  x = x !== undefined ? x : 0;\n  y = y !== undefined ? y : 0;\n  fontSize = fontSize !== undefined ? fontSize : 72;\n  options = options || this.defaultRenderOptions;\n  const fontScale = 1 / this.unitsPerEm * fontSize;\n  const glyphs = this.stringToGlyphs(text, options);\n  for (let i = 0; i < glyphs.length; i += 1) {\n    const glyph = glyphs[i];\n    callback.call(this, glyph, x, y, fontSize, options);\n    if (glyph.advanceWidth) {\n      x += glyph.advanceWidth * fontScale;\n    }\n    if (options.kerning && i < glyphs.length - 1) {\n      const kerningValue = this.getKerningValue(glyph, glyphs[i + 1]);\n      x += kerningValue * fontScale;\n    }\n    if (options.letterSpacing) {\n      x += options.letterSpacing * fontSize;\n    } else if (options.tracking) {\n      x += options.tracking / 1000 * fontSize;\n    }\n  }\n  return x;\n};\n\n/**\n * Create a Path object that represents the given text.\n * @param  {string} text - The text to create.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {GlyphRenderOptions=} options\n * @return {opentype.Path}\n */\nFont.prototype.getPath = function (text, x, y, fontSize, options) {\n  const fullPath = new Path();\n  this.forEachGlyph(text, x, y, fontSize, options, function (glyph, gX, gY, gFontSize) {\n    const glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);\n    fullPath.extend(glyphPath);\n  });\n  return fullPath;\n};\n\n/**\n * Create an array of Path objects that represent the glyphs of a given text.\n * @param  {string} text - The text to create.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {GlyphRenderOptions=} options\n * @return {opentype.Path[]}\n */\nFont.prototype.getPaths = function (text, x, y, fontSize, options) {\n  const glyphPaths = [];\n  this.forEachGlyph(text, x, y, fontSize, options, function (glyph, gX, gY, gFontSize) {\n    const glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);\n    glyphPaths.push(glyphPath);\n  });\n  return glyphPaths;\n};\n\n/**\n * Returns the advance width of a text.\n *\n * This is something different than Path.getBoundingBox() as for example a\n * suffixed whitespace increases the advanceWidth but not the bounding box\n * or an overhanging letter like a calligraphic 'f' might have a quite larger\n * bounding box than its advance width.\n *\n * This corresponds to canvas2dContext.measureText(text).width\n *\n * @param  {string} text - The text to create.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {GlyphRenderOptions=} options\n * @return advance width\n */\nFont.prototype.getAdvanceWidth = function (text, fontSize, options) {\n  return this.forEachGlyph(text, 0, 0, fontSize, options, function () {});\n};\n\n/**\n * Draw the text on the given drawing context.\n * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n * @param  {string} text - The text to create.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {GlyphRenderOptions=} options\n */\nFont.prototype.draw = function (ctx, text, x, y, fontSize, options) {\n  this.getPath(text, x, y, fontSize, options).draw(ctx);\n};\n\n/**\n * Draw the points of all glyphs in the text.\n * On-curve points will be drawn in blue, off-curve points will be drawn in red.\n * @param {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n * @param {string} text - The text to create.\n * @param {number} [x=0] - Horizontal position of the beginning of the text.\n * @param {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param {GlyphRenderOptions=} options\n */\nFont.prototype.drawPoints = function (ctx, text, x, y, fontSize, options) {\n  this.forEachGlyph(text, x, y, fontSize, options, function (glyph, gX, gY, gFontSize) {\n    glyph.drawPoints(ctx, gX, gY, gFontSize);\n  });\n};\n\n/**\n * Draw lines indicating important font measurements for all glyphs in the text.\n * Black lines indicate the origin of the coordinate system (point 0,0).\n * Blue lines indicate the glyph bounding box.\n * Green line indicates the advance width of the glyph.\n * @param {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n * @param {string} text - The text to create.\n * @param {number} [x=0] - Horizontal position of the beginning of the text.\n * @param {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param {GlyphRenderOptions=} options\n */\nFont.prototype.drawMetrics = function (ctx, text, x, y, fontSize, options) {\n  this.forEachGlyph(text, x, y, fontSize, options, function (glyph, gX, gY, gFontSize) {\n    glyph.drawMetrics(ctx, gX, gY, gFontSize);\n  });\n};\n\n/**\n * @param  {string}\n * @return {string}\n */\nFont.prototype.getEnglishName = function (name) {\n  const translations = this.names[name];\n  if (translations) {\n    return translations.en;\n  }\n};\n\n/**\n * Validate\n */\nFont.prototype.validate = function () {\n  const warnings = [];\n  const _this = this;\n  function assert(predicate, message) {\n    if (!predicate) {\n      warnings.push(message);\n    }\n  }\n  function assertNamePresent(name) {\n    const englishName = _this.getEnglishName(name);\n    assert(englishName && englishName.trim().length > 0, 'No English ' + name + ' specified.');\n  }\n\n  // Identification information\n  assertNamePresent('fontFamily');\n  assertNamePresent('weightName');\n  assertNamePresent('manufacturer');\n  assertNamePresent('copyright');\n  assertNamePresent('version');\n\n  // Dimension information\n  assert(this.unitsPerEm > 0, 'No unitsPerEm specified.');\n};\n\n/**\n * Convert the font object to a SFNT data structure.\n * This structure contains all the necessary tables and metadata to create a binary OTF file.\n * @return {opentype.Table}\n */\nFont.prototype.toTables = function () {\n  return sfnt.fontToTable(this);\n};\n/**\n * @deprecated Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.\n */\nFont.prototype.toBuffer = function () {\n  console.warn('Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.');\n  return this.toArrayBuffer();\n};\n/**\n * Converts a `opentype.Font` into an `ArrayBuffer`\n * @return {ArrayBuffer}\n */\nFont.prototype.toArrayBuffer = function () {\n  const sfntTable = this.toTables();\n  const bytes = sfntTable.encode();\n  const buffer = new ArrayBuffer(bytes.length);\n  const intArray = new Uint8Array(buffer);\n  for (let i = 0; i < bytes.length; i++) {\n    intArray[i] = bytes[i];\n  }\n  return buffer;\n};\n\n/**\n * Initiate a download of the OpenType font.\n */\nFont.prototype.download = function (fileName) {\n  const familyName = this.getEnglishName('fontFamily');\n  const styleName = this.getEnglishName('fontSubfamily');\n  fileName = fileName || familyName.replace(/\\s/g, '') + '-' + styleName + '.otf';\n  const arrayBuffer = this.toArrayBuffer();\n  if (isBrowser()) {\n    window.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem;\n    window.requestFileSystem(window.TEMPORARY, arrayBuffer.byteLength, function (fs) {\n      fs.root.getFile(fileName, {\n        create: true\n      }, function (fileEntry) {\n        fileEntry.createWriter(function (writer) {\n          const dataView = new DataView(arrayBuffer);\n          const blob = new Blob([dataView], {\n            type: 'font/opentype'\n          });\n          writer.write(blob);\n          writer.addEventListener('writeend', function () {\n            // Navigating to the file will download it.\n            location.href = fileEntry.toURL();\n          }, false);\n        });\n      });\n    }, function (err) {\n      throw new Error(err.name + ': ' + err.message);\n    });\n  } else {\n    const fs = require('fs');\n    const buffer = arrayBufferToNodeBuffer(arrayBuffer);\n    fs.writeFileSync(fileName, buffer);\n  }\n};\n/**\n * @private\n */\nFont.prototype.fsSelectionValues = {\n  ITALIC: 0x001,\n  //1\n  UNDERSCORE: 0x002,\n  //2\n  NEGATIVE: 0x004,\n  //4\n  OUTLINED: 0x008,\n  //8\n  STRIKEOUT: 0x010,\n  //16\n  BOLD: 0x020,\n  //32\n  REGULAR: 0x040,\n  //64\n  USER_TYPO_METRICS: 0x080,\n  //128\n  WWS: 0x100,\n  //256\n  OBLIQUE: 0x200 //512\n};\n\n/**\n * @private\n */\nFont.prototype.usWidthClasses = {\n  ULTRA_CONDENSED: 1,\n  EXTRA_CONDENSED: 2,\n  CONDENSED: 3,\n  SEMI_CONDENSED: 4,\n  MEDIUM: 5,\n  SEMI_EXPANDED: 6,\n  EXPANDED: 7,\n  EXTRA_EXPANDED: 8,\n  ULTRA_EXPANDED: 9\n};\n\n/**\n * @private\n */\nFont.prototype.usWeightClasses = {\n  THIN: 100,\n  EXTRA_LIGHT: 200,\n  LIGHT: 300,\n  NORMAL: 400,\n  MEDIUM: 500,\n  SEMI_BOLD: 600,\n  BOLD: 700,\n  EXTRA_BOLD: 800,\n  BLACK: 900\n};\nexport default Font;","map":{"version":3,"names":["Path","sfnt","DefaultEncoding","glyphset","Substitution","isBrowser","checkArgument","arrayBufferToNodeBuffer","HintingTrueType","Font","options","empty","familyName","styleName","unitsPerEm","ascender","descender","names","fontFamily","en","fontSubfamily","fullName","postScriptName","designer","designerURL","manufacturer","manufacturerURL","license","licenseURL","version","description","copyright","trademark","createdTimestamp","tables","os2","usWeightClass","weightClass","usWeightClasses","MEDIUM","usWidthClass","widthClass","usWidthClasses","fsSelection","fsSelectionValues","REGULAR","supported","glyphs","GlyphSet","encoding","substitution","Object","defineProperty","get","_hinting","outlinesFormat","prototype","hasChar","c","charToGlyphIndex","s","charToGlyph","glyphIndex","glyph","stringToGlyphs","defaultRenderOptions","indexes","i","length","push","features","script","getDefaultScriptName","manyToOne","liga","concat","getFeature","language","rlig","j","ligature","components","sub","compCount","k","splice","by","Array","notdef","nameToGlyphIndex","name","glyphNames","nameToGlyph","glyphIndexToName","gid","getKerningValue","leftGlyph","rightGlyph","index","gposKerning","getGposKerningValue","kerningPairs","kerning","forEachGlyph","text","x","y","fontSize","callback","undefined","fontScale","call","advanceWidth","kerningValue","letterSpacing","tracking","getPath","fullPath","gX","gY","gFontSize","glyphPath","extend","getPaths","glyphPaths","getAdvanceWidth","draw","ctx","drawPoints","drawMetrics","getEnglishName","translations","validate","warnings","_this","assert","predicate","message","assertNamePresent","englishName","trim","toTables","fontToTable","toBuffer","console","warn","toArrayBuffer","sfntTable","bytes","encode","buffer","ArrayBuffer","intArray","Uint8Array","download","fileName","replace","arrayBuffer","window","requestFileSystem","webkitRequestFileSystem","TEMPORARY","byteLength","fs","root","getFile","create","fileEntry","createWriter","writer","dataView","DataView","blob","Blob","type","write","addEventListener","location","href","toURL","err","Error","require","writeFileSync","ITALIC","UNDERSCORE","NEGATIVE","OUTLINED","STRIKEOUT","BOLD","USER_TYPO_METRICS","WWS","OBLIQUE","ULTRA_CONDENSED","EXTRA_CONDENSED","CONDENSED","SEMI_CONDENSED","SEMI_EXPANDED","EXPANDED","EXTRA_EXPANDED","ULTRA_EXPANDED","THIN","EXTRA_LIGHT","LIGHT","NORMAL","SEMI_BOLD","EXTRA_BOLD","BLACK"],"sources":["C:/Users/14486/Desktop/社区公益系统前端/vue_community/node_modules/opentype.js/src/font.js"],"sourcesContent":["// The Font object\n\nimport Path from './path';\nimport sfnt from './tables/sfnt';\nimport { DefaultEncoding } from './encoding';\nimport glyphset from './glyphset';\nimport Substitution from './substitution';\nimport { isBrowser, checkArgument, arrayBufferToNodeBuffer } from './util';\nimport HintingTrueType from './hintingtt';\n\n/**\n * @typedef FontOptions\n * @type Object\n * @property {Boolean} empty - whether to create a new empty font\n * @property {string} familyName\n * @property {string} styleName\n * @property {string=} fullName\n * @property {string=} postScriptName\n * @property {string=} designer\n * @property {string=} designerURL\n * @property {string=} manufacturer\n * @property {string=} manufacturerURL\n * @property {string=} license\n * @property {string=} licenseURL\n * @property {string=} version\n * @property {string=} description\n * @property {string=} copyright\n * @property {string=} trademark\n * @property {Number} unitsPerEm\n * @property {Number} ascender\n * @property {Number} descender\n * @property {Number} createdTimestamp\n * @property {string=} weightClass\n * @property {string=} widthClass\n * @property {string=} fsSelection\n */\n\n/**\n * A Font represents a loaded OpenType font file.\n * It contains a set of glyphs and methods to draw text on a drawing context,\n * or to get a path representing the text.\n * @exports opentype.Font\n * @class\n * @param {FontOptions}\n * @constructor\n */\nfunction Font(options) {\n    options = options || {};\n\n    if (!options.empty) {\n        // Check that we've provided the minimum set of names.\n        checkArgument(options.familyName, 'When creating a new Font object, familyName is required.');\n        checkArgument(options.styleName, 'When creating a new Font object, styleName is required.');\n        checkArgument(options.unitsPerEm, 'When creating a new Font object, unitsPerEm is required.');\n        checkArgument(options.ascender, 'When creating a new Font object, ascender is required.');\n        checkArgument(options.descender, 'When creating a new Font object, descender is required.');\n        checkArgument(options.descender < 0, 'Descender should be negative (e.g. -512).');\n\n        // OS X will complain if the names are empty, so we put a single space everywhere by default.\n        this.names = {\n            fontFamily: {en: options.familyName || ' '},\n            fontSubfamily: {en: options.styleName || ' '},\n            fullName: {en: options.fullName || options.familyName + ' ' + options.styleName},\n            postScriptName: {en: options.postScriptName || options.familyName + options.styleName},\n            designer: {en: options.designer || ' '},\n            designerURL: {en: options.designerURL || ' '},\n            manufacturer: {en: options.manufacturer || ' '},\n            manufacturerURL: {en: options.manufacturerURL || ' '},\n            license: {en: options.license || ' '},\n            licenseURL: {en: options.licenseURL || ' '},\n            version: {en: options.version || 'Version 0.1'},\n            description: {en: options.description || ' '},\n            copyright: {en: options.copyright || ' '},\n            trademark: {en: options.trademark || ' '}\n        };\n        this.unitsPerEm = options.unitsPerEm || 1000;\n        this.ascender = options.ascender;\n        this.descender = options.descender;\n        this.createdTimestamp = options.createdTimestamp;\n        this.tables = { os2: {\n            usWeightClass: options.weightClass || this.usWeightClasses.MEDIUM,\n            usWidthClass: options.widthClass || this.usWidthClasses.MEDIUM,\n            fsSelection: options.fsSelection || this.fsSelectionValues.REGULAR\n        } };\n    }\n\n    this.supported = true; // Deprecated: parseBuffer will throw an error if font is not supported.\n    this.glyphs = new glyphset.GlyphSet(this, options.glyphs || []);\n    this.encoding = new DefaultEncoding(this);\n    this.substitution = new Substitution(this);\n    this.tables = this.tables || {};\n\n    Object.defineProperty(this, 'hinting', {\n        get: function() {\n            if (this._hinting) return this._hinting;\n            if (this.outlinesFormat === 'truetype') {\n                return (this._hinting = new HintingTrueType(this));\n            }\n        }\n    });\n}\n\n/**\n * Check if the font has a glyph for the given character.\n * @param  {string}\n * @return {Boolean}\n */\nFont.prototype.hasChar = function(c) {\n    return this.encoding.charToGlyphIndex(c) !== null;\n};\n\n/**\n * Convert the given character to a single glyph index.\n * Note that this function assumes that there is a one-to-one mapping between\n * the given character and a glyph; for complex scripts this might not be the case.\n * @param  {string}\n * @return {Number}\n */\nFont.prototype.charToGlyphIndex = function(s) {\n    return this.encoding.charToGlyphIndex(s);\n};\n\n/**\n * Convert the given character to a single Glyph object.\n * Note that this function assumes that there is a one-to-one mapping between\n * the given character and a glyph; for complex scripts this might not be the case.\n * @param  {string}\n * @return {opentype.Glyph}\n */\nFont.prototype.charToGlyph = function(c) {\n    const glyphIndex = this.charToGlyphIndex(c);\n    let glyph = this.glyphs.get(glyphIndex);\n    if (!glyph) {\n        // .notdef\n        glyph = this.glyphs.get(0);\n    }\n\n    return glyph;\n};\n\n/**\n * Convert the given text to a list of Glyph objects.\n * Note that there is no strict one-to-one mapping between characters and\n * glyphs, so the list of returned glyphs can be larger or smaller than the\n * length of the given string.\n * @param  {string}\n * @param  {GlyphRenderOptions} [options]\n * @return {opentype.Glyph[]}\n */\nFont.prototype.stringToGlyphs = function(s, options) {\n    options = options || this.defaultRenderOptions;\n    // Get glyph indexes\n    const indexes = [];\n    for (let i = 0; i < s.length; i += 1) {\n        const c = s[i];\n        indexes.push(this.charToGlyphIndex(c));\n    }\n    let length = indexes.length;\n\n    // Apply substitutions on glyph indexes\n    if (options.features) {\n        const script = options.script || this.substitution.getDefaultScriptName();\n        let manyToOne = [];\n        if (options.features.liga) manyToOne = manyToOne.concat(this.substitution.getFeature('liga', script, options.language));\n        if (options.features.rlig) manyToOne = manyToOne.concat(this.substitution.getFeature('rlig', script, options.language));\n        for (let i = 0; i < length; i += 1) {\n            for (let j = 0; j < manyToOne.length; j++) {\n                const ligature = manyToOne[j];\n                const components = ligature.sub;\n                const compCount = components.length;\n                let k = 0;\n                while (k < compCount && components[k] === indexes[i + k]) k++;\n                if (k === compCount) {\n                    indexes.splice(i, compCount, ligature.by);\n                    length = length - compCount + 1;\n                }\n            }\n        }\n    }\n\n    // convert glyph indexes to glyph objects\n    const glyphs = new Array(length);\n    const notdef = this.glyphs.get(0);\n    for (let i = 0; i < length; i += 1) {\n        glyphs[i] = this.glyphs.get(indexes[i]) || notdef;\n    }\n    return glyphs;\n};\n\n/**\n * @param  {string}\n * @return {Number}\n */\nFont.prototype.nameToGlyphIndex = function(name) {\n    return this.glyphNames.nameToGlyphIndex(name);\n};\n\n/**\n * @param  {string}\n * @return {opentype.Glyph}\n */\nFont.prototype.nameToGlyph = function(name) {\n    const glyphIndex = this.nameToGlyphIndex(name);\n    let glyph = this.glyphs.get(glyphIndex);\n    if (!glyph) {\n        // .notdef\n        glyph = this.glyphs.get(0);\n    }\n\n    return glyph;\n};\n\n/**\n * @param  {Number}\n * @return {String}\n */\nFont.prototype.glyphIndexToName = function(gid) {\n    if (!this.glyphNames.glyphIndexToName) {\n        return '';\n    }\n\n    return this.glyphNames.glyphIndexToName(gid);\n};\n\n/**\n * Retrieve the value of the kerning pair between the left glyph (or its index)\n * and the right glyph (or its index). If no kerning pair is found, return 0.\n * The kerning value gets added to the advance width when calculating the spacing\n * between glyphs.\n * @param  {opentype.Glyph} leftGlyph\n * @param  {opentype.Glyph} rightGlyph\n * @return {Number}\n */\nFont.prototype.getKerningValue = function(leftGlyph, rightGlyph) {\n    leftGlyph = leftGlyph.index || leftGlyph;\n    rightGlyph = rightGlyph.index || rightGlyph;\n    const gposKerning = this.getGposKerningValue;\n    return gposKerning ? gposKerning(leftGlyph, rightGlyph) :\n        (this.kerningPairs[leftGlyph + ',' + rightGlyph] || 0);\n};\n\n/**\n * @typedef GlyphRenderOptions\n * @type Object\n * @property {string} [script] - script used to determine which features to apply. By default, 'DFLT' or 'latn' is used.\n *                               See https://www.microsoft.com/typography/otspec/scripttags.htm\n * @property {string} [language='dflt'] - language system used to determine which features to apply.\n *                                        See https://www.microsoft.com/typography/developers/opentype/languagetags.aspx\n * @property {boolean} [kerning=true] - whether to include kerning values\n * @property {object} [features] - OpenType Layout feature tags. Used to enable or disable the features of the given script/language system.\n *                                 See https://www.microsoft.com/typography/otspec/featuretags.htm\n */\nFont.prototype.defaultRenderOptions = {\n    kerning: true,\n    features: {\n        liga: true,\n        rlig: true\n    }\n};\n\n/**\n * Helper function that invokes the given callback for each glyph in the given text.\n * The callback gets `(glyph, x, y, fontSize, options)`.* @param  {string} text\n * @param {string} text - The text to apply.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {GlyphRenderOptions=} options\n * @param  {Function} callback\n */\nFont.prototype.forEachGlyph = function(text, x, y, fontSize, options, callback) {\n    x = x !== undefined ? x : 0;\n    y = y !== undefined ? y : 0;\n    fontSize = fontSize !== undefined ? fontSize : 72;\n    options = options || this.defaultRenderOptions;\n    const fontScale = 1 / this.unitsPerEm * fontSize;\n    const glyphs = this.stringToGlyphs(text, options);\n    for (let i = 0; i < glyphs.length; i += 1) {\n        const glyph = glyphs[i];\n        callback.call(this, glyph, x, y, fontSize, options);\n        if (glyph.advanceWidth) {\n            x += glyph.advanceWidth * fontScale;\n        }\n\n        if (options.kerning && i < glyphs.length - 1) {\n            const kerningValue = this.getKerningValue(glyph, glyphs[i + 1]);\n            x += kerningValue * fontScale;\n        }\n\n        if (options.letterSpacing) {\n            x += options.letterSpacing * fontSize;\n        } else if (options.tracking) {\n            x += (options.tracking / 1000) * fontSize;\n        }\n    }\n    return x;\n};\n\n/**\n * Create a Path object that represents the given text.\n * @param  {string} text - The text to create.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {GlyphRenderOptions=} options\n * @return {opentype.Path}\n */\nFont.prototype.getPath = function(text, x, y, fontSize, options) {\n    const fullPath = new Path();\n    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n        const glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);\n        fullPath.extend(glyphPath);\n    });\n    return fullPath;\n};\n\n/**\n * Create an array of Path objects that represent the glyphs of a given text.\n * @param  {string} text - The text to create.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {GlyphRenderOptions=} options\n * @return {opentype.Path[]}\n */\nFont.prototype.getPaths = function(text, x, y, fontSize, options) {\n    const glyphPaths = [];\n    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n        const glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);\n        glyphPaths.push(glyphPath);\n    });\n\n    return glyphPaths;\n};\n\n/**\n * Returns the advance width of a text.\n *\n * This is something different than Path.getBoundingBox() as for example a\n * suffixed whitespace increases the advanceWidth but not the bounding box\n * or an overhanging letter like a calligraphic 'f' might have a quite larger\n * bounding box than its advance width.\n *\n * This corresponds to canvas2dContext.measureText(text).width\n *\n * @param  {string} text - The text to create.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {GlyphRenderOptions=} options\n * @return advance width\n */\nFont.prototype.getAdvanceWidth = function(text, fontSize, options) {\n    return this.forEachGlyph(text, 0, 0, fontSize, options, function() {});\n};\n\n/**\n * Draw the text on the given drawing context.\n * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n * @param  {string} text - The text to create.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {GlyphRenderOptions=} options\n */\nFont.prototype.draw = function(ctx, text, x, y, fontSize, options) {\n    this.getPath(text, x, y, fontSize, options).draw(ctx);\n};\n\n/**\n * Draw the points of all glyphs in the text.\n * On-curve points will be drawn in blue, off-curve points will be drawn in red.\n * @param {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n * @param {string} text - The text to create.\n * @param {number} [x=0] - Horizontal position of the beginning of the text.\n * @param {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param {GlyphRenderOptions=} options\n */\nFont.prototype.drawPoints = function(ctx, text, x, y, fontSize, options) {\n    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n        glyph.drawPoints(ctx, gX, gY, gFontSize);\n    });\n};\n\n/**\n * Draw lines indicating important font measurements for all glyphs in the text.\n * Black lines indicate the origin of the coordinate system (point 0,0).\n * Blue lines indicate the glyph bounding box.\n * Green line indicates the advance width of the glyph.\n * @param {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n * @param {string} text - The text to create.\n * @param {number} [x=0] - Horizontal position of the beginning of the text.\n * @param {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param {GlyphRenderOptions=} options\n */\nFont.prototype.drawMetrics = function(ctx, text, x, y, fontSize, options) {\n    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n        glyph.drawMetrics(ctx, gX, gY, gFontSize);\n    });\n};\n\n/**\n * @param  {string}\n * @return {string}\n */\nFont.prototype.getEnglishName = function(name) {\n    const translations = this.names[name];\n    if (translations) {\n        return translations.en;\n    }\n};\n\n/**\n * Validate\n */\nFont.prototype.validate = function() {\n    const warnings = [];\n    const _this = this;\n\n    function assert(predicate, message) {\n        if (!predicate) {\n            warnings.push(message);\n        }\n    }\n\n    function assertNamePresent(name) {\n        const englishName = _this.getEnglishName(name);\n        assert(englishName && englishName.trim().length > 0,\n               'No English ' + name + ' specified.');\n    }\n\n    // Identification information\n    assertNamePresent('fontFamily');\n    assertNamePresent('weightName');\n    assertNamePresent('manufacturer');\n    assertNamePresent('copyright');\n    assertNamePresent('version');\n\n    // Dimension information\n    assert(this.unitsPerEm > 0, 'No unitsPerEm specified.');\n};\n\n/**\n * Convert the font object to a SFNT data structure.\n * This structure contains all the necessary tables and metadata to create a binary OTF file.\n * @return {opentype.Table}\n */\nFont.prototype.toTables = function() {\n    return sfnt.fontToTable(this);\n};\n/**\n * @deprecated Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.\n */\nFont.prototype.toBuffer = function() {\n    console.warn('Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.');\n    return this.toArrayBuffer();\n};\n/**\n * Converts a `opentype.Font` into an `ArrayBuffer`\n * @return {ArrayBuffer}\n */\nFont.prototype.toArrayBuffer = function() {\n    const sfntTable = this.toTables();\n    const bytes = sfntTable.encode();\n    const buffer = new ArrayBuffer(bytes.length);\n    const intArray = new Uint8Array(buffer);\n    for (let i = 0; i < bytes.length; i++) {\n        intArray[i] = bytes[i];\n    }\n\n    return buffer;\n};\n\n/**\n * Initiate a download of the OpenType font.\n */\nFont.prototype.download = function(fileName) {\n    const familyName = this.getEnglishName('fontFamily');\n    const styleName = this.getEnglishName('fontSubfamily');\n    fileName = fileName || familyName.replace(/\\s/g, '') + '-' + styleName + '.otf';\n    const arrayBuffer = this.toArrayBuffer();\n\n    if (isBrowser()) {\n        window.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem;\n        window.requestFileSystem(window.TEMPORARY, arrayBuffer.byteLength, function(fs) {\n            fs.root.getFile(fileName, {create: true}, function(fileEntry) {\n                fileEntry.createWriter(function(writer) {\n                    const dataView = new DataView(arrayBuffer);\n                    const blob = new Blob([dataView], {type: 'font/opentype'});\n                    writer.write(blob);\n\n                    writer.addEventListener('writeend', function() {\n                        // Navigating to the file will download it.\n                        location.href = fileEntry.toURL();\n                    }, false);\n                });\n            });\n        },\n        function(err) {\n            throw new Error(err.name + ': ' + err.message);\n        });\n    } else {\n        const fs = require('fs');\n        const buffer = arrayBufferToNodeBuffer(arrayBuffer);\n        fs.writeFileSync(fileName, buffer);\n    }\n};\n/**\n * @private\n */\nFont.prototype.fsSelectionValues = {\n    ITALIC:              0x001, //1\n    UNDERSCORE:          0x002, //2\n    NEGATIVE:            0x004, //4\n    OUTLINED:            0x008, //8\n    STRIKEOUT:           0x010, //16\n    BOLD:                0x020, //32\n    REGULAR:             0x040, //64\n    USER_TYPO_METRICS:   0x080, //128\n    WWS:                 0x100, //256\n    OBLIQUE:             0x200  //512\n};\n\n/**\n * @private\n */\nFont.prototype.usWidthClasses = {\n    ULTRA_CONDENSED: 1,\n    EXTRA_CONDENSED: 2,\n    CONDENSED: 3,\n    SEMI_CONDENSED: 4,\n    MEDIUM: 5,\n    SEMI_EXPANDED: 6,\n    EXPANDED: 7,\n    EXTRA_EXPANDED: 8,\n    ULTRA_EXPANDED: 9\n};\n\n/**\n * @private\n */\nFont.prototype.usWeightClasses = {\n    THIN: 100,\n    EXTRA_LIGHT: 200,\n    LIGHT: 300,\n    NORMAL: 400,\n    MEDIUM: 500,\n    SEMI_BOLD: 600,\n    BOLD: 700,\n    EXTRA_BOLD: 800,\n    BLACK:    900\n};\n\nexport default Font;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}