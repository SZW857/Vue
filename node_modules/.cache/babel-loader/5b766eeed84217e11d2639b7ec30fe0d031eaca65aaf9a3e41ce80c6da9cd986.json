{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar shared = require('@vue/shared');\nrequire('../../../hooks/index.js');\nrequire('../../../utils/index.js');\nvar index = require('../../../hooks/use-forward-ref/index.js');\nvar error = require('../../../utils/error.js');\nvar index$1 = require('../../../hooks/use-namespace/index.js');\nconst NAME = \"ElOnlyChild\";\nconst OnlyChild = vue.defineComponent({\n  name: NAME,\n  setup(_, {\n    slots,\n    attrs\n  }) {\n    var _a;\n    const forwardRefInjection = vue.inject(index.FORWARD_REF_INJECTION_KEY);\n    const forwardRefDirective = index.useForwardRefDirective((_a = forwardRefInjection == null ? void 0 : forwardRefInjection.setForwardRef) != null ? _a : shared.NOOP);\n    return () => {\n      var _a2;\n      const defaultSlot = (_a2 = slots.default) == null ? void 0 : _a2.call(slots, attrs);\n      if (!defaultSlot) return null;\n      if (defaultSlot.length > 1) {\n        error.debugWarn(NAME, \"requires exact only one valid child.\");\n        return null;\n      }\n      const firstLegitNode = findFirstLegitChild(defaultSlot);\n      if (!firstLegitNode) {\n        error.debugWarn(NAME, \"no valid child node found\");\n        return null;\n      }\n      return vue.withDirectives(vue.cloneVNode(firstLegitNode, attrs), [[forwardRefDirective]]);\n    };\n  }\n});\nfunction findFirstLegitChild(node) {\n  if (!node) return null;\n  const children = node;\n  for (const child of children) {\n    if (shared.isObject(child)) {\n      switch (child.type) {\n        case vue.Comment:\n          continue;\n        case vue.Text:\n        case \"svg\":\n          return wrapTextContent(child);\n        case vue.Fragment:\n          return findFirstLegitChild(child.children);\n        default:\n          return child;\n      }\n    }\n    return wrapTextContent(child);\n  }\n  return null;\n}\nfunction wrapTextContent(s) {\n  const ns = index$1.useNamespace(\"only-child\");\n  return vue.createVNode(\"span\", {\n    \"class\": ns.e(\"content\")\n  }, [s]);\n}\nexports.OnlyChild = OnlyChild;","map":{"version":3,"mappings":";;;;;;;;;;;;AAmBA,MAAMA,IAAI,GAAG,aAAb;AAEaC,eAAS,GAAGC,mBAAe,CAAC;EACvCC,IAAI,EAAEH,IADiC;;IAElCI;IAAMA;EAAOC;IAAS;IACzB,MAAMC,mBAAmB,GAAGC,UAAM,CAACC,+BAAD,CAAlC;IACA,MAAMC,mBAAmB,GAAGC,4BAAsB,CAChDJ,yBAAqBK,WAAiBC,MADU,GAAlDN;IAGA,OAAO,MAAM;MACX;MACA,MAAKO,WAAa;wBAElB,OAAe;MACbC,eAAUd,CAADe,MAAO;QAChBD;QACD;;MAED,MAAME,cAAc,GAAGC,mBAAmB,CAACJ,WAAD,CAA1C;;QACIC,iDAAiB;QACnBA,WAAUd;MACV;MACD;;EAED;;AAIH;aA1BI;;EA6BEiB,4BAAoBC;IAC3B,IAAKA,eAAM;MACLC,aAAWD,CAAjBE;;UACWC;QACT;QACJ;UACA;QACA;UACA;QACQC;UACMD,YAAR;MAAA;IAEI;;EACF;EACA,WAAK;;;EAEL,WAAKE,oBAAL;EACE,sBAA0B;;EAC5B;AACE","names":["NAME","OnlyChild","defineComponent","name","slots","attrs","forwardRefInjection","inject","FORWARD_REF_INJECTION_KEY","forwardRefDirective","useForwardRefDirective","setForwardRef","NOOP","defaultSlot","debugWarn","length","firstLegitNode","findFirstLegitChild","node","children","type","child","isObject","Fragment"],"sources":["../../../../../../packages/components/slot/src/only-child.tsx"],"sourcesContent":["import {\n  Comment,\n  Fragment,\n  Text,\n  cloneVNode,\n  defineComponent,\n  inject,\n  withDirectives,\n} from 'vue'\nimport { NOOP, isObject } from '@vue/shared'\nimport {\n  FORWARD_REF_INJECTION_KEY,\n  useForwardRefDirective,\n  useNamespace,\n} from '@element-plus/hooks'\nimport { debugWarn } from '@element-plus/utils'\n\nimport type { Ref, VNode } from 'vue'\n\nconst NAME = 'ElOnlyChild'\n\nexport const OnlyChild = defineComponent({\n  name: NAME,\n  setup(_, { slots, attrs }) {\n    const forwardRefInjection = inject(FORWARD_REF_INJECTION_KEY)\n    const forwardRefDirective = useForwardRefDirective(\n      forwardRefInjection?.setForwardRef ?? NOOP\n    )\n    return () => {\n      const defaultSlot = slots.default?.(attrs)\n      if (!defaultSlot) return null\n\n      if (defaultSlot.length > 1) {\n        debugWarn(NAME, 'requires exact only one valid child.')\n        return null\n      }\n\n      const firstLegitNode = findFirstLegitChild(defaultSlot)\n      if (!firstLegitNode) {\n        debugWarn(NAME, 'no valid child node found')\n        return null\n      }\n\n      return withDirectives(cloneVNode(firstLegitNode!, attrs), [\n        [forwardRefDirective],\n      ])\n    }\n  },\n})\n\nfunction findFirstLegitChild(node: VNode[] | undefined): VNode | null {\n  if (!node) return null\n  const children = node as VNode[]\n  for (const child of children) {\n    /**\n     * when user uses h(Fragment, [text]) to render plain string,\n     * this switch case just cannot handle, when the value is primitives\n     * we should just return the wrapped string\n     */\n    if (isObject(child)) {\n      switch (child.type) {\n        case Comment:\n          continue\n        case Text:\n        case 'svg':\n          return wrapTextContent(child)\n        case Fragment:\n          return findFirstLegitChild(child.children as VNode[])\n        default:\n          return child\n      }\n    }\n    return wrapTextContent(child)\n  }\n  return null\n}\n\nfunction wrapTextContent(s: string | VNode) {\n  const ns = useNamespace('only-child')\n  return <span class={ns.e('content')}>{s}</span>\n}\n\nexport type OnlyChildExpose = {\n  forwardRef: Ref<HTMLElement>\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}