{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.array.push.js\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nrequire('../../../../hooks/index.js');\nrequire('../../../../utils/index.js');\nvar useCheckboxDisabled = require('./use-checkbox-disabled.js');\nvar useCheckboxEvent = require('./use-checkbox-event.js');\nvar useCheckboxModel = require('./use-checkbox-model.js');\nvar useCheckboxStatus = require('./use-checkbox-status.js');\nvar shared = require('@vue/shared');\nvar index = require('../../../../hooks/use-form-item/index.js');\nconst setStoreValue = (props, {\n  model\n}) => {\n  function addToStore() {\n    if (shared.isArray(model.value) && !model.value.includes(props.label)) {\n      model.value.push(props.label);\n    } else {\n      model.value = props.trueLabel || true;\n    }\n  }\n  props.checked && addToStore();\n};\nconst useCheckbox = (props, slots) => {\n  const {\n    formItem: elFormItem\n  } = index.useFormItem();\n  const {\n    model,\n    isGroup,\n    isLimitExceeded\n  } = useCheckboxModel.useCheckboxModel(props);\n  const {\n    isFocused,\n    isChecked,\n    checkboxButtonSize,\n    checkboxSize,\n    hasOwnLabel\n  } = useCheckboxStatus.useCheckboxStatus(props, slots, {\n    model\n  });\n  const {\n    isDisabled\n  } = useCheckboxDisabled.useCheckboxDisabled({\n    model,\n    isChecked\n  });\n  const {\n    inputId,\n    isLabeledByFormItem\n  } = index.useFormItemInputId(props, {\n    formItemContext: elFormItem,\n    disableIdGeneration: hasOwnLabel,\n    disableIdManagement: isGroup\n  });\n  const {\n    handleChange,\n    onClickRoot\n  } = useCheckboxEvent.useCheckboxEvent(props, {\n    model,\n    isLimitExceeded,\n    hasOwnLabel,\n    isDisabled,\n    isLabeledByFormItem\n  });\n  setStoreValue(props, {\n    model\n  });\n  return {\n    inputId,\n    isLabeledByFormItem,\n    isChecked,\n    isDisabled,\n    isFocused,\n    checkboxButtonSize,\n    checkboxSize,\n    hasOwnLabel,\n    model,\n    handleChange,\n    onClickRoot\n  };\n};\nexports.useCheckbox = useCheckbox;","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAMA,MAAMA,aAAa,GAAG,CAACC,KAAK,EAAE;EAAEC;AAAK,CAAE,KAAK;EAC1C,SAASC,UAAU,GAAG;IACpB,IAAIC,cAAO,CAACF,KAAK,CAACG,KAAK,CAAC,IAAI,CAACH,KAAK,CAACG,KAAK,CAACC,QAAQ,CAACL,KAAK,CAACM,KAAK,CAAC,EAAE;MAC9DL,KAAK,CAACG,KAAK,CAACG,IAAI,CAACP,KAAK,CAACM,KAAK,CAAC;IACnC,CAAK,MAAM;MACLL,KAAK,CAACG,KAAK,GAAGJ,KAAK,CAACQ,SAAS,IAAI,IAAI;IAC3C;EACA;EACER,KAAK,CAACS,OAAO,IAAIP,UAAU,EAAE;AAC/B,CAAC;AACW,MAACQ,WAAW,GAAG,CAACV,KAAK,EAAEW,KAAK,KAAK;EAC3C,MAAM;IAAEC,QAAQ,EAAEC;EAAU,CAAE,GAAGC,iBAAW,EAAE;EAC9C,MAAM;IAAEb,KAAK;IAAEc,OAAO;IAAEC;EAAe,CAAE,GAAGC,iCAAgB,CAACjB,KAAK,CAAC;EACnE,MAAM;IACJkB,SAAS;IACTC,SAAS;IACTC,kBAAkB;IAClBC,YAAY;IACZC;EACJ,CAAG,GAAGC,mCAAiB,CAACvB,KAAK,EAAEW,KAAK,EAAE;IAAEV;EAAK,CAAE,CAAC;EAC9C,MAAM;IAAEuB;EAAU,CAAE,GAAGC,uCAAmB,CAAC;IAAExB,KAAK;IAAEkB;EAAS,CAAE,CAAC;EAChE,MAAM;IAAEO,OAAO;IAAEC;EAAmB,CAAE,GAAGC,wBAAkB,CAAC5B,KAAK,EAAE;IACjE6B,eAAe,EAAEhB,UAAU;IAC3BiB,mBAAmB,EAAER,WAAW;IAChCS,mBAAmB,EAAEhB;EACzB,CAAG,CAAC;EACF,MAAM;IAAEiB,YAAY;IAAEC;EAAW,CAAE,GAAGC,iCAAgB,CAAClC,KAAK,EAAE;IAC5DC,KAAK;IACLe,eAAe;IACfM,WAAW;IACXE,UAAU;IACVG;EACJ,CAAG,CAAC;EACF5B,aAAa,CAACC,KAAK,EAAE;IAAEC;EAAK,CAAE,CAAC;EAC/B,OAAO;IACLyB,OAAO;IACPC,mBAAmB;IACnBR,SAAS;IACTK,UAAU;IACVN,SAAS;IACTE,kBAAkB;IAClBC,YAAY;IACZC,WAAW;IACXrB,KAAK;IACL+B,YAAY;IACZC;EACJ,CAAG;AACH","names":["setStoreValue","props","model","addToStore","isArray","value","includes","label","push","trueLabel","checked","useCheckbox","slots","formItem","elFormItem","useFormItem","isGroup","isLimitExceeded","useCheckboxModel","isFocused","isChecked","checkboxButtonSize","checkboxSize","hasOwnLabel","useCheckboxStatus","isDisabled","useCheckboxDisabled","inputId","isLabeledByFormItem","useFormItemInputId","formItemContext","disableIdGeneration","disableIdManagement","handleChange","onClickRoot","useCheckboxEvent"],"sources":["../../../../../../../packages/components/checkbox/src/composables/use-checkbox.ts"],"sourcesContent":["import { useFormItem, useFormItemInputId } from '@element-plus/hooks'\nimport { isArray } from '@element-plus/utils'\nimport { useCheckboxDisabled } from './use-checkbox-disabled'\nimport { useCheckboxEvent } from './use-checkbox-event'\nimport { useCheckboxModel } from './use-checkbox-model'\nimport { useCheckboxStatus } from './use-checkbox-status'\n\nimport type { ComponentInternalInstance } from 'vue'\nimport type { CheckboxProps } from '../checkbox'\nimport type { CheckboxModel } from './use-checkbox-model'\n\nconst setStoreValue = (\n  props: CheckboxProps,\n  { model }: Pick<CheckboxModel, 'model'>\n) => {\n  function addToStore() {\n    if (isArray(model.value) && !model.value.includes(props.label)) {\n      model.value.push(props.label)\n    } else {\n      model.value = props.trueLabel || true\n    }\n  }\n  props.checked && addToStore()\n}\n\nexport const useCheckbox = (\n  props: CheckboxProps,\n  slots: ComponentInternalInstance['slots']\n) => {\n  const { formItem: elFormItem } = useFormItem()\n  const { model, isGroup, isLimitExceeded } = useCheckboxModel(props)\n  const {\n    isFocused,\n    isChecked,\n    checkboxButtonSize,\n    checkboxSize,\n    hasOwnLabel,\n  } = useCheckboxStatus(props, slots, { model })\n  const { isDisabled } = useCheckboxDisabled({ model, isChecked })\n  const { inputId, isLabeledByFormItem } = useFormItemInputId(props, {\n    formItemContext: elFormItem,\n    disableIdGeneration: hasOwnLabel,\n    disableIdManagement: isGroup,\n  })\n  const { handleChange, onClickRoot } = useCheckboxEvent(props, {\n    model,\n    isLimitExceeded,\n    hasOwnLabel,\n    isDisabled,\n    isLabeledByFormItem,\n  })\n\n  setStoreValue(props, { model })\n\n  return {\n    inputId,\n    isLabeledByFormItem,\n    isChecked,\n    isDisabled,\n    isFocused,\n    checkboxButtonSize,\n    checkboxSize,\n    hasOwnLabel,\n    model,\n    handleChange,\n    onClickRoot,\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}