{"ast":null,"code":"import axios from 'axios';\n\n// 创建一个 axios 实例\nconst service = axios.create({\n  baseURL: 'http://127.0.0.1:8083',\n  // 所有的请求地址前缀部分\n  timeout: 60000,\n  // 请求超时时间毫秒\n  withCredentials: true,\n  // 异步请求携带cookie\n  headers: {\n    // 设置后端需要的传参类型\n    'Content-Type': 'application/json',\n    'token': 'token',\n    'X-Requested-With': 'XMLHttpRequest'\n  }\n});\n\n// 添加请求拦截器\nservice.interceptors.request.use(function (config) {\n  // 在发送请求之前做些什么\n  return config;\n}, function (error) {\n  // 对请求错误做些什么\n  console.log(error);\n  return Promise.reject(error);\n});\n\n// 添加响应拦截器\nservice.interceptors.response.use(function (response) {\n  console.log(response);\n  // dataAxios 是 axios 返回数据中的 data\n  const dataAxios = response.data;\n  // 这个状态码是和后端约定的\n  const code = dataAxios.reset;\n  return dataAxios;\n}, function (error) {\n  // 超出 2xx 范围的状态码都会触发该函数。\n  // 对响应错误做点什么\n  console.log(error);\n  return Promise.reject(error);\n});\nexport default service;","map":{"version":3,"names":["axios","service","create","baseURL","timeout","withCredentials","headers","interceptors","request","use","config","error","console","log","Promise","reject","response","dataAxios","data","code","reset"],"sources":["C:/Users/14486/Desktop/社区公益系统前端/vue_community/src/static/js/svc.js"],"sourcesContent":["import axios from 'axios'\r\n\r\n// 创建一个 axios 实例\r\nconst service = axios.create({\r\n    baseURL: 'http://127.0.0.1:8083', // 所有的请求地址前缀部分\r\n    timeout: 60000, // 请求超时时间毫秒\r\n    withCredentials: true, // 异步请求携带cookie\r\n    headers: {\r\n        // 设置后端需要的传参类型\r\n        'Content-Type': 'application/json',\r\n        'token': 'token',\r\n        'X-Requested-With': 'XMLHttpRequest',\r\n    },\r\n})\r\n\r\n// 添加请求拦截器\r\nservice.interceptors.request.use(\r\n    function (config) {\r\n        // 在发送请求之前做些什么\r\n        return config\r\n    },\r\n    function (error) {\r\n        // 对请求错误做些什么\r\n        console.log(error)\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\n// 添加响应拦截器\r\nservice.interceptors.response.use(\r\n    function (response) {\r\n        console.log(response)\r\n        // dataAxios 是 axios 返回数据中的 data\r\n        const dataAxios = response.data\r\n        // 这个状态码是和后端约定的\r\n        const code = dataAxios.reset\r\n        return dataAxios\r\n    },\r\n    function (error) {\r\n        // 超出 2xx 范围的状态码都会触发该函数。\r\n        // 对响应错误做点什么\r\n        console.log(error)\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\nexport default service\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,OAAO,GAAGD,KAAK,CAACE,MAAM,CAAC;EACzBC,OAAO,EAAE,uBAAuB;EAAE;EAClCC,OAAO,EAAE,KAAK;EAAE;EAChBC,eAAe,EAAE,IAAI;EAAE;EACvBC,OAAO,EAAE;IACL;IACA,cAAc,EAAE,kBAAkB;IAClC,OAAO,EAAE,OAAO;IAChB,kBAAkB,EAAE;EACxB;AACJ,CAAC,CAAC;;AAEF;AACAL,OAAO,CAACM,YAAY,CAACC,OAAO,CAACC,GAAG,CAC5B,UAAUC,MAAM,EAAE;EACd;EACA,OAAOA,MAAM;AACjB,CAAC,EACD,UAAUC,KAAK,EAAE;EACb;EACAC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EAClB,OAAOG,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;AAChC,CAAC,CACJ;;AAED;AACAV,OAAO,CAACM,YAAY,CAACS,QAAQ,CAACP,GAAG,CAC7B,UAAUO,QAAQ,EAAE;EAChBJ,OAAO,CAACC,GAAG,CAACG,QAAQ,CAAC;EACrB;EACA,MAAMC,SAAS,GAAGD,QAAQ,CAACE,IAAI;EAC/B;EACA,MAAMC,IAAI,GAAGF,SAAS,CAACG,KAAK;EAC5B,OAAOH,SAAS;AACpB,CAAC,EACD,UAAUN,KAAK,EAAE;EACb;EACA;EACAC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EAClB,OAAOG,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;AAChC,CAAC,CACJ;AAED,eAAeV,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}