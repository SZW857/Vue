{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar shared = require('@vue/shared');\nrequire('../../../utils/index.js');\nrequire('../../tooltip/index.js');\nrequire('../../../constants/index.js');\nvar runtime = require('../../../utils/vue/props/runtime.js');\nvar content = require('../../tooltip/src/content.js');\nvar event = require('../../../constants/event.js');\nconst autocompleteProps = runtime.buildProps({\n  valueKey: {\n    type: String,\n    default: \"value\"\n  },\n  modelValue: {\n    type: [String, Number],\n    default: \"\"\n  },\n  debounce: {\n    type: Number,\n    default: 300\n  },\n  placement: {\n    type: runtime.definePropType(String),\n    values: [\"top\", \"top-start\", \"top-end\", \"bottom\", \"bottom-start\", \"bottom-end\"],\n    default: \"bottom-start\"\n  },\n  fetchSuggestions: {\n    type: runtime.definePropType([Function, Array]),\n    default: shared.NOOP\n  },\n  popperClass: {\n    type: String,\n    default: \"\"\n  },\n  triggerOnFocus: {\n    type: Boolean,\n    default: true\n  },\n  selectWhenUnmatched: {\n    type: Boolean,\n    default: false\n  },\n  hideLoading: {\n    type: Boolean,\n    default: false\n  },\n  label: {\n    type: String\n  },\n  teleported: content.useTooltipContentProps.teleported,\n  highlightFirstItem: {\n    type: Boolean,\n    default: false\n  },\n  fitInputWidth: {\n    type: Boolean,\n    default: false\n  }\n});\nconst autocompleteEmits = {\n  [event.UPDATE_MODEL_EVENT]: value => shared.isString(value),\n  [event.INPUT_EVENT]: value => shared.isString(value),\n  [event.CHANGE_EVENT]: value => shared.isString(value),\n  focus: evt => evt instanceof FocusEvent,\n  blur: evt => evt instanceof FocusEvent,\n  clear: () => true,\n  select: item => shared.isObject(item)\n};\nexports.autocompleteEmits = autocompleteEmits;\nexports.autocompleteProps = autocompleteProps;","map":{"version":3,"mappings":";;;;;;;;;;;;AAaY,MAACA,iBAAiB,GAAGC,kBAAU,CAAC;EAC1CC,QAAQ,EAAE;IACRC,IAAI,EAAEC,MAAM;IACZC,OAAO,EAAE;EACb,CAAG;EACDC,UAAU,EAAE;IACVH,IAAI,EAAE,CAACC,MAAM,EAAEG,MAAM,CAAC;IACtBF,OAAO,EAAE;EACb,CAAG;EACDG,QAAQ,EAAE;IACRL,IAAI,EAAEI,MAAM;IACZF,OAAO,EAAE;EACb,CAAG;EACDI,SAAS,EAAE;IACTN,IAAI,EAAEO,sBAAc,CAACN,MAAM,CAAC;IAC5BO,MAAM,EAAE,CACN,KAAK,EACL,WAAW,EACX,SAAS,EACT,QAAQ,EACR,cAAc,EACd,YAAY,CACb;IACDN,OAAO,EAAE;EACb,CAAG;EACDO,gBAAgB,EAAE;IAChBT,IAAI,EAAEO,sBAAc,CAAC,CAACG,QAAQ,EAAEC,KAAK,CAAC,CAAC;IACvCT,OAAO,EAAEU;EACb,CAAG;EACDC,WAAW,EAAE;IACXb,IAAI,EAAEC,MAAM;IACZC,OAAO,EAAE;EACb,CAAG;EACDY,cAAc,EAAE;IACdd,IAAI,EAAEe,OAAO;IACbb,OAAO,EAAE;EACb,CAAG;EACDc,mBAAmB,EAAE;IACnBhB,IAAI,EAAEe,OAAO;IACbb,OAAO,EAAE;EACb,CAAG;EACDe,WAAW,EAAE;IACXjB,IAAI,EAAEe,OAAO;IACbb,OAAO,EAAE;EACb,CAAG;EACDgB,KAAK,EAAE;IACLlB,IAAI,EAAEC;EACV,CAAG;EACDkB,UAAU,EAAEC,8BAAsB,CAACD,UAAU;EAC7CE,kBAAkB,EAAE;IAClBrB,IAAI,EAAEe,OAAO;IACbb,OAAO,EAAE;EACb,CAAG;EACDoB,aAAa,EAAE;IACbtB,IAAI,EAAEe,OAAO;IACbb,OAAO,EAAE;EACb;AACA,CAAC;AACW,MAACqB,iBAAiB,GAAG;EAC/B,CAACC,wBAAkB,GAAIC,KAAK,IAAKC,eAAQ,CAACD,KAAK,CAAC;EAChD,CAACE,iBAAW,GAAIF,KAAK,IAAKC,eAAQ,CAACD,KAAK,CAAC;EACzC,CAACG,kBAAY,GAAIH,KAAK,IAAKC,eAAQ,CAACD,KAAK,CAAC;EAC1CI,KAAK,EAAGC,GAAG,IAAKA,GAAG,YAAYC,UAAU;EACzCC,IAAI,EAAGF,GAAG,IAAKA,GAAG,YAAYC,UAAU;EACxCE,KAAK,EAAE,MAAM,IAAI;EACjBC,MAAM,EAAGC,IAAI,IAAKC,eAAQ,CAACD,IAAI;AACjC","names":["autocompleteProps","buildProps","valueKey","type","String","default","modelValue","Number","debounce","placement","definePropType","values","fetchSuggestions","Function","Array","NOOP","popperClass","triggerOnFocus","Boolean","selectWhenUnmatched","hideLoading","label","teleported","useTooltipContentProps","highlightFirstItem","fitInputWidth","autocompleteEmits","UPDATE_MODEL_EVENT","value","isString","INPUT_EVENT","CHANGE_EVENT","focus","evt","FocusEvent","blur","clear","select","item","isObject"],"sources":["../../../../../../packages/components/autocomplete/src/autocomplete.ts"],"sourcesContent":["import { NOOP } from '@vue/shared'\nimport {\n  buildProps,\n  definePropType,\n  isObject,\n  isString,\n} from '@element-plus/utils'\nimport { useTooltipContentProps } from '@element-plus/components/tooltip'\nimport {\n  CHANGE_EVENT,\n  INPUT_EVENT,\n  UPDATE_MODEL_EVENT,\n} from '@element-plus/constants'\n\nimport type { ExtractPropTypes } from 'vue'\nimport type Autocomplete from './autocomplete.vue'\nimport type { Placement } from '@element-plus/components/popper'\nimport type { Awaitable } from '@element-plus/utils'\n\nexport type AutocompleteData = Record<string, any>[]\nexport type AutocompleteFetchSuggestionsCallback = (\n  data: AutocompleteData\n) => void\nexport type AutocompleteFetchSuggestions =\n  | ((\n      queryString: string,\n      cb: AutocompleteFetchSuggestionsCallback\n    ) => Awaitable<AutocompleteData> | void)\n  | AutocompleteData\n\nexport const autocompleteProps = buildProps({\n  valueKey: {\n    type: String,\n    default: 'value',\n  },\n  modelValue: {\n    type: [String, Number],\n    default: '',\n  },\n  debounce: {\n    type: Number,\n    default: 300,\n  },\n  placement: {\n    type: definePropType<Placement>(String),\n    values: [\n      'top',\n      'top-start',\n      'top-end',\n      'bottom',\n      'bottom-start',\n      'bottom-end',\n    ],\n    default: 'bottom-start',\n  },\n  fetchSuggestions: {\n    type: definePropType<AutocompleteFetchSuggestions>([Function, Array]),\n    default: NOOP,\n  },\n  popperClass: {\n    type: String,\n    default: '',\n  },\n  triggerOnFocus: {\n    type: Boolean,\n    default: true,\n  },\n  selectWhenUnmatched: {\n    type: Boolean,\n    default: false,\n  },\n  hideLoading: {\n    type: Boolean,\n    default: false,\n  },\n  label: {\n    type: String,\n  },\n  teleported: useTooltipContentProps.teleported,\n  highlightFirstItem: {\n    type: Boolean,\n    default: false,\n  },\n  fitInputWidth: {\n    type: Boolean,\n    default: false,\n  },\n} as const)\nexport type AutocompleteProps = ExtractPropTypes<typeof autocompleteProps>\n\nexport const autocompleteEmits = {\n  [UPDATE_MODEL_EVENT]: (value: string) => isString(value),\n  [INPUT_EVENT]: (value: string) => isString(value),\n  [CHANGE_EVENT]: (value: string) => isString(value),\n  focus: (evt: FocusEvent) => evt instanceof FocusEvent,\n  blur: (evt: FocusEvent) => evt instanceof FocusEvent,\n  clear: () => true,\n  select: (item: Record<string, any>) => isObject(item),\n}\nexport type AutocompleteEmits = typeof autocompleteEmits\n\nexport type AutocompleteInstance = InstanceType<typeof Autocomplete>\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}