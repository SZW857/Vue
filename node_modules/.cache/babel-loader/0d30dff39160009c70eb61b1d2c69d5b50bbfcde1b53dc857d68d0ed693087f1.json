{"ast":null,"code":"import { ElMessage } from 'element-plus';\nimport SIdentify from '@/components/identify';\nimport { postRequest, getRequest } from '@/api/config.js';\nimport { CaptchaEncryption } from '@/static/js/CaptchaEncryption.js';\nexport default {\n  name: 'ForgotPwdTemplate',\n  components: {\n    SIdentify\n  },\n  data() {\n    var validateVerifycode = (rule, value, callback) => {\n      const newVal = this.identifyCode.toUpperCase();\n      const identifyStr = this.identifyCode.toLowerCase();\n      if (value === '') {\n        return callback(new Error('验证码不能为空'));\n      } else if (value === identifyStr) {\n        callback();\n      } else if (value === newVal) {\n        callback();\n      } else {\n        console.log('validateVerifycode:', value);\n        callback(new Error('验证码不正确!'));\n      }\n    };\n    var telephoneNumber = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请输入手机号'));\n      } else if (this.teleRuleCheck(value)) {\n        callback();\n      } else {\n        callback(\"手机格式不正确\");\n      }\n    };\n    var idCard = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请输入身份证号码'));\n      } else if (this.idCardRuleCheck(value)) {\n        this.IdCard = value;\n        callback();\n      } else {\n        callback(new Error('身份证格式不对'));\n      }\n    };\n    //修改密码校验\n    var validatePass = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请输入密码'));\n        console.log(value);\n      } else {\n        if (this.passwdCheck(value)) {\n          this.$refs.ruleForm.validateField('confirmPass');\n          callback();\n        } else {\n          callback(new Error(\"密码格式不对(数字+密码组合,8~20位)\"));\n        }\n      }\n    };\n    var validatePass2 = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请再次输入密码'));\n      } else if (value !== this.ruleForm.pass) {\n        callback(new Error('两次输入密码不一致!'));\n      } else {\n        callback();\n      }\n    };\n    //反馈的验证码校验\n    var feedbackCode = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请输入反馈的验证码'));\n      } else if (this.codeValue === value) {\n        callback();\n      } else {\n        callback(new Error('验证码不正确'));\n      }\n    };\n    return {\n      active: 1,\n      identifyCodes: 'ABCDEFGHGKMNPQRSTUVWXY',\n      identifyCode: '',\n      ruleForm: {\n        telephoneNumber: '',\n        idCard: '',\n        verifycode: '',\n        pass: '',\n        confirmPass: '',\n        feedbackCode: ''\n      },\n      content: '发送短信',\n      totalTime: 5,\n      canClick: false,\n      codeValue: 1,\n      IdCard: '',\n      sendTele: '',\n      rules: {\n        telephoneNumber: [{\n          required: true,\n          validator: telephoneNumber,\n          trigger: 'blur'\n        }],\n        idCard: [{\n          required: true,\n          validator: idCard,\n          trigger: 'blur'\n        }],\n        pass: [{\n          required: true,\n          validator: validatePass,\n          trigger: 'blur'\n        }],\n        confirmPass: [{\n          required: true,\n          validator: validatePass2,\n          trigger: 'blur'\n        }],\n        verifycode: [{\n          required: true,\n          validator: validateVerifycode,\n          trigger: 'blur'\n        }],\n        feedbackCode: [{\n          required: true,\n          validator: feedbackCode,\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  methods: {\n    submitForm(formName) {\n      this.$refs[formName].validate(valid => {\n        if (valid) {\n          if (this.active++ > 3) this.active = 0;\n        } else {\n          ElMessage({\n            message: '完善信息方可进入下一步',\n            grouping: true,\n            type: 'error'\n          });\n        }\n      });\n    },\n    sendMsg(formName) {\n      // form为表单名字并ref=\"form\"; prop 换成你想监听的prop字段\n      this.$refs[formName].validateField('telephoneNumber', errMsg => {\n        if (!errMsg) {\n          alert('请通过手机格式验证!');\n        } else {\n          var code = Math.random().toFixed(6).slice(-6); // 随机生成六位数验证码\n          this.codeValue = code;\n          alert(this.codeValue);\n          var falseCode = CaptchaEncryption(code);\n          var telephoneNum = this.ruleForm.telephoneNumber;\n          var readyData = JSON.stringify({\n            tele: telephoneNum,\n            code: falseCode\n          });\n          postRequest(telephoneNum, falseCode);\n          if (this.canClick) return;\n          this.canClick = true;\n          this.content = this.totalTime + 's后重新发送';\n          let clock = window.setInterval(() => {\n            this.totalTime--;\n            this.content = this.totalTime + 's后重新发送';\n            if (this.totalTime < 0) {\n              window.clearInterval(clock);\n              this.content = '重新发送短信';\n              this.totalTime = 10;\n              this.canClick = false;\n            }\n          }, 1000);\n        }\n      });\n    },\n    encryptByDES(message, key) {\n      var keyHex = CryptoJS.enc.Utf8.parse(key);\n      var encrypted = CryptoJS.DES.encrypt(message, keyHex, {\n        mode: CryptoJS.mode.ECB,\n        padding: CryptoJS.pad.Pkcs7\n      });\n      return encrypted.ciphertext.toString();\n    },\n    resetForm(formName) {\n      this.$refs[formName].resetFields();\n    },\n    prev() {\n      --this.active;\n      if (this.active < 0) this.active = 0;\n    },\n    sub(formName) {\n      this.$refs[formName].validate(valid => {\n        if (valid) {\n          this.active++;\n          if (this.active = 4) {\n            ElMessage({\n              message: '恭喜你！已重获密码',\n              type: 'success'\n            });\n            this.$router.replace('/finish');\n          }\n        } else {\n          alert('请输入正确的密码');\n        }\n      });\n    },\n    //规则如下：先得到每位数，然后每位数都加上5，再对10求余，最后将所有数字反转，得到一串新数。\n    CaptchaEncryption() {\n      var num = 123456; // 输入的数字\n      // 1、把整数里面的每一位放到数组里\n      var str = num.toString(); // 转化为字符串\n      var intArray = new int[str.length()](); // 新建一个数组用来保存num每一位的数字\n      for (var i = 0; i < str.length(); i++) {\n        // 遍历str将每一位数字添加如intArray\n        var ch = str.charAt(i);\n        intArray[i] = Integer.parseInt(ch.toString());\n      }\n      // 2、加密\n      // 每位数都加上5\n      for (var i = 0; i < intArray.length; i++) {\n        intArray[i] = intArray[i] + 5;\n      }\n      // 再对10求余\n      for (var i = 0; i < intArray.length; i++) {\n        intArray[i] = intArray[i] % 10;\n      }\n      // 将所有数字反转\n      for (var i = 0, j = intArray.length - 1; i < j; i++, j--) {\n        var temp = intArray[i];\n        intArray[i] = intArray[j];\n        intArray[j] = temp;\n      }\n      // 3.把数组里面的每个数字进行拼接，变成加密之后的结果\n      var number = 0;\n      for (var i = 0; i < intArray.length; i++) {\n        number = number * 10 + intArray[i];\n      }\n      alert(number);\n    },\n    //手机号格式校验\n    teleRuleCheck(stringber) {\n      var pattern = /^1[34578]\\d{9}$/;\n      if (pattern.test(stringber)) {\n        return true;\n      } else {\n        console.log('check mobile phone ' + stringber + ' failed.');\n        return false;\n      }\n    },\n    //身份证规则校验\n    idCardRuleCheck(string) {\n      var reg = /(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)/;\n      if (reg.test(string) === false) {\n        return false;\n      } else {\n        return true;\n      }\n    },\n    //校验密码强度\n    passwdCheck(num) {\n      let reg = /^(?![\\d]+$)(?![a-zA-Z]+$)(?![^\\da-zA-Z]+$).{8,20}$/;\n      if (reg.test(num) === false) {\n        return false;\n      } else {\n        return true;\n      }\n    },\n    // 生成随机数\n    randomNum(min, max) {\n      return Math.floor(Math.random() * (max - min) + min);\n    },\n    // 切换验证码\n    refreshCode() {\n      this.identifyCode = '';\n      this.makeCode(this.identifyCodes, 4);\n    },\n    // 生成四位随机验证码\n    makeCode(o, l) {\n      for (let i = 0; i < l; i++) {\n        this.identifyCode += this.identifyCodes[this.randomNum(0, this.identifyCodes.length)];\n      }\n    }\n  },\n  mounted() {\n    // 验证码初始化\n    this.identifyCode = '';\n    this.makeCode(this.identifyCodes, 4);\n  }\n};","map":{"version":3,"mappings":"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","names":["ElMessage","SIdentify","postRequest","getRequest","CaptchaEncryption","name","components","data","validateVerifycode","rule","value","callback","newVal","identifyCode","toUpperCase","identifyStr","toLowerCase","Error","console","log","telephoneNumber","teleRuleCheck","idCard","idCardRuleCheck","IdCard","validatePass","passwdCheck","$refs","ruleForm","validateField","validatePass2","pass","feedbackCode","codeValue","active","identifyCodes","verifycode","confirmPass","content","totalTime","canClick","sendTele","rules","required","validator","trigger","methods","submitForm","formName","validate","valid","message","grouping","type","sendMsg","errMsg","alert","code","Math","random","toFixed","slice","falseCode","telephoneNum","readyData","JSON","stringify","tele","clock","window","setInterval","clearInterval","encryptByDES","key","keyHex","CryptoJS","enc","Utf8","parse","encrypted","DES","encrypt","mode","ECB","padding","pad","Pkcs7","ciphertext","toString","resetForm","resetFields","prev","sub","$router","replace","num","str","intArray","int","length","i","ch","charAt","Integer","parseInt","j","temp","number","stringber","pattern","test","string","reg","randomNum","min","max","floor","refreshCode","makeCode","o","l","mounted"],"sourceRoot":"","sources":["C:\\Users\\14486\\Desktop\\社区公益系统前端\\vue_community\\src\\components\\ForgetPwd\\ForgotPwdTemplate.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <div class=\"StepBar\">\r\n      <el-steps :space=\"400\" :active=\"active\" finish-status=\"success\" align-center>\r\n        <el-step title=\"填写账号\" />\r\n        <el-step title=\"身份验证\" />\r\n        <el-step title=\"新密码\" />\r\n        <el-step title=\"完成\" />\r\n      </el-steps>\r\n    </div>\r\n    <div style=\"height: 500px;background-color: #ffffff;margin-top: 40px\" v-if=\"active===1\">\r\n      <h1>身份证号校验:</h1>\r\n      <div>\r\n        <el-form\r\n            :model=\"ruleForm\"\r\n            status-icon\r\n            :rules=\"rules\"\r\n            ref=\"ruleForm\"\r\n            label-width=\"100px\"\r\n            label-position=\"top\"\r\n            class=\"demo-ruleForm\"\r\n            style=\"width: 500px;margin-left: 400px\"\r\n        ><el-form-item label=\"身份证号:\" prop=\"idCard\">\r\n          <el-input\r\n              :maxlength=\"18\"\r\n              type=\"text\"\r\n              v-model=\"ruleForm.idCard\"\r\n              autocomplete=\"off\"\r\n              prefix-icon=\"Memo\"\r\n              class=\"el-input\"\r\n          ></el-input>\r\n        </el-form-item>\r\n          <el-form-item label=\"验证码\" prop=\"verifycode\">\r\n            <el-input\r\n                v-model=\"ruleForm.verifycode\"\r\n                placeholder=\"请输入验证码\"\r\n                type=\"text\"\r\n                style=\"width: 250px\"\r\n            ></el-input>\r\n            <s-identify :identifyCode=\"identifyCode\" style=\"width: 120px;height: 40px;position: absolute;margin-left:250px\"/>\r\n          </el-form-item>\r\n          <el-form-item>\r\n            <el-button style=\"margin-left: 200px;position: absolute\" @click=\"refreshCode\" link>看不清？点击刷新</el-button>\r\n            <el-button @click=\"prev\" v-if=\"active==2||active==3\">上一步</el-button>\r\n            <el-button type=\"primary\" @click=\"submitForm('ruleForm')\"  v-if=\"active==1||active==2||active==3\" >下一步</el-button>\r\n            <el-button @click=\"resetForm('ruleForm')\">重置</el-button>\r\n          </el-form-item>\r\n        </el-form>\r\n      </div>\r\n    </div>\r\n    <div style=\"height: 600px;background-color: #c5b165;margin-top: 40px\" v-if=\"active===2\">\r\n      <h1>请确认您的身份证号:{{IdCard}}</h1>\r\n      <div>\r\n        <el-form\r\n            :model=\"ruleForm\"\r\n            status-icon\r\n            :rules=\"rules\"\r\n            ref=\"ruleForm\"\r\n            label-width=\"100px\"\r\n            label-position=\"top\"\r\n            class=\"demo-ruleForm\"\r\n            style=\"width: 500px;margin-left: 300px\"\r\n        >\r\n          <el-form-item label=\"请输入绑定的手机号:\" prop=\"telephoneNumber\">\r\n            <el-input\r\n                :maxlength=\"11\"\r\n                type=\"number\"\r\n                v-model=\"ruleForm.telephoneNumber\"\r\n                autocomplete=\"off\"\r\n                prefix-icon=\"Memo\"\r\n            ></el-input>\r\n            <!-- 倒计时按钮 -->\r\n            <el-button @click=\"sendMsg('ruleForm')\" type=\"primary\" :disabled=\"canClick\"  style=\"position: absolute;margin-left: 520px;\" >{{content}}</el-button>\r\n          </el-form-item>\r\n          <el-form-item label=\"请输入反馈验证码:\" prop=\"feedbackCode\">\r\n            <el-input\r\n                :maxlength=\"6\"\r\n                type=\"number\"\r\n                v-model=\"ruleForm.feedbackCode\"\r\n                autocomplete=\"off\"\r\n                prefix-icon=\"Memo\"\r\n\r\n            ></el-input>\r\n          </el-form-item>\r\n          <el-form-item>\r\n            <el-button @click=\"prev\" v-if=\"active==2||active==3\">上一步</el-button>\r\n            <el-button type=\"primary\" @click=\"submitForm('ruleForm')\"  v-if=\"active==1||active==2||active==3\" >下一步</el-button>\r\n            <el-button @click=\"resetForm('ruleForm')\">重置</el-button>\r\n          </el-form-item>\r\n        </el-form>\r\n      </div>\r\n    </div>\r\n    <div style=\"height: 600px;background-color: #ffffff;margin-top: 40px\" v-if=\"active===3\">\r\n      <h1>请输入你新的密码:</h1>\r\n      <div>\r\n        <el-form\r\n            :model=\"ruleForm\"\r\n            status-icon\r\n            :rules=\"rules\"\r\n            label-width=\"100px\"\r\n            ref=\"ruleForm\"\r\n            class=\"demo-ruleForm\"\r\n            style=\"width: 500px;margin-left: 300px\"\r\n        >\r\n          <el-form-item label=\"密码\" prop=\"pass\">\r\n            <el-input\r\n                type=\"password\"\r\n                v-model=\"ruleForm.pass\"\r\n                autocomplete=\"off\"\r\n                class=\"el-input\"\r\n                :minlength=\"8\"\r\n                :maxlength=\"20\"\r\n            ></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"确认密码\" prop=\"confirmPass\">\r\n            <el-input\r\n                type=\"password\"\r\n                v-model=\"ruleForm.confirmPass\"\r\n                autocomplete=\"off\"\r\n            ></el-input>\r\n          </el-form-item>\r\n          <el-form-item>\r\n            <el-button @click=\"prev\" v-if=\"active==2||active==3\">上一步</el-button>\r\n            <el-button type=\"primary\" @click=\"submitForm('ruleForm')\"  v-if=\"active==1||active==2\" >下一步</el-button>\r\n            <el-button @click=\"sub('ruleForm')\" v-if=\"active==3\" type=\"primary\">提交</el-button>\r\n            <el-button @click=\"resetForm('ruleForm')\">重置</el-button>\r\n          </el-form-item>\r\n        </el-form>\r\n      </div>\r\n    </div>\r\n    <router-view></router-view>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\n\r\nimport { ElMessage } from 'element-plus'\r\nimport SIdentify from '@/components/identify'\r\nimport { postRequest,getRequest } from '@/api/config.js'\r\nimport {CaptchaEncryption} from '@/static/js/CaptchaEncryption.js'\r\nexport default {\r\n\r\n  name:'ForgotPwdTemplate',\r\n  components: {SIdentify},\r\n  data() {\r\n    var validateVerifycode = (rule, value, callback) => {\r\n      const newVal = this.identifyCode.toUpperCase()\r\n      const identifyStr = this.identifyCode.toLowerCase()\r\n      if (value === '')  {\r\n        return callback(new Error('验证码不能为空'))\r\n      }else if (value === identifyStr) {\r\n        callback()\r\n      }else if (value === newVal){\r\n        callback()\r\n      }else {\r\n        console.log('validateVerifycode:', value)\r\n        callback(new Error('验证码不正确!'))\r\n      }\r\n    }\r\n    var telephoneNumber = (rule, value, callback) => {\r\n      if (value === '') {\r\n        callback(new Error('请输入手机号'))\r\n      }else if (this.teleRuleCheck(value)){\r\n        callback()\r\n      } else {\r\n        callback(\"手机格式不正确\");\r\n      }\r\n    }\r\n    var idCard = (rule, value, callback) => {\r\n      if (value === '') {\r\n        callback(new Error('请输入身份证号码'))\r\n      } else if (this.idCardRuleCheck(value)) {\r\n        this.IdCard=value\r\n        callback()\r\n      } else {\r\n        callback(new Error('身份证格式不对'))\r\n      }\r\n    }\r\n    //修改密码校验\r\n    var validatePass = (rule, value, callback) => {\r\n      if (value === '') {\r\n        callback(new Error('请输入密码'))\r\n        console.log(value)\r\n      }else{\r\n         if (this.passwdCheck(value)) {\r\n          this.$refs.ruleForm.validateField('confirmPass')\r\n           callback()\r\n        }else {\r\n           callback(new Error(\"密码格式不对(数字+密码组合,8~20位)\"))\r\n         }\r\n      }\r\n\r\n\r\n\r\n    }\r\n    var validatePass2 = (rule, value, callback) => {\r\n      if (value === '') {\r\n        callback(new Error('请再次输入密码'))\r\n      } else if (value !== this.ruleForm.pass) {\r\n        callback(new Error('两次输入密码不一致!'))\r\n      } else {\r\n        callback()\r\n      }\r\n    }\r\n    //反馈的验证码校验\r\n    var feedbackCode = (rule, value, callback) => {\r\n      if (value === '') {\r\n        callback(new Error('请输入反馈的验证码'))\r\n      } else if (this.codeValue===(value)) {\r\n        callback()\r\n      } else {\r\n        callback(new Error('验证码不正确'))\r\n      }\r\n    }\r\n\r\n    return {\r\n      active:1,\r\n      identifyCodes: 'ABCDEFGHGKMNPQRSTUVWXY',\r\n      identifyCode: '',\r\n      ruleForm: {\r\n        telephoneNumber: '',\r\n        idCard: '',\r\n        verifycode: '',\r\n        pass:'',\r\n        confirmPass: '',\r\n        feedbackCode:''\r\n      },\r\n      content: '发送短信',\r\n      totalTime: 5,\r\n      canClick: false,\r\n      codeValue: 1,\r\n      IdCard:'',\r\n      sendTele:'',\r\n\r\n      rules: {\r\n        telephoneNumber: [{ required:true,validator: telephoneNumber, trigger: 'blur' }],\r\n        idCard: [{ required:true,validator: idCard, trigger: 'blur' }],\r\n        pass: [{ required:true,validator: validatePass, trigger: 'blur' }],\r\n        confirmPass: [{ required:true,validator: validatePass2, trigger: 'blur' }],\r\n        verifycode: [{required: true, validator: validateVerifycode,trigger: 'blur' }],\r\n        feedbackCode:[{required:true,validator:feedbackCode,trigger:'blur'}]\r\n      },\r\n    }\r\n\r\n\r\n  },\r\n  methods: {\r\n    submitForm(formName) {\r\n      this.$refs[formName].validate((valid) => {\r\n        if (valid) {\r\n          if(this.active++>3) this.active=0\r\n        } else {\r\n          ElMessage({\r\n            message: '完善信息方可进入下一步',\r\n            grouping:true,\r\n            type: 'error',\r\n          })\r\n        }\r\n      })\r\n    },\r\n\r\n    sendMsg(formName) {\r\n      // form为表单名字并ref=\"form\"; prop 换成你想监听的prop字段\r\n      this.$refs[formName].validateField('telephoneNumber', (errMsg) => {\r\n        if (!errMsg) {\r\n          alert('请通过手机格式验证!')\r\n        }else{\r\n          var code=Math.random().toFixed(6).slice(-6) // 随机生成六位数验证码\r\n          this.codeValue=code\r\n          alert(this.codeValue)\r\n          var falseCode=CaptchaEncryption(code)\r\n          var telephoneNum=this.ruleForm.telephoneNumber\r\n          var readyData=JSON.stringify({\r\n            tele:telephoneNum,\r\n            code:falseCode\r\n          });\r\n           postRequest(telephoneNum,falseCode)\r\n\r\n          if (this.canClick) return\r\n          this.canClick = true\r\n          this.content = this.totalTime + 's后重新发送'\r\n          let clock = window.setInterval(() => {\r\n            this.totalTime--\r\n            this.content = this.totalTime + 's后重新发送'\r\n            if (this.totalTime < 0) {\r\n              window.clearInterval(clock)\r\n              this.content = '重新发送短信'\r\n              this.totalTime = 10\r\n              this.canClick = false\r\n            }\r\n          }, 1000)\r\n        }\r\n      })\r\n    },\r\n\r\n\r\n    encryptByDES(message, key){\r\n      var keyHex = CryptoJS.enc.Utf8.parse(key);\r\n      var encrypted = CryptoJS.DES.encrypt(message, keyHex, {\r\n        mode: CryptoJS.mode.ECB,\r\n        padding: CryptoJS.pad.Pkcs7\r\n      });\r\n      return encrypted.ciphertext.toString();\r\n    }\r\n    ,\r\n    resetForm(formName) {\r\n      this.$refs[formName].resetFields()\r\n    },\r\n    prev(){\r\n      --this.active;\r\n      if (this.active<0) this.active=0\r\n    },\r\n    sub(formName){\r\n      this.$refs[formName].validate((valid) => {\r\n        if (valid) {\r\n          this.active++;\r\n          if (this.active=4){\r\n            ElMessage({\r\n              message: '恭喜你！已重获密码',\r\n              type: 'success',\r\n            })\r\n            this.$router.replace('/finish')\r\n          }\r\n        } else {\r\n          alert('请输入正确的密码')\r\n\r\n        }\r\n      })\r\n    },\r\n    //规则如下：先得到每位数，然后每位数都加上5，再对10求余，最后将所有数字反转，得到一串新数。\r\n    CaptchaEncryption(){\r\n\r\n      var num = 123456;// 输入的数字\r\n      // 1、把整数里面的每一位放到数组里\r\n      var str = num.toString();// 转化为字符串\r\n      var intArray = new int[str.length()];// 新建一个数组用来保存num每一位的数字\r\n      for (var i = 0; i < str.length(); i++) {\r\n        // 遍历str将每一位数字添加如intArray\r\n        var ch = str.charAt(i);\r\n        intArray[i] = Integer.parseInt(ch.toString());\r\n      }\r\n      // 2、加密\r\n      // 每位数都加上5\r\n      for (var i = 0; i < intArray.length; i++) {\r\n        intArray[i] = intArray[i] + 5;\r\n      }\r\n      // 再对10求余\r\n      for (var i = 0; i < intArray.length; i++) {\r\n        intArray[i] = intArray[i] % 10;\r\n      }\r\n      // 将所有数字反转\r\n      for (var i = 0, j = intArray.length - 1; i < j; i++, j--) {\r\n        var temp = intArray[i];\r\n        intArray[i] = intArray[j];\r\n        intArray[j] = temp;\r\n      }\r\n      // 3.把数组里面的每个数字进行拼接，变成加密之后的结果\r\n      var number = 0;\r\n      for (var i = 0; i < intArray.length; i++) {\r\n        number = number * 10 + intArray[i];\r\n      }\r\n      alert(number)\r\n    }\r\n    ,\r\n    //手机号格式校验\r\n    teleRuleCheck(stringber) {\r\n      var pattern = /^1[34578]\\d{9}$/;\r\n      if (pattern.test(stringber)) {\r\n        return true;\r\n      }else {\r\n        console.log('check mobile phone ' + stringber + ' failed.');\r\n        return false;\r\n      }\r\n\r\n    },\r\n    //身份证规则校验\r\n    idCardRuleCheck(string) {\r\n      var reg = /(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)/;\r\n      if(reg.test(string) === false) {\r\n        return  false;\r\n      }else {\r\n        return true;\r\n      }\r\n    },\r\n    //校验密码强度\r\n    passwdCheck(num){\r\n      let reg = /^(?![\\d]+$)(?![a-zA-Z]+$)(?![^\\da-zA-Z]+$).{8,20}$/;\r\n      if (reg.test(num) === false){\r\n        return false;\r\n      }else {\r\n        return true;\r\n      }\r\n    },\r\n    // 生成随机数\r\n    randomNum(min, max) {\r\n      return Math.floor(Math.random() * (max - min) + min)\r\n    },\r\n    // 切换验证码\r\n    refreshCode() {\r\n      this.identifyCode = ''\r\n      this.makeCode(this.identifyCodes, 4)\r\n    },\r\n    // 生成四位随机验证码\r\n    makeCode(o, l) {\r\n      for (let i = 0; i < l; i++) {\r\n        this.identifyCode += this.identifyCodes[\r\n            this.randomNum(0, this.identifyCodes.length)\r\n            ]\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    // 验证码初始化\r\n    this.identifyCode = ''\r\n    this.makeCode(this.identifyCodes, 4)\r\n  },\r\n\r\n}\r\n</script>\r\n\r\n\r\n\r\n\r\n<style scoped>\r\n::v-deep input::-webkit-outer-spin-button,\r\n::v-deep input::-webkit-inner-spin-button {\r\n  -webkit-appearance: none !important;\r\n}\r\n::v-deep input[type=‘number’] {\r\n  -moz-appearance: textfield !important;\r\n}\r\n\r\n\r\n\r\n.codeGeting{\r\n  background: #cdcdcd;\r\n  border-color: #cdcdcd;\r\n}\r\n.el-input{\r\n  height: 43px;\r\n}\r\n.container{\r\n  width: 1200px;\r\n  margin-left: 150px;\r\n  background-color: #ffffff;\r\n}\r\n.StepBar{\r\n  background-color: #f1f1f1;\r\n  height: 60px;\r\n}\r\n.content{\r\n  height: 700px;\r\n  background-color: #1c95a9;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}