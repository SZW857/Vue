{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar shared = require('@vue/shared');\nrequire('../../../utils/index.js');\nvar index$4 = require('../../icon/index.js');\nvar iconsVue = require('@element-plus/icons-vue');\nrequire('../../../constants/index.js');\nrequire('../../../hooks/index.js');\nvar _switch = require('./switch.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar index = require('../../../hooks/use-form-item/index.js');\nvar index$1 = require('../../../hooks/use-common-props/index.js');\nvar index$2 = require('../../../hooks/use-namespace/index.js');\nvar index$3 = require('../../../hooks/use-deprecated/index.js');\nvar style = require('../../../utils/dom/style.js');\nvar event = require('../../../constants/event.js');\nvar error = require('../../../utils/error.js');\nvar core = require('@vueuse/core');\nconst _hoisted_1 = [\"onClick\"];\nconst _hoisted_2 = [\"id\", \"aria-checked\", \"aria-disabled\", \"name\", \"true-value\", \"false-value\", \"disabled\", \"tabindex\", \"onKeydown\"];\nconst _hoisted_3 = [\"aria-hidden\"];\nconst _hoisted_4 = [\"aria-hidden\"];\nconst _hoisted_5 = [\"aria-hidden\"];\nconst COMPONENT_NAME = \"ElSwitch\";\nconst __default__ = vue.defineComponent({\n  name: COMPONENT_NAME\n});\nconst _sfc_main = /* @__PURE__ */vue.defineComponent({\n  ...__default__,\n  props: _switch.switchProps,\n  emits: _switch.switchEmits,\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const vm = vue.getCurrentInstance();\n    const {\n      formItem\n    } = index.useFormItem();\n    const switchSize = index$1.useSize();\n    const ns = index$2.useNamespace(\"switch\");\n    index$3.useDeprecated({\n      from: '\"value\"',\n      replacement: '\"model-value\" or \"v-model\"',\n      scope: COMPONENT_NAME,\n      version: \"2.3.0\",\n      ref: \"https://element-plus.org/en-US/component/switch.html#attributes\",\n      type: \"Attribute\"\n    }, vue.computed(() => {\n      var _a;\n      return !!((_a = vm.vnode.props) == null ? void 0 : _a.value);\n    }));\n    const {\n      inputId\n    } = index.useFormItemInputId(props, {\n      formItemContext: formItem\n    });\n    const switchDisabled = index$1.useDisabled(vue.computed(() => props.loading));\n    const isControlled = vue.ref(props.modelValue !== false);\n    const input = vue.ref();\n    const core$1 = vue.ref();\n    const switchKls = vue.computed(() => [ns.b(), ns.m(switchSize.value), ns.is(\"disabled\", switchDisabled.value), ns.is(\"checked\", checked.value)]);\n    const coreStyle = vue.computed(() => ({\n      width: style.addUnit(props.width)\n    }));\n    vue.watch(() => props.modelValue, () => {\n      isControlled.value = true;\n    });\n    vue.watch(() => props.value, () => {\n      isControlled.value = false;\n    });\n    const actualValue = vue.computed(() => {\n      return isControlled.value ? props.modelValue : props.value;\n    });\n    const checked = vue.computed(() => actualValue.value === props.activeValue);\n    if (![props.activeValue, props.inactiveValue].includes(actualValue.value)) {\n      emit(event.UPDATE_MODEL_EVENT, props.inactiveValue);\n      emit(event.CHANGE_EVENT, props.inactiveValue);\n      emit(event.INPUT_EVENT, props.inactiveValue);\n    }\n    vue.watch(checked, val => {\n      var _a;\n      input.value.checked = val;\n      if (props.validateEvent) {\n        (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, \"change\").catch(err => error.debugWarn(err));\n      }\n    });\n    const handleChange = () => {\n      const val = checked.value ? props.inactiveValue : props.activeValue;\n      emit(event.UPDATE_MODEL_EVENT, val);\n      emit(event.CHANGE_EVENT, val);\n      emit(event.INPUT_EVENT, val);\n      vue.nextTick(() => {\n        input.value.checked = checked.value;\n      });\n    };\n    const switchValue = () => {\n      if (switchDisabled.value) return;\n      const {\n        beforeChange\n      } = props;\n      if (!beforeChange) {\n        handleChange();\n        return;\n      }\n      const shouldChange = beforeChange();\n      const isPromiseOrBool = [shared.isPromise(shouldChange), core.isBoolean(shouldChange)].includes(true);\n      if (!isPromiseOrBool) {\n        error.throwError(COMPONENT_NAME, \"beforeChange must return type `Promise<boolean>` or `boolean`\");\n      }\n      if (shared.isPromise(shouldChange)) {\n        shouldChange.then(result => {\n          if (result) {\n            handleChange();\n          }\n        }).catch(e => {\n          error.debugWarn(COMPONENT_NAME, `some error occurred: ${e}`);\n        });\n      } else if (shouldChange) {\n        handleChange();\n      }\n    };\n    const styles = vue.computed(() => {\n      return ns.cssVarBlock({\n        ...(props.activeColor ? {\n          \"on-color\": props.activeColor\n        } : null),\n        ...(props.inactiveColor ? {\n          \"off-color\": props.inactiveColor\n        } : null),\n        ...(props.borderColor ? {\n          \"border-color\": props.borderColor\n        } : null)\n      });\n    });\n    const focus = () => {\n      var _a, _b;\n      (_b = (_a = input.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a);\n    };\n    vue.onMounted(() => {\n      input.value.checked = checked.value;\n    });\n    expose({\n      focus,\n      checked\n    });\n    return (_ctx, _cache) => {\n      return vue.openBlock(), vue.createElementBlock(\"div\", {\n        class: vue.normalizeClass(vue.unref(switchKls)),\n        style: vue.normalizeStyle(vue.unref(styles)),\n        onClick: vue.withModifiers(switchValue, [\"prevent\"])\n      }, [vue.createElementVNode(\"input\", {\n        id: vue.unref(inputId),\n        ref_key: \"input\",\n        ref: input,\n        class: vue.normalizeClass(vue.unref(ns).e(\"input\")),\n        type: \"checkbox\",\n        role: \"switch\",\n        \"aria-checked\": vue.unref(checked),\n        \"aria-disabled\": vue.unref(switchDisabled),\n        name: _ctx.name,\n        \"true-value\": _ctx.activeValue,\n        \"false-value\": _ctx.inactiveValue,\n        disabled: vue.unref(switchDisabled),\n        tabindex: _ctx.tabindex,\n        onChange: handleChange,\n        onKeydown: vue.withKeys(switchValue, [\"enter\"])\n      }, null, 42, _hoisted_2), !_ctx.inlinePrompt && (_ctx.inactiveIcon || _ctx.inactiveText) ? (vue.openBlock(), vue.createElementBlock(\"span\", {\n        key: 0,\n        class: vue.normalizeClass([vue.unref(ns).e(\"label\"), vue.unref(ns).em(\"label\", \"left\"), vue.unref(ns).is(\"active\", !vue.unref(checked))])\n      }, [_ctx.inactiveIcon ? (vue.openBlock(), vue.createBlock(vue.unref(index$4.ElIcon), {\n        key: 0\n      }, {\n        default: vue.withCtx(() => [(vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.inactiveIcon)))]),\n        _: 1\n      })) : vue.createCommentVNode(\"v-if\", true), !_ctx.inactiveIcon && _ctx.inactiveText ? (vue.openBlock(), vue.createElementBlock(\"span\", {\n        key: 1,\n        \"aria-hidden\": vue.unref(checked)\n      }, vue.toDisplayString(_ctx.inactiveText), 9, _hoisted_3)) : vue.createCommentVNode(\"v-if\", true)], 2)) : vue.createCommentVNode(\"v-if\", true), vue.createElementVNode(\"span\", {\n        ref_key: \"core\",\n        ref: core$1,\n        class: vue.normalizeClass(vue.unref(ns).e(\"core\")),\n        style: vue.normalizeStyle(vue.unref(coreStyle))\n      }, [_ctx.inlinePrompt ? (vue.openBlock(), vue.createElementBlock(\"div\", {\n        key: 0,\n        class: vue.normalizeClass(vue.unref(ns).e(\"inner\"))\n      }, [_ctx.activeIcon || _ctx.inactiveIcon ? (vue.openBlock(), vue.createBlock(vue.unref(index$4.ElIcon), {\n        key: 0,\n        class: vue.normalizeClass(vue.unref(ns).is(\"icon\"))\n      }, {\n        default: vue.withCtx(() => [(vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(vue.unref(checked) ? _ctx.activeIcon : _ctx.inactiveIcon)))]),\n        _: 1\n      }, 8, [\"class\"])) : _ctx.activeText || _ctx.inactiveText ? (vue.openBlock(), vue.createElementBlock(\"span\", {\n        key: 1,\n        class: vue.normalizeClass(vue.unref(ns).is(\"text\")),\n        \"aria-hidden\": !vue.unref(checked)\n      }, vue.toDisplayString(vue.unref(checked) ? _ctx.activeText : _ctx.inactiveText), 11, _hoisted_4)) : vue.createCommentVNode(\"v-if\", true)], 2)) : vue.createCommentVNode(\"v-if\", true), vue.createElementVNode(\"div\", {\n        class: vue.normalizeClass(vue.unref(ns).e(\"action\"))\n      }, [_ctx.loading ? (vue.openBlock(), vue.createBlock(vue.unref(index$4.ElIcon), {\n        key: 0,\n        class: vue.normalizeClass(vue.unref(ns).is(\"loading\"))\n      }, {\n        default: vue.withCtx(() => [vue.createVNode(vue.unref(iconsVue.Loading))]),\n        _: 1\n      }, 8, [\"class\"])) : vue.createCommentVNode(\"v-if\", true)], 2)], 6), !_ctx.inlinePrompt && (_ctx.activeIcon || _ctx.activeText) ? (vue.openBlock(), vue.createElementBlock(\"span\", {\n        key: 1,\n        class: vue.normalizeClass([vue.unref(ns).e(\"label\"), vue.unref(ns).em(\"label\", \"right\"), vue.unref(ns).is(\"active\", vue.unref(checked))])\n      }, [_ctx.activeIcon ? (vue.openBlock(), vue.createBlock(vue.unref(index$4.ElIcon), {\n        key: 0\n      }, {\n        default: vue.withCtx(() => [(vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.activeIcon)))]),\n        _: 1\n      })) : vue.createCommentVNode(\"v-if\", true), !_ctx.activeIcon && _ctx.activeText ? (vue.openBlock(), vue.createElementBlock(\"span\", {\n        key: 1,\n        \"aria-hidden\": !vue.unref(checked)\n      }, vue.toDisplayString(_ctx.activeText), 9, _hoisted_5)) : vue.createCommentVNode(\"v-if\", true)], 2)) : vue.createCommentVNode(\"v-if\", true)], 14, _hoisted_1);\n    };\n  }\n});\nvar Switch = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/switch/src/switch.vue\"]]);\nexports[\"default\"] = Switch;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;uCA8Fc;EACZA,IAAM;AACR;;;;;;;;;;IAKA,MAAMC,KAAKC,sBAAmB;IACxB;MAAEC;IAAA,IAAaC,iBAAY;IACjC,MAAMC,aAAaC,eAAQ;IACrB,WAAKC,qBAAa,QAAQ;IAG9BC;MACEC,IAAM;MACNC,WAAa;MACbC,KAAO;MACPC,OAAS;MACTC,GAAK;MACLC,IAAM;IAAA,CACR,EACAC,aAAS,MAAM;MAGX,MAAE;MACN,OAAiB;IAAA,CAClB;IAED,MAAM;MAAAC;IAAA,4BAA6B,MAAS,EAAM;MAClDC,eAAqB;IACrB;IACA,MAAMC,cAA4B;IAE5B,kBAAY,gBAAe;IAAA,MAC1BC;IACL,MAAKC,kBAAW;IAAK,MAClBC,SAAe,uBAClBC,EAAG,IAAG,EACPA,wBAEKA,gBAAY,gBAA+B,SAC/CA,eAAe,SAAW,QAC1B;IAGA,eAAY,uBACN;MACJC,oBAAqB;IAAA,CAEzB;IAGEC,gBAAMC,KAAM,WACN;MACJC,aAAaC,KAAQ;IAAA,CAEzB;IAEMH,mCAA6B;MACjCE,YAAoB;IAAiC,CACtD;IAED,MAAME,WAAmB,sBAAkB;MAEvC,OAAEF,YAAmB,yBAAqB,SAASC,KAAY;IACjE,CAAK;IACA,mCAAiCC;IACjC,8BAAgC;MACvCC;MAEMA,uBAAkB;MACtBA,sBAAuB;IAEvB;IACYL;MACZ;MACDL;MAED,IAAMM,mBAAqB;QACzB,MAAYtB,YAAQ,IAAQ,6BAA4B;MACxD;IACA;IACA,qBAAqB;MACrB,SAAS,GAAM2B;MACPD,+BAAyBE;MACjCF,IAAC;MACHA;MAEAG;QACEb,KAAmB;MAAO;IAE1B;IACA,MAAIc,WAAe;MACJ,0BACb;MACF;QAAAC;MAAA;MAEA;QAEAC,YAAwB;QACtB;MAAsB;MAExB,kBAAe;MACf,MAAsBC,mBACpBC,gCAIFC,6BAEI;MAEC,oBAAK,EAAY;QAChBC,gBAAY;MACV;MACF;QACFC,YACc;UACF;YACXL;UAAA;QAEH,CAAa;UACfM;QAAA,CACF;MAEA,CAAM,sBAAwB;QAC5BN,YAAsB;MAAA;IACwC;IACK,YACvD,sBAAgC;MAC5C,OAACb;QACF;UAAA;QAAA;QAED,uBAA0B;UAAA;QAAA;QACxB,qBAAqB;UAAA;QAAA;MAAA,CACvB;IAEA;IACQ,cAAO;MACd;MAEY;IAAA,CAIX;IAIAoB;MACDvB","names":["name","vm","getCurrentInstance","formItem","useFormItem","switchSize","useSize","useNamespace","useDeprecated","from","replacement","scope","version","ref","type","computed","inputId","formItemContext","switchDisabled","input","core","switchKls","ns","width","watch","props","isControlled","value","actualValue","emit","checked","val","nextTick","switchValue","beforeChange","handleChange","isPromiseOrBool","isPromise","isBoolean","throwError","shouldChange","debugWarn","onMounted"],"sources":["../../../../../../packages/components/switch/src/switch.vue"],"sourcesContent":["<template>\n  <div :class=\"switchKls\" :style=\"styles\" @click.prevent=\"switchValue\">\n    <input\n      :id=\"inputId\"\n      ref=\"input\"\n      :class=\"ns.e('input')\"\n      type=\"checkbox\"\n      role=\"switch\"\n      :aria-checked=\"checked\"\n      :aria-disabled=\"switchDisabled\"\n      :name=\"name\"\n      :true-value=\"activeValue\"\n      :false-value=\"inactiveValue\"\n      :disabled=\"switchDisabled\"\n      :tabindex=\"tabindex\"\n      @change=\"handleChange\"\n      @keydown.enter=\"switchValue\"\n    />\n    <span\n      v-if=\"!inlinePrompt && (inactiveIcon || inactiveText)\"\n      :class=\"[\n        ns.e('label'),\n        ns.em('label', 'left'),\n        ns.is('active', !checked),\n      ]\"\n    >\n      <el-icon v-if=\"inactiveIcon\"><component :is=\"inactiveIcon\" /></el-icon>\n      <span v-if=\"!inactiveIcon && inactiveText\" :aria-hidden=\"checked\">{{\n        inactiveText\n      }}</span>\n    </span>\n    <span ref=\"core\" :class=\"ns.e('core')\" :style=\"coreStyle\">\n      <div v-if=\"inlinePrompt\" :class=\"ns.e('inner')\">\n        <template v-if=\"activeIcon || inactiveIcon\">\n          <el-icon :class=\"ns.is('icon')\">\n            <component :is=\"checked ? activeIcon : inactiveIcon\" />\n          </el-icon>\n        </template>\n        <template v-else-if=\"activeText || inactiveText\">\n          <span :class=\"ns.is('text')\" :aria-hidden=\"!checked\">\n            {{ checked ? activeText : inactiveText }}\n          </span>\n        </template>\n      </div>\n      <div :class=\"ns.e('action')\">\n        <el-icon v-if=\"loading\" :class=\"ns.is('loading')\"><loading /></el-icon>\n      </div>\n    </span>\n    <span\n      v-if=\"!inlinePrompt && (activeIcon || activeText)\"\n      :class=\"[\n        ns.e('label'),\n        ns.em('label', 'right'),\n        ns.is('active', checked),\n      ]\"\n    >\n      <el-icon v-if=\"activeIcon\"><component :is=\"activeIcon\" /></el-icon>\n      <span v-if=\"!activeIcon && activeText\" :aria-hidden=\"!checked\">{{\n        activeText\n      }}</span>\n    </span>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport {\n  computed,\n  getCurrentInstance,\n  nextTick,\n  onMounted,\n  ref,\n  watch,\n} from 'vue'\nimport { isPromise } from '@vue/shared'\nimport { addUnit, debugWarn, isBoolean, throwError } from '@element-plus/utils'\nimport ElIcon from '@element-plus/components/icon'\nimport { Loading } from '@element-plus/icons-vue'\nimport {\n  CHANGE_EVENT,\n  INPUT_EVENT,\n  UPDATE_MODEL_EVENT,\n} from '@element-plus/constants'\nimport {\n  useDeprecated,\n  useDisabled,\n  useFormItem,\n  useFormItemInputId,\n  useNamespace,\n  useSize,\n} from '@element-plus/hooks'\nimport { switchEmits, switchProps } from './switch'\nimport type { CSSProperties } from 'vue'\n\nconst COMPONENT_NAME = 'ElSwitch'\ndefineOptions({\n  name: COMPONENT_NAME,\n})\n\nconst props = defineProps(switchProps)\nconst emit = defineEmits(switchEmits)\n\nconst vm = getCurrentInstance()!\nconst { formItem } = useFormItem()\nconst switchSize = useSize()\nconst ns = useNamespace('switch')\n\nuseDeprecated(\n  {\n    from: '\"value\"',\n    replacement: '\"model-value\" or \"v-model\"',\n    scope: COMPONENT_NAME,\n    version: '2.3.0',\n    ref: 'https://element-plus.org/en-US/component/switch.html#attributes',\n    type: 'Attribute',\n  },\n  computed(() => !!vm.vnode.props?.value)\n)\n\nconst { inputId } = useFormItemInputId(props, {\n  formItemContext: formItem,\n})\n\nconst switchDisabled = useDisabled(computed(() => props.loading))\nconst isControlled = ref(props.modelValue !== false)\nconst input = ref<HTMLInputElement>()\nconst core = ref<HTMLSpanElement>()\n\nconst switchKls = computed(() => [\n  ns.b(),\n  ns.m(switchSize.value),\n  ns.is('disabled', switchDisabled.value),\n  ns.is('checked', checked.value),\n])\n\nconst coreStyle = computed<CSSProperties>(() => ({\n  width: addUnit(props.width),\n}))\n\nwatch(\n  () => props.modelValue,\n  () => {\n    isControlled.value = true\n  }\n)\n\nwatch(\n  () => props.value,\n  () => {\n    isControlled.value = false\n  }\n)\n\nconst actualValue = computed(() => {\n  return isControlled.value ? props.modelValue : props.value\n})\n\nconst checked = computed(() => actualValue.value === props.activeValue)\n\nif (![props.activeValue, props.inactiveValue].includes(actualValue.value)) {\n  emit(UPDATE_MODEL_EVENT, props.inactiveValue)\n  emit(CHANGE_EVENT, props.inactiveValue)\n  emit(INPUT_EVENT, props.inactiveValue)\n}\n\nwatch(checked, (val) => {\n  input.value!.checked = val\n\n  if (props.validateEvent) {\n    formItem?.validate?.('change').catch((err) => debugWarn(err))\n  }\n})\n\nconst handleChange = () => {\n  const val = checked.value ? props.inactiveValue : props.activeValue\n  emit(UPDATE_MODEL_EVENT, val)\n  emit(CHANGE_EVENT, val)\n  emit(INPUT_EVENT, val)\n  nextTick(() => {\n    input.value!.checked = checked.value\n  })\n}\n\nconst switchValue = () => {\n  if (switchDisabled.value) return\n\n  const { beforeChange } = props\n  if (!beforeChange) {\n    handleChange()\n    return\n  }\n\n  const shouldChange = beforeChange()\n\n  const isPromiseOrBool = [\n    isPromise(shouldChange),\n    isBoolean(shouldChange),\n  ].includes(true)\n  if (!isPromiseOrBool) {\n    throwError(\n      COMPONENT_NAME,\n      'beforeChange must return type `Promise<boolean>` or `boolean`'\n    )\n  }\n\n  if (isPromise(shouldChange)) {\n    shouldChange\n      .then((result) => {\n        if (result) {\n          handleChange()\n        }\n      })\n      .catch((e) => {\n        debugWarn(COMPONENT_NAME, `some error occurred: ${e}`)\n      })\n  } else if (shouldChange) {\n    handleChange()\n  }\n}\n\nconst styles = computed(() => {\n  return ns.cssVarBlock({\n    ...(props.activeColor ? { 'on-color': props.activeColor } : null),\n    ...(props.inactiveColor ? { 'off-color': props.inactiveColor } : null),\n    ...(props.borderColor ? { 'border-color': props.borderColor } : null),\n  })\n})\n\nconst focus = (): void => {\n  input.value?.focus?.()\n}\n\nonMounted(() => {\n  input.value!.checked = checked.value\n})\n\ndefineExpose({\n  /**\n   *  @description manual focus to the switch component\n   **/\n  focus,\n  /**\n   * @description whether Switch is checked\n   */\n  checked,\n})\n</script>\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}