{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nrequire('../../../utils/index.js');\nrequire('../../../hooks/index.js');\nvar index$3 = require('../../button/index.js');\nvar index$4 = require('../../icon/index.js');\nvar iconsVue = require('@element-plus/icons-vue');\nvar transfer = require('./transfer.js');\nrequire('./composables/index.js');\nvar transferPanel = require('./transfer-panel2.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar index = require('../../../hooks/use-locale/index.js');\nvar index$1 = require('../../../hooks/use-namespace/index.js');\nvar index$2 = require('../../../hooks/use-form-item/index.js');\nvar usePropsAlias = require('./composables/use-props-alias.js');\nvar useComputedData = require('./composables/use-computed-data.js');\nvar useCheckedChange = require('./composables/use-checked-change.js');\nvar useMove = require('./composables/use-move.js');\nvar error = require('../../../utils/error.js');\nvar types = require('../../../utils/types.js');\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst __default__ = vue.defineComponent({\n  name: \"ElTransfer\"\n});\nconst _sfc_main = /* @__PURE__ */vue.defineComponent({\n  ...__default__,\n  props: transfer.transferProps,\n  emits: transfer.transferEmits,\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const slots = vue.useSlots();\n    const {\n      t\n    } = index.useLocale();\n    const ns = index$1.useNamespace(\"transfer\");\n    const {\n      formItem\n    } = index$2.useFormItem();\n    const checkedState = vue.reactive({\n      leftChecked: [],\n      rightChecked: []\n    });\n    const propsAlias = usePropsAlias.usePropsAlias(props);\n    const {\n      sourceData,\n      targetData\n    } = useComputedData.useComputedData(props);\n    const {\n      onSourceCheckedChange,\n      onTargetCheckedChange\n    } = useCheckedChange.useCheckedChange(checkedState, emit);\n    const {\n      addToLeft,\n      addToRight\n    } = useMove.useMove(props, checkedState, emit);\n    const leftPanel = vue.ref();\n    const rightPanel = vue.ref();\n    const clearQuery = which => {\n      switch (which) {\n        case \"left\":\n          leftPanel.value.query = \"\";\n          break;\n        case \"right\":\n          rightPanel.value.query = \"\";\n          break;\n      }\n    };\n    const hasButtonTexts = vue.computed(() => props.buttonTexts.length === 2);\n    const leftPanelTitle = vue.computed(() => props.titles[0] || t(\"el.transfer.titles.0\"));\n    const rightPanelTitle = vue.computed(() => props.titles[1] || t(\"el.transfer.titles.1\"));\n    const panelFilterPlaceholder = vue.computed(() => props.filterPlaceholder || t(\"el.transfer.filterPlaceholder\"));\n    vue.watch(() => props.modelValue, () => {\n      var _a;\n      if (props.validateEvent) {\n        (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, \"change\").catch(err => error.debugWarn(err));\n      }\n    });\n    const optionRender = vue.computed(() => option => {\n      if (props.renderContent) return props.renderContent(vue.h, option);\n      if (slots.default) return slots.default({\n        option\n      });\n      return vue.h(\"span\", option[propsAlias.value.label] || option[propsAlias.value.key]);\n    });\n    expose({\n      clearQuery,\n      leftPanel,\n      rightPanel\n    });\n    return (_ctx, _cache) => {\n      return vue.openBlock(), vue.createElementBlock(\"div\", {\n        class: vue.normalizeClass(vue.unref(ns).b())\n      }, [vue.createVNode(transferPanel[\"default\"], {\n        ref_key: \"leftPanel\",\n        ref: leftPanel,\n        data: vue.unref(sourceData),\n        \"option-render\": vue.unref(optionRender),\n        placeholder: vue.unref(panelFilterPlaceholder),\n        title: vue.unref(leftPanelTitle),\n        filterable: _ctx.filterable,\n        format: _ctx.format,\n        \"filter-method\": _ctx.filterMethod,\n        \"default-checked\": _ctx.leftDefaultChecked,\n        props: props.props,\n        onCheckedChange: vue.unref(onSourceCheckedChange)\n      }, {\n        default: vue.withCtx(() => [vue.renderSlot(_ctx.$slots, \"left-footer\")]),\n        _: 3\n      }, 8, [\"data\", \"option-render\", \"placeholder\", \"title\", \"filterable\", \"format\", \"filter-method\", \"default-checked\", \"props\", \"onCheckedChange\"]), vue.createElementVNode(\"div\", {\n        class: vue.normalizeClass(vue.unref(ns).e(\"buttons\"))\n      }, [vue.createVNode(vue.unref(index$3.ElButton), {\n        type: \"primary\",\n        class: vue.normalizeClass([vue.unref(ns).e(\"button\"), vue.unref(ns).is(\"with-texts\", vue.unref(hasButtonTexts))]),\n        disabled: vue.unref(types.isEmpty)(checkedState.rightChecked),\n        onClick: vue.unref(addToLeft)\n      }, {\n        default: vue.withCtx(() => [vue.createVNode(vue.unref(index$4.ElIcon), null, {\n          default: vue.withCtx(() => [vue.createVNode(vue.unref(iconsVue.ArrowLeft))]),\n          _: 1\n        }), !vue.unref(types.isUndefined)(_ctx.buttonTexts[0]) ? (vue.openBlock(), vue.createElementBlock(\"span\", _hoisted_1, vue.toDisplayString(_ctx.buttonTexts[0]), 1)) : vue.createCommentVNode(\"v-if\", true)]),\n        _: 1\n      }, 8, [\"class\", \"disabled\", \"onClick\"]), vue.createVNode(vue.unref(index$3.ElButton), {\n        type: \"primary\",\n        class: vue.normalizeClass([vue.unref(ns).e(\"button\"), vue.unref(ns).is(\"with-texts\", vue.unref(hasButtonTexts))]),\n        disabled: vue.unref(types.isEmpty)(checkedState.leftChecked),\n        onClick: vue.unref(addToRight)\n      }, {\n        default: vue.withCtx(() => [!vue.unref(types.isUndefined)(_ctx.buttonTexts[1]) ? (vue.openBlock(), vue.createElementBlock(\"span\", _hoisted_2, vue.toDisplayString(_ctx.buttonTexts[1]), 1)) : vue.createCommentVNode(\"v-if\", true), vue.createVNode(vue.unref(index$4.ElIcon), null, {\n          default: vue.withCtx(() => [vue.createVNode(vue.unref(iconsVue.ArrowRight))]),\n          _: 1\n        })]),\n        _: 1\n      }, 8, [\"class\", \"disabled\", \"onClick\"])], 2), vue.createVNode(transferPanel[\"default\"], {\n        ref_key: \"rightPanel\",\n        ref: rightPanel,\n        data: vue.unref(targetData),\n        \"option-render\": vue.unref(optionRender),\n        placeholder: vue.unref(panelFilterPlaceholder),\n        filterable: _ctx.filterable,\n        format: _ctx.format,\n        \"filter-method\": _ctx.filterMethod,\n        title: vue.unref(rightPanelTitle),\n        \"default-checked\": _ctx.rightDefaultChecked,\n        props: props.props,\n        onCheckedChange: vue.unref(onTargetCheckedChange)\n      }, {\n        default: vue.withCtx(() => [vue.renderSlot(_ctx.$slots, \"right-footer\")]),\n        _: 3\n      }, 8, [\"data\", \"option-render\", \"placeholder\", \"filterable\", \"format\", \"filter-method\", \"title\", \"default-checked\", \"props\", \"onCheckedChange\"])], 2);\n    };\n  }\n});\nvar Transfer = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/transfer/src/transfer.vue\"]]);\nexports[\"default\"] = Transfer;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uCA8Ec;EACZA,IAAM;AACR;;;;;;;;;;IAIA,MAAMC,QAAQC,YAAS;IAEjB;MAAEC;IAAA,IAAMC,eAAU;IAClB,WAAKC,qBAAa,UAAU;IAC5B;MAAEC;IAAA,IAAaC,mBAAY;IAEjC,MAAMC,eAAeC,YAA+B;MAClDC,aAAa,EAAC;MACdC,cAAc;IAAC,CAChB;IAEK,mBAAaC,4BAAcC,KAAK;IAEtC,MAAM;MAAEC;MAAYC;IAAe,oCAAgBF,KAAK;IAExD,MAAM;MAAEG;MAAuBC;IAA0B,sCACvDT,cACAU,IACF;IAEA,MAAM;MAAEC,SAAW;MAAAC;IAAA,IAAeC,eAAQ,QAAOb,cAAcU,IAAI;IAEnE,MAAMI,YAAYC,OAA2B;IAC7C,MAAMC,aAAaD,OAA2B;IAExC,mBAAcE,KAA6B;MACvC;QACD;UACHH,UAAUI,MAAOC,KAAQ;UACzB;QACG;UACHH,WAAWE,MAAOC,KAAQ;UAC1B;MAAA;IAAA,CAEN;IAEA,MAAMC,iBAAiBC,YAAS,OAAMhB,KAAM,aAAYiB,WAAW,CAAC;IAE9D,uBAAiBD,aACrB,MAAMhB,MAAMkB,OAAO,CAAM,OAAE,sBAAsB,CACnD;IAEM,wBAAkBF,aACtB,MAAMhB,MAAMkB,OAAO,CAAM,OAAE,sBAAsB,CACnD;IAEA,MAAMC,yBAAyBH,YAC7B,OAAMhB,MAAMoB,iBAAqB,MAAE,+BAA+B,CACpE;IAGEC,gBAAMrB,KAAM,aACZ,MAAM;MACJ,IAAIsB;MACQ,uBAAW;QACvB;MAAA;IAIJ;IACE,MAAIC,YAAM;MAAsB,uBAAoB,EAEpD,OAAUvB;MAAS,SAAO,CAAMwB,SAEzB,OACLpC,aACO;QAAAqC;MAAA;MAEV;IAED,CAAa;IAEXC;MAEAC;MAEAlB;MACDE","names":["name","slots","useSlots","t","useLocale","useNamespace","formItem","useFormItem","checkedState","reactive","leftChecked","rightChecked","usePropsAlias","props","sourceData","targetData","onSourceCheckedChange","onTargetCheckedChange","emit","addToLeft","addToRight","useMove","leftPanel","ref","rightPanel","which","value","query","hasButtonTexts","computed","length","titles","panelFilterPlaceholder","filterPlaceholder","watch","_a","optionRender","default","option","expose","clearQuery"],"sources":["../../../../../../packages/components/transfer/src/transfer.vue"],"sourcesContent":["<template>\n  <div :class=\"ns.b()\">\n    <transfer-panel\n      ref=\"leftPanel\"\n      :data=\"sourceData\"\n      :option-render=\"optionRender\"\n      :placeholder=\"panelFilterPlaceholder\"\n      :title=\"leftPanelTitle\"\n      :filterable=\"filterable\"\n      :format=\"format\"\n      :filter-method=\"filterMethod\"\n      :default-checked=\"leftDefaultChecked\"\n      :props=\"props.props\"\n      @checked-change=\"onSourceCheckedChange\"\n    >\n      <slot name=\"left-footer\" />\n    </transfer-panel>\n    <div :class=\"ns.e('buttons')\">\n      <el-button\n        type=\"primary\"\n        :class=\"[ns.e('button'), ns.is('with-texts', hasButtonTexts)]\"\n        :disabled=\"isEmpty(checkedState.rightChecked)\"\n        @click=\"addToLeft\"\n      >\n        <el-icon><arrow-left /></el-icon>\n        <span v-if=\"!isUndefined(buttonTexts[0])\">{{ buttonTexts[0] }}</span>\n      </el-button>\n      <el-button\n        type=\"primary\"\n        :class=\"[ns.e('button'), ns.is('with-texts', hasButtonTexts)]\"\n        :disabled=\"isEmpty(checkedState.leftChecked)\"\n        @click=\"addToRight\"\n      >\n        <span v-if=\"!isUndefined(buttonTexts[1])\">{{ buttonTexts[1] }}</span>\n        <el-icon><arrow-right /></el-icon>\n      </el-button>\n    </div>\n    <transfer-panel\n      ref=\"rightPanel\"\n      :data=\"targetData\"\n      :option-render=\"optionRender\"\n      :placeholder=\"panelFilterPlaceholder\"\n      :filterable=\"filterable\"\n      :format=\"format\"\n      :filter-method=\"filterMethod\"\n      :title=\"rightPanelTitle\"\n      :default-checked=\"rightDefaultChecked\"\n      :props=\"props.props\"\n      @checked-change=\"onTargetCheckedChange\"\n    >\n      <slot name=\"right-footer\" />\n    </transfer-panel>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, h, reactive, ref, useSlots, watch } from 'vue'\nimport { debugWarn, isEmpty, isUndefined } from '@element-plus/utils'\nimport { useFormItem, useLocale, useNamespace } from '@element-plus/hooks'\nimport { ElButton } from '@element-plus/components/button'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { ArrowLeft, ArrowRight } from '@element-plus/icons-vue'\nimport { transferEmits, transferProps } from './transfer'\nimport {\n  useCheckedChange,\n  useComputedData,\n  useMove,\n  usePropsAlias,\n} from './composables'\nimport TransferPanel from './transfer-panel.vue'\n\nimport type {\n  TransferCheckedState,\n  TransferDataItem,\n  TransferDirection,\n} from './transfer'\nimport type { TransferPanelInstance } from './transfer-panel'\n\ndefineOptions({\n  name: 'ElTransfer',\n})\n\nconst props = defineProps(transferProps)\nconst emit = defineEmits(transferEmits)\nconst slots = useSlots()\n\nconst { t } = useLocale()\nconst ns = useNamespace('transfer')\nconst { formItem } = useFormItem()\n\nconst checkedState = reactive<TransferCheckedState>({\n  leftChecked: [],\n  rightChecked: [],\n})\n\nconst propsAlias = usePropsAlias(props)\n\nconst { sourceData, targetData } = useComputedData(props)\n\nconst { onSourceCheckedChange, onTargetCheckedChange } = useCheckedChange(\n  checkedState,\n  emit\n)\n\nconst { addToLeft, addToRight } = useMove(props, checkedState, emit)\n\nconst leftPanel = ref<TransferPanelInstance>()\nconst rightPanel = ref<TransferPanelInstance>()\n\nconst clearQuery = (which: TransferDirection) => {\n  switch (which) {\n    case 'left':\n      leftPanel.value!.query = ''\n      break\n    case 'right':\n      rightPanel.value!.query = ''\n      break\n  }\n}\n\nconst hasButtonTexts = computed(() => props.buttonTexts.length === 2)\n\nconst leftPanelTitle = computed(\n  () => props.titles[0] || t('el.transfer.titles.0')\n)\n\nconst rightPanelTitle = computed(\n  () => props.titles[1] || t('el.transfer.titles.1')\n)\n\nconst panelFilterPlaceholder = computed(\n  () => props.filterPlaceholder || t('el.transfer.filterPlaceholder')\n)\n\nwatch(\n  () => props.modelValue,\n  () => {\n    if (props.validateEvent) {\n      formItem?.validate?.('change').catch((err) => debugWarn(err))\n    }\n  }\n)\n\nconst optionRender = computed(() => (option: TransferDataItem) => {\n  if (props.renderContent) return props.renderContent(h, option)\n\n  if (slots.default) return slots.default({ option })\n\n  return h(\n    'span',\n    option[propsAlias.value.label] || option[propsAlias.value.key]\n  )\n})\n\ndefineExpose({\n  /** @description clear the filter keyword of a certain panel */\n  clearQuery,\n  /** @description left panel ref */\n  leftPanel,\n  /** @description left panel ref */\n  rightPanel,\n})\n</script>\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}