{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar core = require('@vueuse/core');\nrequire('../../../hooks/index.js');\nrequire('../../../utils/index.js');\nrequire('../../../tokens/index.js');\nvar root = require('./root.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar types = require('../../../utils/types.js');\nvar index = require('../../../hooks/use-namespace/index.js');\nvar index$1 = require('../../../hooks/use-id/index.js');\nvar tooltipV2 = require('../../../tokens/tooltip-v2.js');\nconst __default__ = vue.defineComponent({\n  name: \"ElTooltipV2Root\"\n});\nconst _sfc_main = /* @__PURE__ */vue.defineComponent({\n  ...__default__,\n  props: root.tooltipV2RootProps,\n  setup(__props, {\n    expose\n  }) {\n    const props = __props;\n    const _open = vue.ref(props.defaultOpen);\n    const triggerRef = vue.ref(null);\n    const open = vue.computed({\n      get: () => types.isPropAbsent(props.open) ? _open.value : props.open,\n      set: open2 => {\n        var _a;\n        _open.value = open2;\n        (_a = props[\"onUpdate:open\"]) == null ? void 0 : _a.call(props, open2);\n      }\n    });\n    const isOpenDelayed = vue.computed(() => core.isNumber(props.delayDuration) && props.delayDuration > 0);\n    const {\n      start: onDelayedOpen,\n      stop: clearTimer\n    } = core.useTimeoutFn(() => {\n      open.value = true;\n    }, vue.computed(() => props.delayDuration), {\n      immediate: false\n    });\n    const ns = index.useNamespace(\"tooltip-v2\");\n    const contentId = index$1.useId();\n    const onNormalOpen = () => {\n      clearTimer();\n      open.value = true;\n    };\n    const onDelayOpen = () => {\n      vue.unref(isOpenDelayed) ? onDelayedOpen() : onNormalOpen();\n    };\n    const onOpen = onNormalOpen;\n    const onClose = () => {\n      clearTimer();\n      open.value = false;\n    };\n    const onChange = open2 => {\n      var _a;\n      if (open2) {\n        document.dispatchEvent(new CustomEvent(tooltipV2.TOOLTIP_V2_OPEN));\n        onOpen();\n      }\n      (_a = props.onOpenChange) == null ? void 0 : _a.call(props, open2);\n    };\n    vue.watch(open, onChange);\n    vue.onMounted(() => {\n      document.addEventListener(tooltipV2.TOOLTIP_V2_OPEN, onClose);\n    });\n    vue.onBeforeUnmount(() => {\n      clearTimer();\n      document.removeEventListener(tooltipV2.TOOLTIP_V2_OPEN, onClose);\n    });\n    vue.provide(tooltipV2.tooltipV2RootKey, {\n      contentId,\n      triggerRef,\n      ns,\n      onClose,\n      onDelayOpen,\n      onOpen\n    });\n    expose({\n      onOpen,\n      onClose\n    });\n    return (_ctx, _cache) => {\n      return vue.renderSlot(_ctx.$slots, \"default\", {\n        open: vue.unref(open)\n      });\n    };\n  }\n});\nvar TooltipV2Root = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/tooltip-v2/src/root.vue\"]]);\nexports[\"default\"] = TooltipV2Root;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;uCAoBc;EACZA,IAAM;AACR;;;;;;;;IAOM,cAAQC,OAAI,OAAMC,WAAW;IAC7B,mBAAaD,QAAwB,IAAI;IAE/C,MAAME,OAAOC,YAAkB;MAC7BC,KAAK,MAAOC,kBAAa,OAAMH,IAAI,CAAI,SAAMI,QAAQC,KAAM;MAC3DC,KAAMC,KAAS;QACb,MAAM;QACNC,MAAMJ;QACR;MAAA;IAGF,CAAM;IAIN,MAAMK,aAAS,eAAe,CAAM,yBAAe,cAC3C;IACJ;MAAaC;MAAAC;IAAA;MAEfX,UAAS,GAAM;IACf,GACaC;MAEfW;IAEA,CAAM;IAEN,MAAMC,uBAAkB;IAExB,MAAMC,yBAAqB;IACd;MACXC,UAAa;MACff;IAEA;IACE,iBAAmB,SAAkB;MACvCgB;IAEA;IAEA,MAAMC,qBAAgB;IACT;MACXF,UAAa;MACff;IAEA,CAAM;IACJ,MAAIkB,QAAM;MACR;MACO;QACTC;QAEAF;MAAyB;MAG3B,WAAoB;IAEpB;IAEWG;IACXC,aAAC;MAEDF,yBAAsB;IACpB,CAAW;IACFG;MACVP;MAEDI,QAA0B;IAAA,CACxB;IACAI;MACAT;MAEAU;MACAX;MACAY;MACDC;MAEYT;IAAA,CAIX;IAKAU;MACDV","names":["name","ref","defaultOpen","open","computed","get","isPropAbsent","value","props","set","open2","_open","isOpenDelayed","start","stop","immediate","ns","contentId","clearTimer","unref","onOpen","onChange","document","watch","onMounted","onBeforeUnmount","provide","triggerRef","onClose","onDelayOpen","expose"],"sources":["../../../../../../packages/components/tooltip-v2/src/root.vue"],"sourcesContent":["<template>\n  <slot :open=\"open\" />\n</template>\n\n<script setup lang=\"ts\">\nimport {\n  computed,\n  onBeforeUnmount,\n  onMounted,\n  provide,\n  ref,\n  unref,\n  watch,\n} from 'vue'\nimport { useTimeoutFn } from '@vueuse/core'\nimport { useId, useNamespace } from '@element-plus/hooks'\nimport { isNumber, isPropAbsent } from '@element-plus/utils'\nimport { TOOLTIP_V2_OPEN, tooltipV2RootKey } from '@element-plus/tokens'\nimport { tooltipV2RootProps } from './root'\n\ndefineOptions({\n  name: 'ElTooltipV2Root',\n})\n\nconst props = defineProps(tooltipV2RootProps)\n\n/**\n * internal open state, when no model value was provided, use this as indicator instead\n */\nconst _open = ref(props.defaultOpen)\nconst triggerRef = ref<HTMLElement | null>(null)\n\nconst open = computed<boolean>({\n  get: () => (isPropAbsent(props.open) ? _open.value : props.open),\n  set: (open) => {\n    _open.value = open\n    props['onUpdate:open']?.(open)\n  },\n})\n\nconst isOpenDelayed = computed(\n  () => isNumber(props.delayDuration) && props.delayDuration > 0\n)\n\nconst { start: onDelayedOpen, stop: clearTimer } = useTimeoutFn(\n  () => {\n    open.value = true\n  },\n  computed(() => props.delayDuration),\n  {\n    immediate: false,\n  }\n)\n\nconst ns = useNamespace('tooltip-v2')\n\nconst contentId = useId()\n\nconst onNormalOpen = () => {\n  clearTimer()\n  open.value = true\n}\n\nconst onDelayOpen = () => {\n  unref(isOpenDelayed) ? onDelayedOpen() : onNormalOpen()\n}\n\nconst onOpen = onNormalOpen\n\nconst onClose = () => {\n  clearTimer()\n  open.value = false\n}\n\nconst onChange = (open: boolean) => {\n  if (open) {\n    document.dispatchEvent(new CustomEvent(TOOLTIP_V2_OPEN))\n    onOpen()\n  }\n\n  props.onOpenChange?.(open)\n}\n\nwatch(open, onChange)\n\nonMounted(() => {\n  // Keeps only 1 tooltip open at a time\n  document.addEventListener(TOOLTIP_V2_OPEN, onClose)\n})\n\nonBeforeUnmount(() => {\n  clearTimer()\n  document.removeEventListener(TOOLTIP_V2_OPEN, onClose)\n})\n\nprovide(tooltipV2RootKey, {\n  contentId,\n  triggerRef,\n  ns,\n\n  onClose,\n  onDelayOpen,\n  onOpen,\n})\n\ndefineExpose({\n  /**\n   * @description open tooltip programmatically\n   */\n  onOpen,\n\n  /**\n   * @description close tooltip programmatically\n   */\n  onClose,\n})\n</script>\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}