{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar shared = require('@vue/shared');\nrequire('../../../utils/index.js');\nrequire('../../../constants/index.js');\nrequire('../../../hooks/index.js');\nvar runtime = require('../../../utils/vue/props/runtime.js');\nvar index = require('../../../hooks/use-common-props/index.js');\nvar icon = require('../../../utils/vue/icon.js');\nvar typescript = require('../../../utils/typescript.js');\nvar event = require('../../../constants/event.js');\nconst inputProps = runtime.buildProps({\n  id: {\n    type: String,\n    default: void 0\n  },\n  size: index.useSizeProp,\n  disabled: Boolean,\n  modelValue: {\n    type: runtime.definePropType([String, Number, Object]),\n    default: \"\"\n  },\n  type: {\n    type: String,\n    default: \"text\"\n  },\n  resize: {\n    type: String,\n    values: [\"none\", \"both\", \"horizontal\", \"vertical\"]\n  },\n  autosize: {\n    type: runtime.definePropType([Boolean, Object]),\n    default: false\n  },\n  autocomplete: {\n    type: String,\n    default: \"off\"\n  },\n  formatter: {\n    type: Function\n  },\n  parser: {\n    type: Function\n  },\n  placeholder: {\n    type: String\n  },\n  form: {\n    type: String\n  },\n  readonly: {\n    type: Boolean,\n    default: false\n  },\n  clearable: {\n    type: Boolean,\n    default: false\n  },\n  showPassword: {\n    type: Boolean,\n    default: false\n  },\n  showWordLimit: {\n    type: Boolean,\n    default: false\n  },\n  suffixIcon: {\n    type: icon.iconPropType\n  },\n  prefixIcon: {\n    type: icon.iconPropType\n  },\n  containerRole: {\n    type: String,\n    default: void 0\n  },\n  label: {\n    type: String,\n    default: void 0\n  },\n  tabindex: {\n    type: [String, Number],\n    default: 0\n  },\n  validateEvent: {\n    type: Boolean,\n    default: true\n  },\n  inputStyle: {\n    type: runtime.definePropType([Object, Array, String]),\n    default: () => typescript.mutable({})\n  }\n});\nconst inputEmits = {\n  [event.UPDATE_MODEL_EVENT]: value => shared.isString(value),\n  input: value => shared.isString(value),\n  change: value => shared.isString(value),\n  focus: evt => evt instanceof FocusEvent,\n  blur: evt => evt instanceof FocusEvent,\n  clear: () => true,\n  mouseleave: evt => evt instanceof MouseEvent,\n  mouseenter: evt => evt instanceof MouseEvent,\n  keydown: evt => evt instanceof Event,\n  compositionstart: evt => evt instanceof CompositionEvent,\n  compositionupdate: evt => evt instanceof CompositionEvent,\n  compositionend: evt => evt instanceof CompositionEvent\n};\nexports.inputEmits = inputEmits;\nexports.inputProps = inputProps;","map":{"version":3,"mappings":"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","names":["inputProps","buildProps","id","type","String","default","size","useSizeProp","disabled","Boolean","modelValue","definePropType","Number","Object","resize","values","autosize","autocomplete","formatter","Function","parser","placeholder","form","readonly","clearable","showPassword","showWordLimit","suffixIcon","iconPropType","prefixIcon","containerRole","label","tabindex","validateEvent","inputStyle","Array","mutable","inputEmits","UPDATE_MODEL_EVENT","value","isString","input","change","focus","evt","FocusEvent","blur","clear","mouseleave","MouseEvent","mouseenter","keydown","Event","compositionstart","CompositionEvent","compositionupdate","compositionend"],"sources":["../../../../../../packages/components/input/src/input.ts"],"sourcesContent":["import { isString } from '@vue/shared'\nimport {\n  buildProps,\n  definePropType,\n  iconPropType,\n  mutable,\n} from '@element-plus/utils'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { useSizeProp } from '@element-plus/hooks'\nimport type Input from './input.vue'\nimport type { ExtractPropTypes, StyleValue } from 'vue'\n\nexport type InputAutoSize = { minRows?: number; maxRows?: number } | boolean\n\nexport const inputProps = buildProps({\n  id: {\n    type: String,\n    default: undefined,\n  },\n  size: useSizeProp,\n  disabled: Boolean,\n  modelValue: {\n    type: definePropType<string | number | null | undefined>([\n      String,\n      Number,\n      Object,\n    ]),\n    default: '',\n  },\n  type: {\n    type: String,\n    default: 'text',\n  },\n  resize: {\n    type: String,\n    values: ['none', 'both', 'horizontal', 'vertical'],\n  },\n  autosize: {\n    type: definePropType<InputAutoSize>([Boolean, Object]),\n    default: false,\n  },\n  autocomplete: {\n    type: String,\n    default: 'off',\n  },\n  formatter: {\n    type: Function,\n  },\n  parser: {\n    type: Function,\n  },\n  placeholder: {\n    type: String,\n  },\n  form: {\n    type: String,\n  },\n  readonly: {\n    type: Boolean,\n    default: false,\n  },\n  clearable: {\n    type: Boolean,\n    default: false,\n  },\n  showPassword: {\n    type: Boolean,\n    default: false,\n  },\n  showWordLimit: {\n    type: Boolean,\n    default: false,\n  },\n  suffixIcon: {\n    type: iconPropType,\n  },\n  prefixIcon: {\n    type: iconPropType,\n  },\n  containerRole: {\n    type: String,\n    default: undefined,\n  },\n  label: {\n    type: String,\n    default: undefined,\n  },\n  tabindex: {\n    type: [String, Number],\n    default: 0,\n  },\n  validateEvent: {\n    type: Boolean,\n    default: true,\n  },\n  inputStyle: {\n    type: definePropType<StyleValue>([Object, Array, String]),\n    default: () => mutable({} as const),\n  },\n} as const)\nexport type InputProps = ExtractPropTypes<typeof inputProps>\n\nexport const inputEmits = {\n  [UPDATE_MODEL_EVENT]: (value: string) => isString(value),\n  input: (value: string) => isString(value),\n  change: (value: string) => isString(value),\n  focus: (evt: FocusEvent) => evt instanceof FocusEvent,\n  blur: (evt: FocusEvent) => evt instanceof FocusEvent,\n  clear: () => true,\n  mouseleave: (evt: MouseEvent) => evt instanceof MouseEvent,\n  mouseenter: (evt: MouseEvent) => evt instanceof MouseEvent,\n  // NOTE: when autofill by browser, the keydown event is instanceof Event, not KeyboardEvent\n  // relative bug report https://github.com/element-plus/element-plus/issues/6665\n  keydown: (evt: KeyboardEvent | Event) => evt instanceof Event,\n  compositionstart: (evt: CompositionEvent) => evt instanceof CompositionEvent,\n  compositionupdate: (evt: CompositionEvent) => evt instanceof CompositionEvent,\n  compositionend: (evt: CompositionEvent) => evt instanceof CompositionEvent,\n}\nexport type InputEmits = typeof inputEmits\n\nexport type InputInstance = InstanceType<typeof Input>\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}