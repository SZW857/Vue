{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar index = require('../../button/index.js');\nvar index$2 = require('../../tooltip/index.js');\nvar index$1 = require('../../scrollbar/index.js');\nvar index$3 = require('../../icon/index.js');\nrequire('../../roving-focus-group/index.js');\nrequire('../../slot/index.js');\nrequire('../../../utils/index.js');\nvar iconsVue = require('@element-plus/icons-vue');\nrequire('../../../constants/index.js');\nrequire('../../../hooks/index.js');\nvar dropdown = require('./dropdown.js');\nvar tokens = require('./tokens.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar rovingFocusGroup = require('../../roving-focus-group/src/roving-focus-group2.js');\nvar onlyChild = require('../../slot/src/only-child.js');\nvar index$4 = require('../../../hooks/use-namespace/index.js');\nvar index$5 = require('../../../hooks/use-locale/index.js');\nvar aria = require('../../../constants/aria.js');\nvar style = require('../../../utils/dom/style.js');\nvar index$6 = require('../../../hooks/use-id/index.js');\nvar index$7 = require('../../../hooks/use-common-props/index.js');\nconst {\n  ButtonGroup: ElButtonGroup\n} = index.ElButton;\nconst _sfc_main = vue.defineComponent({\n  name: \"ElDropdown\",\n  components: {\n    ElButton: index.ElButton,\n    ElButtonGroup,\n    ElScrollbar: index$1.ElScrollbar,\n    ElDropdownCollection: dropdown.ElCollection,\n    ElTooltip: index$2.ElTooltip,\n    ElRovingFocusGroup: rovingFocusGroup[\"default\"],\n    ElOnlyChild: onlyChild.OnlyChild,\n    ElIcon: index$3.ElIcon,\n    ArrowDown: iconsVue.ArrowDown\n  },\n  props: dropdown.dropdownProps,\n  emits: [\"visible-change\", \"click\", \"command\"],\n  setup(props, {\n    emit\n  }) {\n    const _instance = vue.getCurrentInstance();\n    const ns = index$4.useNamespace(\"dropdown\");\n    const {\n      t\n    } = index$5.useLocale();\n    const triggeringElementRef = vue.ref();\n    const referenceElementRef = vue.ref();\n    const popperRef = vue.ref(null);\n    const contentRef = vue.ref(null);\n    const scrollbar = vue.ref(null);\n    const currentTabId = vue.ref(null);\n    const isUsingKeyboard = vue.ref(false);\n    const triggerKeys = [aria.EVENT_CODE.enter, aria.EVENT_CODE.space, aria.EVENT_CODE.down];\n    const wrapStyle = vue.computed(() => ({\n      maxHeight: style.addUnit(props.maxHeight)\n    }));\n    const dropdownTriggerKls = vue.computed(() => [ns.m(dropdownSize.value)]);\n    const defaultTriggerId = index$6.useId().value;\n    const triggerId = vue.computed(() => {\n      return props.id || defaultTriggerId;\n    });\n    function handleClick() {\n      handleClose();\n    }\n    function handleClose() {\n      var _a;\n      (_a = popperRef.value) == null ? void 0 : _a.onClose();\n    }\n    function handleOpen() {\n      var _a;\n      (_a = popperRef.value) == null ? void 0 : _a.onOpen();\n    }\n    const dropdownSize = index$7.useSize();\n    function commandHandler(...args) {\n      emit(\"command\", ...args);\n    }\n    function onItemEnter() {}\n    function onItemLeave() {\n      const contentEl = vue.unref(contentRef);\n      contentEl == null ? void 0 : contentEl.focus();\n      currentTabId.value = null;\n    }\n    function handleCurrentTabIdChange(id) {\n      currentTabId.value = id;\n    }\n    function handleEntryFocus(e) {\n      if (!isUsingKeyboard.value) {\n        e.preventDefault();\n        e.stopImmediatePropagation();\n      }\n    }\n    function handleBeforeShowTooltip() {\n      emit(\"visible-change\", true);\n    }\n    function handleShowTooltip(event) {\n      if ((event == null ? void 0 : event.type) === \"keydown\") {\n        contentRef.value.focus();\n      }\n    }\n    function handleBeforeHideTooltip() {\n      emit(\"visible-change\", false);\n    }\n    vue.provide(tokens.DROPDOWN_INJECTION_KEY, {\n      contentRef,\n      role: vue.computed(() => props.role),\n      triggerId,\n      isUsingKeyboard,\n      onItemEnter,\n      onItemLeave\n    });\n    vue.provide(\"elDropdown\", {\n      instance: _instance,\n      dropdownSize,\n      handleClick,\n      commandHandler,\n      trigger: vue.toRef(props, \"trigger\"),\n      hideOnClick: vue.toRef(props, \"hideOnClick\")\n    });\n    const onFocusAfterTrapped = e => {\n      var _a, _b;\n      e.preventDefault();\n      (_b = (_a = contentRef.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a, {\n        preventScroll: true\n      });\n    };\n    const handlerMainButtonClick = event => {\n      emit(\"click\", event);\n    };\n    return {\n      t,\n      ns,\n      scrollbar,\n      wrapStyle,\n      dropdownTriggerKls,\n      dropdownSize,\n      triggerId,\n      triggerKeys,\n      currentTabId,\n      handleCurrentTabIdChange,\n      handlerMainButtonClick,\n      handleEntryFocus,\n      handleClose,\n      handleOpen,\n      handleBeforeShowTooltip,\n      handleShowTooltip,\n      handleBeforeHideTooltip,\n      onFocusAfterTrapped,\n      popperRef,\n      contentRef,\n      triggeringElementRef,\n      referenceElementRef\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _a;\n  const _component_el_dropdown_collection = vue.resolveComponent(\"el-dropdown-collection\");\n  const _component_el_roving_focus_group = vue.resolveComponent(\"el-roving-focus-group\");\n  const _component_el_scrollbar = vue.resolveComponent(\"el-scrollbar\");\n  const _component_el_only_child = vue.resolveComponent(\"el-only-child\");\n  const _component_el_tooltip = vue.resolveComponent(\"el-tooltip\");\n  const _component_el_button = vue.resolveComponent(\"el-button\");\n  const _component_arrow_down = vue.resolveComponent(\"arrow-down\");\n  const _component_el_icon = vue.resolveComponent(\"el-icon\");\n  const _component_el_button_group = vue.resolveComponent(\"el-button-group\");\n  return vue.openBlock(), vue.createElementBlock(\"div\", {\n    class: vue.normalizeClass([_ctx.ns.b(), _ctx.ns.is(\"disabled\", _ctx.disabled)])\n  }, [vue.createVNode(_component_el_tooltip, {\n    ref: \"popperRef\",\n    role: _ctx.role,\n    effect: _ctx.effect,\n    \"fallback-placements\": [\"bottom\", \"top\"],\n    \"popper-options\": _ctx.popperOptions,\n    \"gpu-acceleration\": false,\n    \"hide-after\": _ctx.trigger === \"hover\" ? _ctx.hideTimeout : 0,\n    \"manual-mode\": true,\n    placement: _ctx.placement,\n    \"popper-class\": [_ctx.ns.e(\"popper\"), _ctx.popperClass],\n    \"reference-element\": (_a = _ctx.referenceElementRef) == null ? void 0 : _a.$el,\n    trigger: _ctx.trigger,\n    \"trigger-keys\": _ctx.triggerKeys,\n    \"trigger-target-el\": _ctx.contentRef,\n    \"show-after\": _ctx.trigger === \"hover\" ? _ctx.showTimeout : 0,\n    \"stop-popper-mouse-event\": false,\n    \"virtual-ref\": _ctx.triggeringElementRef,\n    \"virtual-triggering\": _ctx.splitButton,\n    disabled: _ctx.disabled,\n    transition: `${_ctx.ns.namespace.value}-zoom-in-top`,\n    teleported: _ctx.teleported,\n    pure: \"\",\n    persistent: \"\",\n    onBeforeShow: _ctx.handleBeforeShowTooltip,\n    onShow: _ctx.handleShowTooltip,\n    onBeforeHide: _ctx.handleBeforeHideTooltip\n  }, vue.createSlots({\n    content: vue.withCtx(() => [vue.createVNode(_component_el_scrollbar, {\n      ref: \"scrollbar\",\n      \"wrap-style\": _ctx.wrapStyle,\n      tag: \"div\",\n      \"view-class\": _ctx.ns.e(\"list\")\n    }, {\n      default: vue.withCtx(() => [vue.createVNode(_component_el_roving_focus_group, {\n        loop: _ctx.loop,\n        \"current-tab-id\": _ctx.currentTabId,\n        orientation: \"horizontal\",\n        onCurrentTabIdChange: _ctx.handleCurrentTabIdChange,\n        onEntryFocus: _ctx.handleEntryFocus\n      }, {\n        default: vue.withCtx(() => [vue.createVNode(_component_el_dropdown_collection, null, {\n          default: vue.withCtx(() => [vue.renderSlot(_ctx.$slots, \"dropdown\")]),\n          _: 3\n        })]),\n        _: 3\n      }, 8, [\"loop\", \"current-tab-id\", \"onCurrentTabIdChange\", \"onEntryFocus\"])]),\n      _: 3\n    }, 8, [\"wrap-style\", \"view-class\"])]),\n    _: 2\n  }, [!_ctx.splitButton ? {\n    name: \"default\",\n    fn: vue.withCtx(() => [vue.createVNode(_component_el_only_child, {\n      id: _ctx.triggerId,\n      role: \"button\",\n      tabindex: _ctx.tabindex\n    }, {\n      default: vue.withCtx(() => [vue.renderSlot(_ctx.$slots, \"default\")]),\n      _: 3\n    }, 8, [\"id\", \"tabindex\"])])\n  } : void 0]), 1032, [\"role\", \"effect\", \"popper-options\", \"hide-after\", \"placement\", \"popper-class\", \"reference-element\", \"trigger\", \"trigger-keys\", \"trigger-target-el\", \"show-after\", \"virtual-ref\", \"virtual-triggering\", \"disabled\", \"transition\", \"teleported\", \"onBeforeShow\", \"onShow\", \"onBeforeHide\"]), _ctx.splitButton ? (vue.openBlock(), vue.createBlock(_component_el_button_group, {\n    key: 0\n  }, {\n    default: vue.withCtx(() => [vue.createVNode(_component_el_button, vue.mergeProps({\n      ref: \"referenceElementRef\"\n    }, _ctx.buttonProps, {\n      size: _ctx.dropdownSize,\n      type: _ctx.type,\n      disabled: _ctx.disabled,\n      tabindex: _ctx.tabindex,\n      onClick: _ctx.handlerMainButtonClick\n    }), {\n      default: vue.withCtx(() => [vue.renderSlot(_ctx.$slots, \"default\")]),\n      _: 3\n    }, 16, [\"size\", \"type\", \"disabled\", \"tabindex\", \"onClick\"]), vue.createVNode(_component_el_button, vue.mergeProps({\n      id: _ctx.triggerId,\n      ref: \"triggeringElementRef\"\n    }, _ctx.buttonProps, {\n      role: \"button\",\n      size: _ctx.dropdownSize,\n      type: _ctx.type,\n      class: _ctx.ns.e(\"caret-button\"),\n      disabled: _ctx.disabled,\n      tabindex: _ctx.tabindex,\n      \"aria-label\": _ctx.t(\"el.dropdown.toggleDropdown\")\n    }), {\n      default: vue.withCtx(() => [vue.createVNode(_component_el_icon, {\n        class: vue.normalizeClass(_ctx.ns.e(\"icon\"))\n      }, {\n        default: vue.withCtx(() => [vue.createVNode(_component_arrow_down)]),\n        _: 1\n      }, 8, [\"class\"])]),\n      _: 1\n    }, 16, [\"id\", \"size\", \"type\", \"class\", \"disabled\", \"tabindex\", \"aria-label\"])]),\n    _: 3\n  })) : vue.createCommentVNode(\"v-if\", true)], 2);\n}\nvar Dropdown = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/dropdown/src/dropdown.vue\"]]);\nexports[\"default\"] = Dropdown;","map":{"version":3,"mappings":"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","names":["ButtonGroup","ElButtonGroup","_sfc_main","defineComponent","name","components","ElButton","ElScrollbar","ElDropdownCollection","ElTooltip","ElRovingFocusGroup","ElOnlyChild","ElIcon","ArrowDown","props","emits","setup","emit","_instance","getCurrentInstance","useNamespace","t","useLocale","triggeringElementRef","ref","referenceElementRef","triggerKeys","EVENT_CODE","enter","down","computed","maxHeight","addUnit","ns","m","value","useId","id","handleClose","useSize","contentEl","currentTabId","handleEntryFocus","isUsingKeyboard","e","contentRef","provide","role","triggerId","onItemEnter","onItemLeave","instance","dropdownSize","handleClick","commandHandler","trigger","hideOnClick","_a","preventScroll","scrollbar","wrapStyle","dropdownTriggerKls","handleCurrentTabIdChange","handlerMainButtonClick","handleOpen","handleBeforeShowTooltip","handleShowTooltip","handleBeforeHideTooltip","onFocusAfterTrapped","popperRef","_component_el_button_group","_openBlock","class","_createVNode","effect","placement","disabled","transition","teleported","pure","persistent","onBeforeShow","onShow","onBeforeHide","content","tag","default","loop","onCurrentTabIdChange","onEntryFocus","_","splitButton","fn","_withCtx","tabindex","key","size","type","onClick","_renderSlot"],"sources":["../../../../../../packages/components/dropdown/src/dropdown.vue"],"sourcesContent":["<template>\n  <div :class=\"[ns.b(), ns.is('disabled', disabled)]\">\n    <el-tooltip\n      ref=\"popperRef\"\n      :role=\"role\"\n      :effect=\"effect\"\n      :fallback-placements=\"['bottom', 'top']\"\n      :popper-options=\"popperOptions\"\n      :gpu-acceleration=\"false\"\n      :hide-after=\"trigger === 'hover' ? hideTimeout : 0\"\n      :manual-mode=\"true\"\n      :placement=\"placement\"\n      :popper-class=\"[ns.e('popper'), popperClass]\"\n      :reference-element=\"referenceElementRef?.$el\"\n      :trigger=\"trigger\"\n      :trigger-keys=\"triggerKeys\"\n      :trigger-target-el=\"contentRef\"\n      :show-after=\"trigger === 'hover' ? showTimeout : 0\"\n      :stop-popper-mouse-event=\"false\"\n      :virtual-ref=\"triggeringElementRef\"\n      :virtual-triggering=\"splitButton\"\n      :disabled=\"disabled\"\n      :transition=\"`${ns.namespace.value}-zoom-in-top`\"\n      :teleported=\"teleported\"\n      pure\n      persistent\n      @before-show=\"handleBeforeShowTooltip\"\n      @show=\"handleShowTooltip\"\n      @before-hide=\"handleBeforeHideTooltip\"\n    >\n      <template #content>\n        <el-scrollbar\n          ref=\"scrollbar\"\n          :wrap-style=\"wrapStyle\"\n          tag=\"div\"\n          :view-class=\"ns.e('list')\"\n        >\n          <el-roving-focus-group\n            :loop=\"loop\"\n            :current-tab-id=\"currentTabId\"\n            orientation=\"horizontal\"\n            @current-tab-id-change=\"handleCurrentTabIdChange\"\n            @entry-focus=\"handleEntryFocus\"\n          >\n            <el-dropdown-collection>\n              <slot name=\"dropdown\" />\n            </el-dropdown-collection>\n          </el-roving-focus-group>\n        </el-scrollbar>\n      </template>\n      <template v-if=\"!splitButton\" #default>\n        <el-only-child :id=\"triggerId\" role=\"button\" :tabindex=\"tabindex\">\n          <slot name=\"default\" />\n        </el-only-child>\n      </template>\n    </el-tooltip>\n    <template v-if=\"splitButton\">\n      <el-button-group>\n        <el-button\n          ref=\"referenceElementRef\"\n          v-bind=\"buttonProps\"\n          :size=\"dropdownSize\"\n          :type=\"type\"\n          :disabled=\"disabled\"\n          :tabindex=\"tabindex\"\n          @click=\"handlerMainButtonClick\"\n        >\n          <slot name=\"default\" />\n        </el-button>\n        <el-button\n          :id=\"triggerId\"\n          ref=\"triggeringElementRef\"\n          v-bind=\"buttonProps\"\n          role=\"button\"\n          :size=\"dropdownSize\"\n          :type=\"type\"\n          :class=\"ns.e('caret-button')\"\n          :disabled=\"disabled\"\n          :tabindex=\"tabindex\"\n          :aria-label=\"t('el.dropdown.toggleDropdown')\"\n        >\n          <el-icon :class=\"ns.e('icon')\"><arrow-down /></el-icon>\n        </el-button>\n      </el-button-group>\n    </template>\n  </div>\n</template>\n<script lang=\"ts\">\n// @ts-nocheck\nimport {\n  computed,\n  defineComponent,\n  getCurrentInstance,\n  provide,\n  ref,\n  toRef,\n  unref,\n} from 'vue'\nimport ElButton from '@element-plus/components/button'\nimport ElTooltip from '@element-plus/components/tooltip'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport ElIcon from '@element-plus/components/icon'\nimport ElRovingFocusGroup from '@element-plus/components/roving-focus-group'\nimport { ElOnlyChild } from '@element-plus/components/slot'\nimport { addUnit } from '@element-plus/utils'\nimport { ArrowDown } from '@element-plus/icons-vue'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport { useId, useLocale, useNamespace, useSize } from '@element-plus/hooks'\nimport { ElCollection as ElDropdownCollection, dropdownProps } from './dropdown'\nimport { DROPDOWN_INJECTION_KEY } from './tokens'\n\nimport type { CSSProperties } from 'vue'\n\nconst { ButtonGroup: ElButtonGroup } = ElButton\n\nexport default defineComponent({\n  name: 'ElDropdown',\n  components: {\n    ElButton,\n    ElButtonGroup,\n    ElScrollbar,\n    ElDropdownCollection,\n    ElTooltip,\n    ElRovingFocusGroup,\n    ElOnlyChild,\n    ElIcon,\n    ArrowDown,\n  },\n  props: dropdownProps,\n  emits: ['visible-change', 'click', 'command'],\n  setup(props, { emit }) {\n    const _instance = getCurrentInstance()\n    const ns = useNamespace('dropdown')\n    const { t } = useLocale()\n\n    const triggeringElementRef = ref()\n    const referenceElementRef = ref()\n    const popperRef = ref<InstanceType<typeof ElTooltip> | null>(null)\n    const contentRef = ref<HTMLElement | null>(null)\n    const scrollbar = ref(null)\n    const currentTabId = ref<string | null>(null)\n    const isUsingKeyboard = ref(false)\n    const triggerKeys = [EVENT_CODE.enter, EVENT_CODE.space, EVENT_CODE.down]\n\n    const wrapStyle = computed<CSSProperties>(() => ({\n      maxHeight: addUnit(props.maxHeight),\n    }))\n    const dropdownTriggerKls = computed(() => [ns.m(dropdownSize.value)])\n\n    const defaultTriggerId = useId().value\n    const triggerId = computed<string>(() => {\n      return props.id || defaultTriggerId\n    })\n\n    function handleClick() {\n      handleClose()\n    }\n\n    function handleClose() {\n      popperRef.value?.onClose()\n    }\n\n    function handleOpen() {\n      popperRef.value?.onOpen()\n    }\n\n    const dropdownSize = useSize()\n\n    function commandHandler(...args: any[]) {\n      emit('command', ...args)\n    }\n\n    function onItemEnter() {\n      // NOOP for now\n    }\n\n    function onItemLeave() {\n      const contentEl = unref(contentRef)\n\n      contentEl?.focus()\n      currentTabId.value = null\n    }\n\n    function handleCurrentTabIdChange(id: string) {\n      currentTabId.value = id\n    }\n\n    function handleEntryFocus(e: Event) {\n      if (!isUsingKeyboard.value) {\n        e.preventDefault()\n        e.stopImmediatePropagation()\n      }\n    }\n\n    function handleBeforeShowTooltip() {\n      emit('visible-change', true)\n    }\n\n    function handleShowTooltip(event?: Event) {\n      if (event?.type === 'keydown') {\n        contentRef.value.focus()\n      }\n    }\n\n    function handleBeforeHideTooltip() {\n      emit('visible-change', false)\n    }\n\n    provide(DROPDOWN_INJECTION_KEY, {\n      contentRef,\n      role: computed(() => props.role),\n      triggerId,\n      isUsingKeyboard,\n      onItemEnter,\n      onItemLeave,\n    })\n\n    provide('elDropdown', {\n      instance: _instance,\n      dropdownSize,\n      handleClick,\n      commandHandler,\n      trigger: toRef(props, 'trigger'),\n      hideOnClick: toRef(props, 'hideOnClick'),\n    })\n\n    const onFocusAfterTrapped = (e: Event) => {\n      e.preventDefault()\n      contentRef.value?.focus?.({\n        preventScroll: true,\n      })\n    }\n\n    const handlerMainButtonClick = (event: MouseEvent) => {\n      emit('click', event)\n    }\n\n    return {\n      t,\n      ns,\n      scrollbar,\n      wrapStyle,\n      dropdownTriggerKls,\n      dropdownSize,\n      triggerId,\n      triggerKeys,\n      currentTabId,\n      handleCurrentTabIdChange,\n      handlerMainButtonClick,\n      handleEntryFocus,\n      handleClose,\n      handleOpen,\n      handleBeforeShowTooltip,\n      handleShowTooltip,\n      handleBeforeHideTooltip,\n      onFocusAfterTrapped,\n      popperRef,\n      contentRef,\n      triggeringElementRef,\n      referenceElementRef,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}