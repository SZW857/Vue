{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar lodashUnified = require('lodash-unified');\nvar core = require('@vueuse/core');\nrequire('../../../../hooks/index.js');\nvar index$5 = require('../../../input/index.js');\nvar index$6 = require('../../../icon/index.js');\nvar index$4 = require('../../../tooltip/index.js');\nrequire('../../../../utils/index.js');\nrequire('../../../../constants/index.js');\nvar iconsVue = require('@element-plus/icons-vue');\nvar utils = require('../utils.js');\nvar props = require('./props.js');\nvar pluginVue_exportHelper = require('../../../../_virtual/plugin-vue_export-helper.js');\nvar index = require('../../../../hooks/use-locale/index.js');\nvar index$1 = require('../../../../hooks/use-namespace/index.js');\nvar index$2 = require('../../../../hooks/use-form-item/index.js');\nvar error = require('../../../../utils/error.js');\nvar shared = require('@vue/shared');\nvar aria = require('../../../../constants/aria.js');\nvar index$3 = require('../../../../hooks/use-common-props/index.js');\nconst _hoisted_1 = [\"id\", \"name\", \"placeholder\", \"value\", \"disabled\", \"readonly\"];\nconst _hoisted_2 = [\"id\", \"name\", \"placeholder\", \"value\", \"disabled\", \"readonly\"];\nconst __default__ = vue.defineComponent({\n  name: \"Picker\"\n});\nconst _sfc_main = /* @__PURE__ */vue.defineComponent({\n  ...__default__,\n  props: props.timePickerDefaultProps,\n  emits: [\"update:modelValue\", \"change\", \"focus\", \"blur\", \"calendar-change\", \"panel-change\", \"visible-change\", \"keydown\"],\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const {\n      lang\n    } = index.useLocale();\n    const nsDate = index$1.useNamespace(\"date\");\n    const nsInput = index$1.useNamespace(\"input\");\n    const nsRange = index$1.useNamespace(\"range\");\n    const {\n      form,\n      formItem\n    } = index$2.useFormItem();\n    const elPopperOptions = vue.inject(\"ElPopperOptions\", {});\n    const refPopper = vue.ref();\n    const inputRef = vue.ref();\n    const pickerVisible = vue.ref(false);\n    const pickerActualVisible = vue.ref(false);\n    const valueOnOpen = vue.ref(null);\n    let hasJustTabExitedInput = false;\n    let ignoreFocusEvent = false;\n    vue.watch(pickerVisible, val => {\n      if (!val) {\n        userInput.value = null;\n        vue.nextTick(() => {\n          emitChange(props.modelValue);\n        });\n      } else {\n        vue.nextTick(() => {\n          if (val) {\n            valueOnOpen.value = props.modelValue;\n          }\n        });\n      }\n    });\n    const emitChange = (val, isClear) => {\n      if (isClear || !utils.valueEquals(val, valueOnOpen.value)) {\n        emit(\"change\", val);\n        props.validateEvent && (formItem == null ? void 0 : formItem.validate(\"change\").catch(err => error.debugWarn(err)));\n      }\n    };\n    const emitInput = input => {\n      if (!utils.valueEquals(props.modelValue, input)) {\n        let formatted;\n        if (shared.isArray(input)) {\n          formatted = input.map(item => utils.formatter(item, props.valueFormat, lang.value));\n        } else if (input) {\n          formatted = utils.formatter(input, props.valueFormat, lang.value);\n        }\n        emit(\"update:modelValue\", input ? formatted : input, lang.value);\n      }\n    };\n    const emitKeydown = e => {\n      emit(\"keydown\", e);\n    };\n    const refInput = vue.computed(() => {\n      if (inputRef.value) {\n        const _r = isRangeInput.value ? inputRef.value : inputRef.value.$el;\n        return Array.from(_r.querySelectorAll(\"input\"));\n      }\n      return [];\n    });\n    const setSelectionRange = (start, end, pos) => {\n      const _inputs = refInput.value;\n      if (!_inputs.length) return;\n      if (!pos || pos === \"min\") {\n        _inputs[0].setSelectionRange(start, end);\n        _inputs[0].focus();\n      } else if (pos === \"max\") {\n        _inputs[1].setSelectionRange(start, end);\n        _inputs[1].focus();\n      }\n    };\n    const focusOnInputBox = () => {\n      focus(true, true);\n      vue.nextTick(() => {\n        ignoreFocusEvent = false;\n      });\n    };\n    const onPick = (date = \"\", visible = false) => {\n      if (!visible) {\n        ignoreFocusEvent = true;\n      }\n      pickerVisible.value = visible;\n      let result;\n      if (shared.isArray(date)) {\n        result = date.map(_ => _.toDate());\n      } else {\n        result = date ? date.toDate() : date;\n      }\n      userInput.value = null;\n      emitInput(result);\n    };\n    const onBeforeShow = () => {\n      pickerActualVisible.value = true;\n    };\n    const onShow = () => {\n      emit(\"visible-change\", true);\n    };\n    const onKeydownPopperContent = event => {\n      if ((event == null ? void 0 : event.key) === aria.EVENT_CODE.esc) {\n        focus(true, true);\n      }\n    };\n    const onHide = () => {\n      pickerActualVisible.value = false;\n      pickerVisible.value = false;\n      ignoreFocusEvent = false;\n      emit(\"visible-change\", false);\n    };\n    const handleOpen = () => {\n      pickerVisible.value = true;\n    };\n    const handleClose = () => {\n      pickerVisible.value = false;\n    };\n    const focus = (focusStartInput = true, isIgnoreFocusEvent = false) => {\n      ignoreFocusEvent = isIgnoreFocusEvent;\n      const [leftInput, rightInput] = vue.unref(refInput);\n      let input = leftInput;\n      if (!focusStartInput && isRangeInput.value) {\n        input = rightInput;\n      }\n      if (input) {\n        input.focus();\n      }\n    };\n    const handleFocusInput = e => {\n      if (props.readonly || pickerDisabled.value || pickerVisible.value || ignoreFocusEvent) {\n        return;\n      }\n      pickerVisible.value = true;\n      emit(\"focus\", e);\n    };\n    let currentHandleBlurDeferCallback = void 0;\n    const handleBlurInput = e => {\n      const handleBlurDefer = async () => {\n        setTimeout(() => {\n          var _a;\n          if (currentHandleBlurDeferCallback === handleBlurDefer) {\n            if (!(((_a = refPopper.value) == null ? void 0 : _a.isFocusInsideContent()) && !hasJustTabExitedInput) && refInput.value.filter(input => {\n              return input.contains(document.activeElement);\n            }).length === 0) {\n              handleChange();\n              pickerVisible.value = false;\n              emit(\"blur\", e);\n              props.validateEvent && (formItem == null ? void 0 : formItem.validate(\"blur\").catch(err => error.debugWarn(err)));\n            }\n            hasJustTabExitedInput = false;\n          }\n        }, 0);\n      };\n      currentHandleBlurDeferCallback = handleBlurDefer;\n      handleBlurDefer();\n    };\n    const pickerDisabled = vue.computed(() => {\n      return props.disabled || (form == null ? void 0 : form.disabled);\n    });\n    const parsedValue = vue.computed(() => {\n      let dayOrDays;\n      if (valueIsEmpty.value) {\n        if (pickerOptions.value.getDefaultValue) {\n          dayOrDays = pickerOptions.value.getDefaultValue();\n        }\n      } else {\n        if (shared.isArray(props.modelValue)) {\n          dayOrDays = props.modelValue.map(d => utils.parseDate(d, props.valueFormat, lang.value));\n        } else {\n          dayOrDays = utils.parseDate(props.modelValue, props.valueFormat, lang.value);\n        }\n      }\n      if (pickerOptions.value.getRangeAvailableTime) {\n        const availableResult = pickerOptions.value.getRangeAvailableTime(dayOrDays);\n        if (!lodashUnified.isEqual(availableResult, dayOrDays)) {\n          dayOrDays = availableResult;\n          emitInput(shared.isArray(dayOrDays) ? dayOrDays.map(_ => _.toDate()) : dayOrDays.toDate());\n        }\n      }\n      if (shared.isArray(dayOrDays) && dayOrDays.some(day => !day)) {\n        dayOrDays = [];\n      }\n      return dayOrDays;\n    });\n    const displayValue = vue.computed(() => {\n      if (!pickerOptions.value.panelReady) return \"\";\n      const formattedValue = formatDayjsToString(parsedValue.value);\n      if (shared.isArray(userInput.value)) {\n        return [userInput.value[0] || formattedValue && formattedValue[0] || \"\", userInput.value[1] || formattedValue && formattedValue[1] || \"\"];\n      } else if (userInput.value !== null) {\n        return userInput.value;\n      }\n      if (!isTimePicker.value && valueIsEmpty.value) return \"\";\n      if (!pickerVisible.value && valueIsEmpty.value) return \"\";\n      if (formattedValue) {\n        return isDatesPicker.value ? formattedValue.join(\", \") : formattedValue;\n      }\n      return \"\";\n    });\n    const isTimeLikePicker = vue.computed(() => props.type.includes(\"time\"));\n    const isTimePicker = vue.computed(() => props.type.startsWith(\"time\"));\n    const isDatesPicker = vue.computed(() => props.type === \"dates\");\n    const triggerIcon = vue.computed(() => props.prefixIcon || (isTimeLikePicker.value ? iconsVue.Clock : iconsVue.Calendar));\n    const showClose = vue.ref(false);\n    const onClearIconClick = event => {\n      if (props.readonly || pickerDisabled.value) return;\n      if (showClose.value) {\n        event.stopPropagation();\n        focusOnInputBox();\n        emitInput(null);\n        emitChange(null, true);\n        showClose.value = false;\n        pickerVisible.value = false;\n        pickerOptions.value.handleClear && pickerOptions.value.handleClear();\n      }\n    };\n    const valueIsEmpty = vue.computed(() => {\n      const {\n        modelValue\n      } = props;\n      return !modelValue || shared.isArray(modelValue) && !modelValue.filter(Boolean).length;\n    });\n    const onMouseDownInput = async event => {\n      var _a;\n      if (props.readonly || pickerDisabled.value) return;\n      if (((_a = event.target) == null ? void 0 : _a.tagName) !== \"INPUT\" || refInput.value.includes(document.activeElement)) {\n        pickerVisible.value = true;\n      }\n    };\n    const onMouseEnter = () => {\n      if (props.readonly || pickerDisabled.value) return;\n      if (!valueIsEmpty.value && props.clearable) {\n        showClose.value = true;\n      }\n    };\n    const onMouseLeave = () => {\n      showClose.value = false;\n    };\n    const onTouchStartInput = event => {\n      var _a;\n      if (props.readonly || pickerDisabled.value) return;\n      if (((_a = event.touches[0].target) == null ? void 0 : _a.tagName) !== \"INPUT\" || refInput.value.includes(document.activeElement)) {\n        pickerVisible.value = true;\n      }\n    };\n    const isRangeInput = vue.computed(() => {\n      return props.type.includes(\"range\");\n    });\n    const pickerSize = index$3.useSize();\n    const popperEl = vue.computed(() => {\n      var _a, _b;\n      return (_b = (_a = vue.unref(refPopper)) == null ? void 0 : _a.popperRef) == null ? void 0 : _b.contentRef;\n    });\n    const actualInputRef = vue.computed(() => {\n      var _a;\n      if (vue.unref(isRangeInput)) {\n        return vue.unref(inputRef);\n      }\n      return (_a = vue.unref(inputRef)) == null ? void 0 : _a.$el;\n    });\n    core.onClickOutside(actualInputRef, e => {\n      const unrefedPopperEl = vue.unref(popperEl);\n      const inputEl = vue.unref(actualInputRef);\n      if (unrefedPopperEl && (e.target === unrefedPopperEl || e.composedPath().includes(unrefedPopperEl)) || e.target === inputEl || e.composedPath().includes(inputEl)) return;\n      pickerVisible.value = false;\n    });\n    const userInput = vue.ref(null);\n    const handleChange = () => {\n      if (userInput.value) {\n        const value = parseUserInputToDayjs(displayValue.value);\n        if (value) {\n          if (isValidValue(value)) {\n            emitInput(shared.isArray(value) ? value.map(_ => _.toDate()) : value.toDate());\n            userInput.value = null;\n          }\n        }\n      }\n      if (userInput.value === \"\") {\n        emitInput(null);\n        emitChange(null);\n        userInput.value = null;\n      }\n    };\n    const parseUserInputToDayjs = value => {\n      if (!value) return null;\n      return pickerOptions.value.parseUserInput(value);\n    };\n    const formatDayjsToString = value => {\n      if (!value) return null;\n      return pickerOptions.value.formatToString(value);\n    };\n    const isValidValue = value => {\n      return pickerOptions.value.isValidValue(value);\n    };\n    const handleKeydownInput = async event => {\n      if (props.readonly || pickerDisabled.value) return;\n      const {\n        code\n      } = event;\n      emitKeydown(event);\n      if (code === aria.EVENT_CODE.esc) {\n        if (pickerVisible.value === true) {\n          pickerVisible.value = false;\n          event.preventDefault();\n          event.stopPropagation();\n        }\n        return;\n      }\n      if (code === aria.EVENT_CODE.down) {\n        if (pickerOptions.value.handleFocusPicker) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n        if (pickerVisible.value === false) {\n          pickerVisible.value = true;\n          await vue.nextTick();\n        }\n        if (pickerOptions.value.handleFocusPicker) {\n          pickerOptions.value.handleFocusPicker();\n          return;\n        }\n      }\n      if (code === aria.EVENT_CODE.tab) {\n        hasJustTabExitedInput = true;\n        return;\n      }\n      if (code === aria.EVENT_CODE.enter || code === aria.EVENT_CODE.numpadEnter) {\n        if (userInput.value === null || userInput.value === \"\" || isValidValue(parseUserInputToDayjs(displayValue.value))) {\n          handleChange();\n          pickerVisible.value = false;\n        }\n        event.stopPropagation();\n        return;\n      }\n      if (userInput.value) {\n        event.stopPropagation();\n        return;\n      }\n      if (pickerOptions.value.handleKeydownInput) {\n        pickerOptions.value.handleKeydownInput(event);\n      }\n    };\n    const onUserInput = e => {\n      userInput.value = e;\n      if (!pickerVisible.value) {\n        pickerVisible.value = true;\n      }\n    };\n    const handleStartInput = event => {\n      const target = event.target;\n      if (userInput.value) {\n        userInput.value = [target.value, userInput.value[1]];\n      } else {\n        userInput.value = [target.value, null];\n      }\n    };\n    const handleEndInput = event => {\n      const target = event.target;\n      if (userInput.value) {\n        userInput.value = [userInput.value[0], target.value];\n      } else {\n        userInput.value = [null, target.value];\n      }\n    };\n    const handleStartChange = () => {\n      var _a;\n      const values = userInput.value;\n      const value = parseUserInputToDayjs(values && values[0]);\n      const parsedVal = vue.unref(parsedValue);\n      if (value && value.isValid()) {\n        userInput.value = [formatDayjsToString(value), ((_a = displayValue.value) == null ? void 0 : _a[1]) || null];\n        const newValue = [value, parsedVal && (parsedVal[1] || null)];\n        if (isValidValue(newValue)) {\n          emitInput(newValue);\n          userInput.value = null;\n        }\n      }\n    };\n    const handleEndChange = () => {\n      var _a;\n      const values = vue.unref(userInput);\n      const value = parseUserInputToDayjs(values && values[1]);\n      const parsedVal = vue.unref(parsedValue);\n      if (value && value.isValid()) {\n        userInput.value = [((_a = vue.unref(displayValue)) == null ? void 0 : _a[0]) || null, formatDayjsToString(value)];\n        const newValue = [parsedVal && parsedVal[0], value];\n        if (isValidValue(newValue)) {\n          emitInput(newValue);\n          userInput.value = null;\n        }\n      }\n    };\n    const pickerOptions = vue.ref({});\n    const onSetPickerOption = e => {\n      pickerOptions.value[e[0]] = e[1];\n      pickerOptions.value.panelReady = true;\n    };\n    const onCalendarChange = e => {\n      emit(\"calendar-change\", e);\n    };\n    const onPanelChange = (value, mode, view) => {\n      emit(\"panel-change\", value, mode, view);\n    };\n    vue.provide(\"EP_PICKER_BASE\", {\n      props\n    });\n    expose({\n      focus,\n      handleFocusInput,\n      handleBlurInput,\n      handleOpen,\n      handleClose,\n      onPick\n    });\n    return (_ctx, _cache) => {\n      return vue.openBlock(), vue.createBlock(vue.unref(index$4.ElTooltip), vue.mergeProps({\n        ref_key: \"refPopper\",\n        ref: refPopper,\n        visible: pickerVisible.value,\n        effect: \"light\",\n        pure: \"\",\n        trigger: \"click\"\n      }, _ctx.$attrs, {\n        role: \"dialog\",\n        teleported: \"\",\n        transition: `${vue.unref(nsDate).namespace.value}-zoom-in-top`,\n        \"popper-class\": [`${vue.unref(nsDate).namespace.value}-picker__popper`, _ctx.popperClass],\n        \"popper-options\": vue.unref(elPopperOptions),\n        \"fallback-placements\": [\"bottom\", \"top\", \"right\", \"left\"],\n        \"gpu-acceleration\": false,\n        \"stop-popper-mouse-event\": false,\n        \"hide-after\": 0,\n        persistent: \"\",\n        onBeforeShow,\n        onShow,\n        onHide\n      }), {\n        default: vue.withCtx(() => [!vue.unref(isRangeInput) ? (vue.openBlock(), vue.createBlock(vue.unref(index$5.ElInput), {\n          key: 0,\n          id: _ctx.id,\n          ref_key: \"inputRef\",\n          ref: inputRef,\n          \"container-role\": \"combobox\",\n          \"model-value\": vue.unref(displayValue),\n          name: _ctx.name,\n          size: vue.unref(pickerSize),\n          disabled: vue.unref(pickerDisabled),\n          placeholder: _ctx.placeholder,\n          class: vue.normalizeClass([vue.unref(nsDate).b(\"editor\"), vue.unref(nsDate).bm(\"editor\", _ctx.type), _ctx.$attrs.class]),\n          style: vue.normalizeStyle(_ctx.$attrs.style),\n          readonly: !_ctx.editable || _ctx.readonly || vue.unref(isDatesPicker) || _ctx.type === \"week\",\n          label: _ctx.label,\n          tabindex: _ctx.tabindex,\n          \"validate-event\": false,\n          onInput: onUserInput,\n          onFocus: handleFocusInput,\n          onBlur: handleBlurInput,\n          onKeydown: handleKeydownInput,\n          onChange: handleChange,\n          onMousedown: onMouseDownInput,\n          onMouseenter: onMouseEnter,\n          onMouseleave: onMouseLeave,\n          onTouchstart: onTouchStartInput,\n          onClick: _cache[0] || (_cache[0] = vue.withModifiers(() => {}, [\"stop\"]))\n        }, {\n          prefix: vue.withCtx(() => [vue.unref(triggerIcon) ? (vue.openBlock(), vue.createBlock(vue.unref(index$6.ElIcon), {\n            key: 0,\n            class: vue.normalizeClass(vue.unref(nsInput).e(\"icon\")),\n            onMousedown: vue.withModifiers(onMouseDownInput, [\"prevent\"]),\n            onTouchstart: onTouchStartInput\n          }, {\n            default: vue.withCtx(() => [(vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(vue.unref(triggerIcon))))]),\n            _: 1\n          }, 8, [\"class\", \"onMousedown\"])) : vue.createCommentVNode(\"v-if\", true)]),\n          suffix: vue.withCtx(() => [showClose.value && _ctx.clearIcon ? (vue.openBlock(), vue.createBlock(vue.unref(index$6.ElIcon), {\n            key: 0,\n            class: vue.normalizeClass(`${vue.unref(nsInput).e(\"icon\")} clear-icon`),\n            onClick: vue.withModifiers(onClearIconClick, [\"stop\"])\n          }, {\n            default: vue.withCtx(() => [(vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.clearIcon)))]),\n            _: 1\n          }, 8, [\"class\", \"onClick\"])) : vue.createCommentVNode(\"v-if\", true)]),\n          _: 1\n        }, 8, [\"id\", \"model-value\", \"name\", \"size\", \"disabled\", \"placeholder\", \"class\", \"style\", \"readonly\", \"label\", \"tabindex\", \"onKeydown\"])) : (vue.openBlock(), vue.createElementBlock(\"div\", {\n          key: 1,\n          ref_key: \"inputRef\",\n          ref: inputRef,\n          class: vue.normalizeClass([vue.unref(nsDate).b(\"editor\"), vue.unref(nsDate).bm(\"editor\", _ctx.type), vue.unref(nsInput).e(\"wrapper\"), vue.unref(nsDate).is(\"disabled\", vue.unref(pickerDisabled)), vue.unref(nsDate).is(\"active\", pickerVisible.value), vue.unref(nsRange).b(\"editor\"), vue.unref(pickerSize) ? vue.unref(nsRange).bm(\"editor\", vue.unref(pickerSize)) : \"\", _ctx.$attrs.class]),\n          style: vue.normalizeStyle(_ctx.$attrs.style),\n          onClick: handleFocusInput,\n          onMouseenter: onMouseEnter,\n          onMouseleave: onMouseLeave,\n          onTouchstart: onTouchStartInput,\n          onKeydown: handleKeydownInput\n        }, [vue.unref(triggerIcon) ? (vue.openBlock(), vue.createBlock(vue.unref(index$6.ElIcon), {\n          key: 0,\n          class: vue.normalizeClass([vue.unref(nsInput).e(\"icon\"), vue.unref(nsRange).e(\"icon\")]),\n          onMousedown: vue.withModifiers(onMouseDownInput, [\"prevent\"]),\n          onTouchstart: onTouchStartInput\n        }, {\n          default: vue.withCtx(() => [(vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(vue.unref(triggerIcon))))]),\n          _: 1\n        }, 8, [\"class\", \"onMousedown\"])) : vue.createCommentVNode(\"v-if\", true), vue.createElementVNode(\"input\", {\n          id: _ctx.id && _ctx.id[0],\n          autocomplete: \"off\",\n          name: _ctx.name && _ctx.name[0],\n          placeholder: _ctx.startPlaceholder,\n          value: vue.unref(displayValue) && vue.unref(displayValue)[0],\n          disabled: vue.unref(pickerDisabled),\n          readonly: !_ctx.editable || _ctx.readonly,\n          class: vue.normalizeClass(vue.unref(nsRange).b(\"input\")),\n          onMousedown: onMouseDownInput,\n          onInput: handleStartInput,\n          onChange: handleStartChange,\n          onFocus: handleFocusInput,\n          onBlur: handleBlurInput\n        }, null, 42, _hoisted_1), vue.renderSlot(_ctx.$slots, \"range-separator\", {}, () => [vue.createElementVNode(\"span\", {\n          class: vue.normalizeClass(vue.unref(nsRange).b(\"separator\"))\n        }, vue.toDisplayString(_ctx.rangeSeparator), 3)]), vue.createElementVNode(\"input\", {\n          id: _ctx.id && _ctx.id[1],\n          autocomplete: \"off\",\n          name: _ctx.name && _ctx.name[1],\n          placeholder: _ctx.endPlaceholder,\n          value: vue.unref(displayValue) && vue.unref(displayValue)[1],\n          disabled: vue.unref(pickerDisabled),\n          readonly: !_ctx.editable || _ctx.readonly,\n          class: vue.normalizeClass(vue.unref(nsRange).b(\"input\")),\n          onMousedown: onMouseDownInput,\n          onFocus: handleFocusInput,\n          onBlur: handleBlurInput,\n          onInput: handleEndInput,\n          onChange: handleEndChange\n        }, null, 42, _hoisted_2), _ctx.clearIcon ? (vue.openBlock(), vue.createBlock(vue.unref(index$6.ElIcon), {\n          key: 1,\n          class: vue.normalizeClass([vue.unref(nsInput).e(\"icon\"), vue.unref(nsRange).e(\"close-icon\"), {\n            [vue.unref(nsRange).e(\"close-icon--hidden\")]: !showClose.value\n          }]),\n          onClick: onClearIconClick\n        }, {\n          default: vue.withCtx(() => [(vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.clearIcon)))]),\n          _: 1\n        }, 8, [\"class\"])) : vue.createCommentVNode(\"v-if\", true)], 38))]),\n        content: vue.withCtx(() => [vue.renderSlot(_ctx.$slots, \"default\", {\n          visible: pickerVisible.value,\n          actualVisible: pickerActualVisible.value,\n          parsedValue: vue.unref(parsedValue),\n          format: _ctx.format,\n          unlinkPanels: _ctx.unlinkPanels,\n          type: _ctx.type,\n          defaultValue: _ctx.defaultValue,\n          onPick,\n          onSelectRange: setSelectionRange,\n          onSetPickerOption,\n          onCalendarChange,\n          onPanelChange,\n          onKeydown: onKeydownPopperContent,\n          onMousedown: _cache[1] || (_cache[1] = vue.withModifiers(() => {}, [\"stop\"]))\n        })]),\n        _: 3\n      }, 16, [\"visible\", \"transition\", \"popper-class\", \"popper-options\"]);\n    };\n  }\n});\nvar CommonPicker = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/time-picker/src/common/picker.vue\"]]);\nexports[\"default\"] = CommonPicker;","map":{"version":3,"mappings":"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","names":["name","lang","useLocale","useNamespace","form","formItem","useFormItem","elPopperOptions","refPopper","ref","inputRef","hasJustTabExitedInput","ignoreFocusEvent","watch","val","userInput","value","nextTick","emitChange","props","modelValue","valueOnOpen","isClear","valueEquals","emit","catch","input","formatted","map","item","formatter","e","computed","_r","isRangeInput","Array","setSelectionRange","start","pos","_inputs","refInput","end","focus","focusOnInputBox","onPick","date","visible","pickerVisible","result","_","toDate","emitInput","onBeforeShow","pickerActualVisible","onShow","event","onHide","handleOpen","handleClose","focusStartInput","isIgnoreFocusEvent","leftInput","rightInput","readonly","currentHandleBlurDeferCallback","handleBlurDefer","setTimeout","_a","contains","handleChange","dayOrDays","availableResult","formattedValue","isTimeLikePicker","isTimePicker","showClose","pickerOptions","pickerDisabled","onClickOutside","unref","code","emitKeydown","preventDefault","stopPropagation","EVENT_CODE","target","formatDayjsToString","isValidValue","parseUserInputToDayjs","parsedVal","provide"],"sources":["../../../../../../../packages/components/time-picker/src/common/picker.vue"],"sourcesContent":["<template>\n  <el-tooltip\n    ref=\"refPopper\"\n    :visible=\"pickerVisible\"\n    effect=\"light\"\n    pure\n    trigger=\"click\"\n    v-bind=\"$attrs\"\n    role=\"dialog\"\n    teleported\n    :transition=\"`${nsDate.namespace.value}-zoom-in-top`\"\n    :popper-class=\"[`${nsDate.namespace.value}-picker__popper`, popperClass]\"\n    :popper-options=\"elPopperOptions\"\n    :fallback-placements=\"['bottom', 'top', 'right', 'left']\"\n    :gpu-acceleration=\"false\"\n    :stop-popper-mouse-event=\"false\"\n    :hide-after=\"0\"\n    persistent\n    @before-show=\"onBeforeShow\"\n    @show=\"onShow\"\n    @hide=\"onHide\"\n  >\n    <template #default>\n      <el-input\n        v-if=\"!isRangeInput\"\n        :id=\"(id as string | undefined)\"\n        ref=\"inputRef\"\n        container-role=\"combobox\"\n        :model-value=\"(displayValue as string)\"\n        :name=\"name\"\n        :size=\"pickerSize\"\n        :disabled=\"pickerDisabled\"\n        :placeholder=\"placeholder\"\n        :class=\"[nsDate.b('editor'), nsDate.bm('editor', type), $attrs.class]\"\n        :style=\"$attrs.style\"\n        :readonly=\"!editable || readonly || isDatesPicker || type === 'week'\"\n        :label=\"label\"\n        :tabindex=\"tabindex\"\n        :validate-event=\"false\"\n        @input=\"onUserInput\"\n        @focus=\"handleFocusInput\"\n        @blur=\"handleBlurInput\"\n        @keydown=\"\n          //\n          handleKeydownInput as any\n        \"\n        @change=\"handleChange\"\n        @mousedown=\"onMouseDownInput\"\n        @mouseenter=\"onMouseEnter\"\n        @mouseleave=\"onMouseLeave\"\n        @touchstart=\"onTouchStartInput\"\n        @click.stop\n      >\n        <template #prefix>\n          <el-icon\n            v-if=\"triggerIcon\"\n            :class=\"nsInput.e('icon')\"\n            @mousedown.prevent=\"onMouseDownInput\"\n            @touchstart=\"onTouchStartInput\"\n          >\n            <component :is=\"triggerIcon\" />\n          </el-icon>\n        </template>\n        <template #suffix>\n          <el-icon\n            v-if=\"showClose && clearIcon\"\n            :class=\"`${nsInput.e('icon')} clear-icon`\"\n            @click.stop=\"onClearIconClick\"\n          >\n            <component :is=\"clearIcon\" />\n          </el-icon>\n        </template>\n      </el-input>\n      <div\n        v-else\n        ref=\"inputRef\"\n        :class=\"[\n          nsDate.b('editor'),\n          nsDate.bm('editor', type),\n          nsInput.e('wrapper'),\n          nsDate.is('disabled', pickerDisabled),\n          nsDate.is('active', pickerVisible),\n          nsRange.b('editor'),\n          pickerSize ? nsRange.bm('editor', pickerSize) : '',\n          $attrs.class,\n        ]\"\n        :style=\"($attrs.style as any)\"\n        @click=\"handleFocusInput\"\n        @mouseenter=\"onMouseEnter\"\n        @mouseleave=\"onMouseLeave\"\n        @touchstart=\"onTouchStartInput\"\n        @keydown=\"handleKeydownInput\"\n      >\n        <el-icon\n          v-if=\"triggerIcon\"\n          :class=\"[nsInput.e('icon'), nsRange.e('icon')]\"\n          @mousedown.prevent=\"onMouseDownInput\"\n          @touchstart=\"onTouchStartInput\"\n        >\n          <component :is=\"triggerIcon\" />\n        </el-icon>\n        <input\n          :id=\"id && id[0]\"\n          autocomplete=\"off\"\n          :name=\"name && name[0]\"\n          :placeholder=\"startPlaceholder\"\n          :value=\"displayValue && displayValue[0]\"\n          :disabled=\"pickerDisabled\"\n          :readonly=\"!editable || readonly\"\n          :class=\"nsRange.b('input')\"\n          @mousedown=\"onMouseDownInput\"\n          @input=\"handleStartInput\"\n          @change=\"handleStartChange\"\n          @focus=\"handleFocusInput\"\n          @blur=\"handleBlurInput\"\n        />\n        <slot name=\"range-separator\">\n          <span :class=\"nsRange.b('separator')\">{{ rangeSeparator }}</span>\n        </slot>\n        <input\n          :id=\"id && id[1]\"\n          autocomplete=\"off\"\n          :name=\"name && name[1]\"\n          :placeholder=\"endPlaceholder\"\n          :value=\"displayValue && displayValue[1]\"\n          :disabled=\"pickerDisabled\"\n          :readonly=\"!editable || readonly\"\n          :class=\"nsRange.b('input')\"\n          @mousedown=\"onMouseDownInput\"\n          @focus=\"handleFocusInput\"\n          @blur=\"handleBlurInput\"\n          @input=\"handleEndInput\"\n          @change=\"handleEndChange\"\n        />\n        <el-icon\n          v-if=\"clearIcon\"\n          :class=\"[\n            nsInput.e('icon'),\n            nsRange.e('close-icon'),\n            {\n              [nsRange.e('close-icon--hidden')]: !showClose,\n            },\n          ]\"\n          @click=\"onClearIconClick\"\n        >\n          <component :is=\"clearIcon\" />\n        </el-icon>\n      </div>\n    </template>\n    <template #content>\n      <slot\n        :visible=\"pickerVisible\"\n        :actual-visible=\"pickerActualVisible\"\n        :parsed-value=\"parsedValue\"\n        :format=\"format\"\n        :unlink-panels=\"unlinkPanels\"\n        :type=\"type\"\n        :default-value=\"defaultValue\"\n        @pick=\"onPick\"\n        @select-range=\"setSelectionRange\"\n        @set-picker-option=\"onSetPickerOption\"\n        @calendar-change=\"onCalendarChange\"\n        @panel-change=\"onPanelChange\"\n        @keydown=\"onKeydownPopperContent\"\n        @mousedown.stop\n      />\n    </template>\n  </el-tooltip>\n</template>\n<script lang=\"ts\" setup>\nimport { computed, inject, nextTick, provide, ref, unref, watch } from 'vue'\nimport { isEqual } from 'lodash-unified'\nimport { onClickOutside } from '@vueuse/core'\nimport {\n  useFormItem,\n  useLocale,\n  useNamespace,\n  useSize,\n} from '@element-plus/hooks'\nimport ElInput from '@element-plus/components/input'\nimport ElIcon from '@element-plus/components/icon'\nimport ElTooltip from '@element-plus/components/tooltip'\nimport { debugWarn, isArray } from '@element-plus/utils'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport { Calendar, Clock } from '@element-plus/icons-vue'\nimport { formatter, parseDate, valueEquals } from '../utils'\nimport { timePickerDefaultProps } from './props'\n\nimport type { Dayjs } from 'dayjs'\nimport type { ComponentPublicInstance } from 'vue'\nimport type { Options } from '@popperjs/core'\nimport type {\n  DateModelType,\n  DateOrDates,\n  DayOrDays,\n  PickerOptions,\n  SingleOrRange,\n  TimePickerDefaultProps,\n  UserInput,\n} from './props'\nimport type { TooltipInstance } from '@element-plus/components/tooltip'\n\n// Date object and string\n\ndefineOptions({\n  name: 'Picker',\n})\n\nconst props = defineProps(timePickerDefaultProps)\nconst emit = defineEmits([\n  'update:modelValue',\n  'change',\n  'focus',\n  'blur',\n  'calendar-change',\n  'panel-change',\n  'visible-change',\n  'keydown',\n])\n\nconst { lang } = useLocale()\n\nconst nsDate = useNamespace('date')\nconst nsInput = useNamespace('input')\nconst nsRange = useNamespace('range')\n\nconst { form, formItem } = useFormItem()\nconst elPopperOptions = inject('ElPopperOptions', {} as Options)\n\nconst refPopper = ref<TooltipInstance>()\nconst inputRef = ref<HTMLElement | ComponentPublicInstance>()\nconst pickerVisible = ref(false)\nconst pickerActualVisible = ref(false)\nconst valueOnOpen = ref<TimePickerDefaultProps['modelValue'] | null>(null)\n\nlet hasJustTabExitedInput = false\nlet ignoreFocusEvent = false\n\nwatch(pickerVisible, (val) => {\n  if (!val) {\n    userInput.value = null\n    nextTick(() => {\n      emitChange(props.modelValue)\n    })\n  } else {\n    nextTick(() => {\n      if (val) {\n        valueOnOpen.value = props.modelValue\n      }\n    })\n  }\n})\nconst emitChange = (\n  val: TimePickerDefaultProps['modelValue'] | null,\n  isClear?: boolean\n) => {\n  // determine user real change only\n  if (isClear || !valueEquals(val, valueOnOpen.value)) {\n    emit('change', val)\n    props.validateEvent &&\n      formItem?.validate('change').catch((err) => debugWarn(err))\n  }\n}\nconst emitInput = (input: SingleOrRange<DateModelType | Dayjs> | null) => {\n  if (!valueEquals(props.modelValue, input)) {\n    let formatted\n    if (isArray(input)) {\n      formatted = input.map((item) =>\n        formatter(item, props.valueFormat, lang.value)\n      )\n    } else if (input) {\n      formatted = formatter(input, props.valueFormat, lang.value)\n    }\n    emit('update:modelValue', input ? formatted : input, lang.value)\n  }\n}\nconst emitKeydown = (e: KeyboardEvent) => {\n  emit('keydown', e)\n}\n\nconst refInput = computed<HTMLInputElement[]>(() => {\n  if (inputRef.value) {\n    const _r = isRangeInput.value\n      ? inputRef.value\n      : (inputRef.value as any as ComponentPublicInstance).$el\n    return Array.from<HTMLInputElement>(_r.querySelectorAll('input'))\n  }\n  return []\n})\n\nconst setSelectionRange = (start: number, end: number, pos?: 'min' | 'max') => {\n  const _inputs = refInput.value\n  if (!_inputs.length) return\n  if (!pos || pos === 'min') {\n    _inputs[0].setSelectionRange(start, end)\n    _inputs[0].focus()\n  } else if (pos === 'max') {\n    _inputs[1].setSelectionRange(start, end)\n    _inputs[1].focus()\n  }\n}\nconst focusOnInputBox = () => {\n  focus(true, true)\n  nextTick(() => {\n    ignoreFocusEvent = false\n  })\n}\n\nconst onPick = (date: any = '', visible = false) => {\n  if (!visible) {\n    ignoreFocusEvent = true\n  }\n  pickerVisible.value = visible\n  let result\n  if (isArray(date)) {\n    result = date.map((_) => _.toDate())\n  } else {\n    // clear btn emit null\n    result = date ? date.toDate() : date\n  }\n  userInput.value = null\n  emitInput(result)\n}\n\nconst onBeforeShow = () => {\n  pickerActualVisible.value = true\n}\n\nconst onShow = () => {\n  emit('visible-change', true)\n}\n\nconst onKeydownPopperContent = (event: KeyboardEvent) => {\n  if ((event as KeyboardEvent)?.key === EVENT_CODE.esc) {\n    focus(true, true)\n  }\n}\n\nconst onHide = () => {\n  pickerActualVisible.value = false\n  pickerVisible.value = false\n  ignoreFocusEvent = false\n  emit('visible-change', false)\n}\n\nconst handleOpen = () => {\n  pickerVisible.value = true\n}\n\nconst handleClose = () => {\n  pickerVisible.value = false\n}\n\nconst focus = (focusStartInput = true, isIgnoreFocusEvent = false) => {\n  ignoreFocusEvent = isIgnoreFocusEvent\n  const [leftInput, rightInput] = unref(refInput)\n  let input = leftInput\n  if (!focusStartInput && isRangeInput.value) {\n    input = rightInput\n  }\n  if (input) {\n    input.focus()\n  }\n}\n\nconst handleFocusInput = (e?: FocusEvent) => {\n  if (\n    props.readonly ||\n    pickerDisabled.value ||\n    pickerVisible.value ||\n    ignoreFocusEvent\n  ) {\n    return\n  }\n  pickerVisible.value = true\n  emit('focus', e)\n}\n\nlet currentHandleBlurDeferCallback:\n  | (() => Promise<void> | undefined)\n  | undefined = undefined\n\n// Check if document.activeElement is inside popper or any input before popper close\nconst handleBlurInput = (e?: FocusEvent) => {\n  const handleBlurDefer = async () => {\n    setTimeout(() => {\n      if (currentHandleBlurDeferCallback === handleBlurDefer) {\n        if (\n          !(\n            refPopper.value?.isFocusInsideContent() && !hasJustTabExitedInput\n          ) &&\n          refInput.value.filter((input) => {\n            return input.contains(document.activeElement)\n          }).length === 0\n        ) {\n          handleChange()\n          pickerVisible.value = false\n          emit('blur', e)\n          props.validateEvent &&\n            formItem?.validate('blur').catch((err) => debugWarn(err))\n        }\n        hasJustTabExitedInput = false\n      }\n    }, 0)\n  }\n  currentHandleBlurDeferCallback = handleBlurDefer\n  handleBlurDefer()\n}\n\nconst pickerDisabled = computed(() => {\n  return props.disabled || form?.disabled\n})\n\nconst parsedValue = computed(() => {\n  let dayOrDays: DayOrDays\n  if (valueIsEmpty.value) {\n    if (pickerOptions.value.getDefaultValue) {\n      dayOrDays = pickerOptions.value.getDefaultValue()\n    }\n  } else {\n    if (isArray(props.modelValue)) {\n      dayOrDays = props.modelValue.map((d) =>\n        parseDate(d, props.valueFormat, lang.value)\n      ) as [Dayjs, Dayjs]\n    } else {\n      dayOrDays = parseDate(props.modelValue, props.valueFormat, lang.value)!\n    }\n  }\n\n  if (pickerOptions.value.getRangeAvailableTime) {\n    const availableResult = pickerOptions.value.getRangeAvailableTime(\n      dayOrDays!\n    )\n    if (!isEqual(availableResult, dayOrDays!)) {\n      dayOrDays = availableResult\n      emitInput(\n        (isArray(dayOrDays)\n          ? dayOrDays.map((_) => _.toDate())\n          : dayOrDays.toDate()) as SingleOrRange<Date>\n      )\n    }\n  }\n  if (isArray(dayOrDays!) && dayOrDays.some((day) => !day)) {\n    dayOrDays = [] as unknown as DayOrDays\n  }\n  return dayOrDays!\n})\n\nconst displayValue = computed<UserInput>(() => {\n  if (!pickerOptions.value.panelReady) return ''\n  const formattedValue = formatDayjsToString(parsedValue.value)\n  if (isArray(userInput.value)) {\n    return [\n      userInput.value[0] || (formattedValue && formattedValue[0]) || '',\n      userInput.value[1] || (formattedValue && formattedValue[1]) || '',\n    ]\n  } else if (userInput.value !== null) {\n    return userInput.value\n  }\n  if (!isTimePicker.value && valueIsEmpty.value) return ''\n  if (!pickerVisible.value && valueIsEmpty.value) return ''\n  if (formattedValue) {\n    return isDatesPicker.value\n      ? (formattedValue as Array<string>).join(', ')\n      : formattedValue\n  }\n  return ''\n})\n\nconst isTimeLikePicker = computed(() => props.type.includes('time'))\n\nconst isTimePicker = computed(() => props.type.startsWith('time'))\n\nconst isDatesPicker = computed(() => props.type === 'dates')\n\nconst triggerIcon = computed(\n  () => props.prefixIcon || (isTimeLikePicker.value ? Clock : Calendar)\n)\n\nconst showClose = ref(false)\n\nconst onClearIconClick = (event: MouseEvent) => {\n  if (props.readonly || pickerDisabled.value) return\n  if (showClose.value) {\n    event.stopPropagation()\n    focusOnInputBox()\n    emitInput(null)\n    emitChange(null, true)\n    showClose.value = false\n    pickerVisible.value = false\n    pickerOptions.value.handleClear && pickerOptions.value.handleClear()\n  }\n}\n\nconst valueIsEmpty = computed(() => {\n  const { modelValue } = props\n  return (\n    !modelValue || (isArray(modelValue) && !modelValue.filter(Boolean).length)\n  )\n})\n\nconst onMouseDownInput = async (event: MouseEvent) => {\n  if (props.readonly || pickerDisabled.value) return\n  if (\n    (event.target as HTMLElement)?.tagName !== 'INPUT' ||\n    refInput.value.includes(document.activeElement as HTMLInputElement)\n  ) {\n    pickerVisible.value = true\n  }\n}\nconst onMouseEnter = () => {\n  if (props.readonly || pickerDisabled.value) return\n  if (!valueIsEmpty.value && props.clearable) {\n    showClose.value = true\n  }\n}\nconst onMouseLeave = () => {\n  showClose.value = false\n}\nconst onTouchStartInput = (event: TouchEvent) => {\n  if (props.readonly || pickerDisabled.value) return\n  if (\n    (event.touches[0].target as HTMLElement)?.tagName !== 'INPUT' ||\n    refInput.value.includes(document.activeElement as HTMLInputElement)\n  ) {\n    pickerVisible.value = true\n  }\n}\nconst isRangeInput = computed(() => {\n  return props.type.includes('range')\n})\n\nconst pickerSize = useSize()\n\nconst popperEl = computed(() => unref(refPopper)?.popperRef?.contentRef)\nconst actualInputRef = computed(() => {\n  if (unref(isRangeInput)) {\n    return unref(inputRef)\n  }\n\n  return (unref(inputRef) as ComponentPublicInstance)?.$el\n})\n\nonClickOutside(actualInputRef, (e: PointerEvent) => {\n  const unrefedPopperEl = unref(popperEl)\n  const inputEl = unref(actualInputRef)\n  if (\n    (unrefedPopperEl &&\n      (e.target === unrefedPopperEl ||\n        e.composedPath().includes(unrefedPopperEl))) ||\n    e.target === inputEl ||\n    e.composedPath().includes(inputEl)\n  )\n    return\n  pickerVisible.value = false\n})\n\nconst userInput = ref<UserInput>(null)\n\nconst handleChange = () => {\n  if (userInput.value) {\n    const value = parseUserInputToDayjs(displayValue.value)\n    if (value) {\n      if (isValidValue(value)) {\n        emitInput(\n          (isArray(value)\n            ? value.map((_) => _.toDate())\n            : value.toDate()) as DateOrDates\n        )\n        userInput.value = null\n      }\n    }\n  }\n  if (userInput.value === '') {\n    emitInput(null)\n    emitChange(null)\n    userInput.value = null\n  }\n}\n\nconst parseUserInputToDayjs = (value: UserInput) => {\n  if (!value) return null\n  return pickerOptions.value.parseUserInput!(value)\n}\n\nconst formatDayjsToString = (value: DayOrDays) => {\n  if (!value) return null\n  return pickerOptions.value.formatToString!(value)\n}\n\nconst isValidValue = (value: DayOrDays) => {\n  return pickerOptions.value.isValidValue!(value)\n}\n\nconst handleKeydownInput = async (event: KeyboardEvent) => {\n  if (props.readonly || pickerDisabled.value) return\n\n  const { code } = event\n  emitKeydown(event)\n  if (code === EVENT_CODE.esc) {\n    if (pickerVisible.value === true) {\n      pickerVisible.value = false\n      event.preventDefault()\n      event.stopPropagation()\n    }\n    return\n  }\n\n  if (code === EVENT_CODE.down) {\n    if (pickerOptions.value.handleFocusPicker) {\n      event.preventDefault()\n      event.stopPropagation()\n    }\n    if (pickerVisible.value === false) {\n      pickerVisible.value = true\n      await nextTick()\n    }\n    if (pickerOptions.value.handleFocusPicker) {\n      pickerOptions.value.handleFocusPicker()\n      return\n    }\n  }\n\n  if (code === EVENT_CODE.tab) {\n    hasJustTabExitedInput = true\n    return\n  }\n\n  if (code === EVENT_CODE.enter || code === EVENT_CODE.numpadEnter) {\n    if (\n      userInput.value === null ||\n      userInput.value === '' ||\n      isValidValue(parseUserInputToDayjs(displayValue.value) as DayOrDays)\n    ) {\n      handleChange()\n      pickerVisible.value = false\n    }\n    event.stopPropagation()\n    return\n  }\n\n  // if user is typing, do not let picker handle key input\n  if (userInput.value) {\n    event.stopPropagation()\n    return\n  }\n  if (pickerOptions.value.handleKeydownInput) {\n    pickerOptions.value.handleKeydownInput(event)\n  }\n}\nconst onUserInput = (e: string) => {\n  userInput.value = e\n  // Temporary fix when the picker is dismissed and the input box\n  // is focused, just mimic the behavior of antdesign.\n  if (!pickerVisible.value) {\n    pickerVisible.value = true\n  }\n}\n\nconst handleStartInput = (event: Event) => {\n  const target = event.target as HTMLInputElement\n  if (userInput.value) {\n    userInput.value = [target.value, userInput.value[1]]\n  } else {\n    userInput.value = [target.value, null]\n  }\n}\n\nconst handleEndInput = (event: Event) => {\n  const target = event.target as HTMLInputElement\n  if (userInput.value) {\n    userInput.value = [userInput.value[0], target.value]\n  } else {\n    userInput.value = [null, target.value]\n  }\n}\n\nconst handleStartChange = () => {\n  const values = userInput.value as string[]\n  const value = parseUserInputToDayjs(values && values[0]) as Dayjs\n  const parsedVal = unref(parsedValue) as [Dayjs, Dayjs]\n  if (value && value.isValid()) {\n    userInput.value = [\n      formatDayjsToString(value) as string,\n      displayValue.value?.[1] || null,\n    ]\n    const newValue = [value, parsedVal && (parsedVal[1] || null)] as DayOrDays\n    if (isValidValue(newValue)) {\n      emitInput(newValue)\n      userInput.value = null\n    }\n  }\n}\n\nconst handleEndChange = () => {\n  const values = unref(userInput) as string[]\n  const value = parseUserInputToDayjs(values && values[1]) as Dayjs\n  const parsedVal = unref(parsedValue) as [Dayjs, Dayjs]\n  if (value && value.isValid()) {\n    userInput.value = [\n      unref(displayValue)?.[0] || null,\n      formatDayjsToString(value) as string,\n    ]\n    const newValue = [parsedVal && parsedVal[0], value] as DayOrDays\n    if (isValidValue(newValue)) {\n      emitInput(newValue)\n      userInput.value = null\n    }\n  }\n}\n\nconst pickerOptions = ref<Partial<PickerOptions>>({})\nconst onSetPickerOption = <T extends keyof PickerOptions>(\n  e: [T, PickerOptions[T]]\n) => {\n  pickerOptions.value[e[0]] = e[1]\n  pickerOptions.value.panelReady = true\n}\n\nconst onCalendarChange = (e: [Date, false | Date]) => {\n  emit('calendar-change', e)\n}\n\nconst onPanelChange = (\n  value: [Dayjs, Dayjs],\n  mode: 'month' | 'year',\n  view: unknown\n) => {\n  emit('panel-change', value, mode, view)\n}\n\nprovide('EP_PICKER_BASE', {\n  props,\n})\n\ndefineExpose({\n  /**\n   * @description focus input box.\n   */\n  focus,\n  /**\n   * @description emit focus event\n   */\n  handleFocusInput,\n  /**\n   * @description emit blur event\n   */\n  handleBlurInput,\n  /**\n   * @description opens picker\n   */\n  handleOpen,\n  /**\n   * @description closes picker\n   */\n  handleClose,\n  /**\n   * @description pick item manually\n   */\n  onPick,\n})\n</script>\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}