{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nrequire('../../../hooks/index.js');\nrequire('../../../tokens/index.js');\nvar arrow = require('./arrow.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar index = require('../../../hooks/use-namespace/index.js');\nvar popper = require('../../../tokens/popper.js');\nconst __default__ = vue.defineComponent({\n  name: \"ElPopperArrow\",\n  inheritAttrs: false\n});\nconst _sfc_main = /* @__PURE__ */vue.defineComponent({\n  ...__default__,\n  props: arrow.popperArrowProps,\n  setup(__props, {\n    expose\n  }) {\n    const props = __props;\n    const ns = index.useNamespace(\"popper\");\n    const {\n      arrowOffset,\n      arrowRef\n    } = vue.inject(popper.POPPER_CONTENT_INJECTION_KEY, void 0);\n    vue.watch(() => props.arrowOffset, val => {\n      arrowOffset.value = val;\n    });\n    vue.onBeforeUnmount(() => {\n      arrowRef.value = void 0;\n    });\n    expose({\n      arrowRef\n    });\n    return (_ctx, _cache) => {\n      return vue.openBlock(), vue.createElementBlock(\"span\", {\n        ref_key: \"arrowRef\",\n        ref: arrowRef,\n        class: vue.normalizeClass(vue.unref(ns).e(\"arrow\")),\n        \"data-popper-arrow\": \"\"\n      }, null, 2);\n    };\n  }\n});\nvar ElPopperArrow = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/popper/src/arrow.vue\"]]);\nexports[\"default\"] = ElPopperArrow;","map":{"version":3,"mappings":";;;;;;;;;;;;uCAUc;EACZA,IAAM;EACNC,YAAc;AAChB;;;;;;;;IAIM,WAAKC,mBAAa,QAAQ;IAChC,MAAM;MAAEC;MAAaC;IAAa,eAChCC,qCACA,KACF;IAEAC,UACE,MAAMC,MAAMJ,WACZ,EAACK,GAAQ;MACPL,YAAYM,KAAQ;IAAA,CAExB;IACAC,oBAAgB,MAAM;MACpBN,SAASK,KAAQ;IAAA,CAClB;IAEYE;MAIXP;IAAA,CACD","names":["name","inheritAttrs","useNamespace","arrowOffset","arrowRef","POPPER_CONTENT_INJECTION_KEY","watch","props","val","value","onBeforeUnmount","expose"],"sources":["../../../../../../packages/components/popper/src/arrow.vue"],"sourcesContent":["<template>\n  <span ref=\"arrowRef\" :class=\"ns.e('arrow')\" data-popper-arrow=\"\" />\n</template>\n\n<script lang=\"ts\" setup>\nimport { inject, onBeforeUnmount, watch } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { POPPER_CONTENT_INJECTION_KEY } from '@element-plus/tokens'\nimport { popperArrowProps } from './arrow'\n\ndefineOptions({\n  name: 'ElPopperArrow',\n  inheritAttrs: false,\n})\n\nconst props = defineProps(popperArrowProps)\n\nconst ns = useNamespace('popper')\nconst { arrowOffset, arrowRef } = inject(\n  POPPER_CONTENT_INJECTION_KEY,\n  undefined\n)!\n\nwatch(\n  () => props.arrowOffset,\n  (val) => {\n    arrowOffset.value = val\n  }\n)\nonBeforeUnmount(() => {\n  arrowRef.value = undefined\n})\n\ndefineExpose({\n  /**\n   * @description Arrow element\n   */\n  arrowRef,\n})\n</script>\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}