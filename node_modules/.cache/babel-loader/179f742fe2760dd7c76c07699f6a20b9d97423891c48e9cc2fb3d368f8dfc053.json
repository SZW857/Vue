{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nrequire('../../tokens/index.js');\nrequire('../../utils/index.js');\nrequire('../../constants/index.js');\nvar index = require('../use-prop/index.js');\nvar index$1 = require('../use-global-config/index.js');\nvar runtime = require('../../utils/vue/props/runtime.js');\nvar size = require('../../constants/size.js');\nvar form = require('../../tokens/form.js');\nconst useSizeProp = runtime.buildProp({\n  type: String,\n  values: size.componentSizes,\n  required: false\n});\nconst useSize = (fallback, ignore = {}) => {\n  const emptyRef = vue.ref(void 0);\n  const size = ignore.prop ? emptyRef : index.useProp(\"size\");\n  const globalConfig = ignore.global ? emptyRef : index$1.useGlobalConfig(\"size\");\n  const form$1 = ignore.form ? {\n    size: void 0\n  } : vue.inject(form.formContextKey, void 0);\n  const formItem = ignore.formItem ? {\n    size: void 0\n  } : vue.inject(form.formItemContextKey, void 0);\n  return vue.computed(() => size.value || vue.unref(fallback) || (formItem == null ? void 0 : formItem.size) || (form$1 == null ? void 0 : form$1.size) || globalConfig.value || \"\");\n};\nconst useDisabled = fallback => {\n  const disabled = index.useProp(\"disabled\");\n  const form$1 = vue.inject(form.formContextKey, void 0);\n  return vue.computed(() => disabled.value || vue.unref(fallback) || (form$1 == null ? void 0 : form$1.disabled) || false);\n};\nexports.useDisabled = useDisabled;\nexports.useSize = useSize;\nexports.useSizeProp = useSizeProp;","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAMY,MAACA,WAAW,GAAGC,iBAAS,CAAC;EACnCC,IAAI,EAAEC,MAAM;EACZC,MAAM,EAAEC,mBAAc;EACtBC,QAAQ,EAAE;AACZ,CAAC;AACW,MAACC,OAAO,GAAG,CAACC,QAAQ,EAAEC,MAAM,GAAG,EAAE,KAAK;EAChD,MAAMC,QAAQ,GAAGC,OAAG,CAAC,KAAK,CAAC,CAAC;EAC5B,MAAMC,IAAI,GAAGH,MAAM,CAACI,IAAI,GAAGH,QAAQ,GAAGI,aAAO,CAAC,MAAM,CAAC;EACrD,MAAMC,YAAY,GAAGN,MAAM,CAACO,MAAM,GAAGN,QAAQ,GAAGO,uBAAe,CAAC,MAAM,CAAC;EACvE,MAAMC,MAAI,GAAGT,MAAM,CAACS,IAAI,GAAG;IAAEN,IAAI,EAAE,KAAK;EAAC,CAAE,GAAGO,UAAM,CAACC,mBAAc,EAAE,KAAK,CAAC,CAAC;EAC5E,MAAMC,QAAQ,GAAGZ,MAAM,CAACY,QAAQ,GAAG;IAAET,IAAI,EAAE,KAAK;EAAC,CAAE,GAAGO,UAAM,CAACG,uBAAkB,EAAE,KAAK,CAAC,CAAC;EACxF,OAAOC,YAAQ,CAAC,MAAMX,IAAI,CAACY,KAAK,IAAIC,SAAK,CAACjB,QAAQ,CAAC,KAAKa,QAAQ,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAACT,IAAI,CAAC,KAAKM,MAAI,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,MAAI,CAACN,IAAI,CAAC,IAAIG,YAAY,CAACS,KAAK,IAAI,EAAE,CAAC;AACxK;AACY,MAACE,WAAW,GAAIlB,QAAQ,IAAK;EACvC,MAAMmB,QAAQ,GAAGb,aAAO,CAAC,UAAU,CAAC;EACpC,MAAMI,MAAI,GAAGC,UAAM,CAACC,mBAAc,EAAE,KAAK,CAAC,CAAC;EAC3C,OAAOG,YAAQ,CAAC,MAAMI,QAAQ,CAACH,KAAK,IAAIC,SAAK,CAACjB,QAAQ,CAAC,KAAKU,MAAI,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,MAAI,CAACS,QAAQ,CAAC,IAAI,KAAK,CAAC;AAC9G","names":["useSizeProp","buildProp","type","String","values","componentSizes","required","useSize","fallback","ignore","emptyRef","ref","size","prop","useProp","globalConfig","global","useGlobalConfig","form","inject","formContextKey","formItem","formItemContextKey","computed","value","unref","useDisabled","disabled"],"sources":["../../../../../packages/hooks/use-common-props/index.ts"],"sourcesContent":["import { computed, inject, ref, unref } from 'vue'\nimport { formContextKey, formItemContextKey } from '@element-plus/tokens'\nimport { buildProp } from '@element-plus/utils'\nimport { componentSizes } from '@element-plus/constants'\nimport { useProp } from '../use-prop'\nimport { useGlobalConfig } from '../use-global-config'\nimport type { ComponentSize } from '@element-plus/constants'\nimport type { MaybeRef } from '@vueuse/core'\n\nexport const useSizeProp = buildProp({\n  type: String,\n  values: componentSizes,\n  required: false,\n} as const)\n\nexport const useSize = (\n  fallback?: MaybeRef<ComponentSize | undefined>,\n  ignore: Partial<Record<'prop' | 'form' | 'formItem' | 'global', boolean>> = {}\n) => {\n  const emptyRef = ref(undefined)\n\n  const size = ignore.prop ? emptyRef : useProp<ComponentSize>('size')\n  const globalConfig = ignore.global ? emptyRef : useGlobalConfig('size')\n  const form = ignore.form\n    ? { size: undefined }\n    : inject(formContextKey, undefined)\n  const formItem = ignore.formItem\n    ? { size: undefined }\n    : inject(formItemContextKey, undefined)\n\n  return computed(\n    (): ComponentSize =>\n      size.value ||\n      unref(fallback) ||\n      formItem?.size ||\n      form?.size ||\n      globalConfig.value ||\n      ''\n  )\n}\n\nexport const useDisabled = (fallback?: MaybeRef<boolean | undefined>) => {\n  const disabled = useProp<boolean>('disabled')\n  const form = inject(formContextKey, undefined)\n  return computed(\n    () => disabled.value || unref(fallback) || form?.disabled || false\n  )\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}