{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar lodashUnified = require('lodash-unified');\nvar core = require('@vueuse/core');\nrequire('../../slot/index.js');\nrequire('../../../hooks/index.js');\nrequire('../../../tokens/index.js');\nrequire('../../../utils/index.js');\nvar trigger = require('./trigger.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar popper = require('../../../tokens/popper.js');\nvar index = require('../../../hooks/use-forward-ref/index.js');\nvar types = require('../../../utils/types.js');\nvar onlyChild = require('../../slot/src/only-child.js');\nconst __default__ = vue.defineComponent({\n  name: \"ElPopperTrigger\",\n  inheritAttrs: false\n});\nconst _sfc_main = /* @__PURE__ */vue.defineComponent({\n  ...__default__,\n  props: trigger.popperTriggerProps,\n  setup(__props, {\n    expose\n  }) {\n    const props = __props;\n    const {\n      role,\n      triggerRef\n    } = vue.inject(popper.POPPER_INJECTION_KEY, void 0);\n    index.useForwardRef(triggerRef);\n    const ariaControls = vue.computed(() => {\n      return ariaHaspopup.value ? props.id : void 0;\n    });\n    const ariaDescribedby = vue.computed(() => {\n      if (role && role.value === \"tooltip\") {\n        return props.open && props.id ? props.id : void 0;\n      }\n      return void 0;\n    });\n    const ariaHaspopup = vue.computed(() => {\n      if (role && role.value !== \"tooltip\") {\n        return role.value;\n      }\n      return void 0;\n    });\n    const ariaExpanded = vue.computed(() => {\n      return ariaHaspopup.value ? `${props.open}` : void 0;\n    });\n    let virtualTriggerAriaStopWatch = void 0;\n    vue.onMounted(() => {\n      vue.watch(() => props.virtualRef, virtualEl => {\n        if (virtualEl) {\n          triggerRef.value = core.unrefElement(virtualEl);\n        }\n      }, {\n        immediate: true\n      });\n      vue.watch(triggerRef, (el, prevEl) => {\n        virtualTriggerAriaStopWatch == null ? void 0 : virtualTriggerAriaStopWatch();\n        virtualTriggerAriaStopWatch = void 0;\n        if (types.isElement(el)) {\n          ;\n          [\"onMouseenter\", \"onMouseleave\", \"onClick\", \"onKeydown\", \"onFocus\", \"onBlur\", \"onContextmenu\"].forEach(eventName => {\n            var _a;\n            const handler = props[eventName];\n            if (handler) {\n              ;\n              el.addEventListener(eventName.slice(2).toLowerCase(), handler);\n              (_a = prevEl == null ? void 0 : prevEl.removeEventListener) == null ? void 0 : _a.call(prevEl, eventName.slice(2).toLowerCase(), handler);\n            }\n          });\n          virtualTriggerAriaStopWatch = vue.watch([ariaControls, ariaDescribedby, ariaHaspopup, ariaExpanded], watches => {\n            ;\n            [\"aria-controls\", \"aria-describedby\", \"aria-haspopup\", \"aria-expanded\"].forEach((key, idx) => {\n              lodashUnified.isNil(watches[idx]) ? el.removeAttribute(key) : el.setAttribute(key, watches[idx]);\n            });\n          }, {\n            immediate: true\n          });\n        }\n        if (types.isElement(prevEl)) {\n          ;\n          [\"aria-controls\", \"aria-describedby\", \"aria-haspopup\", \"aria-expanded\"].forEach(key => prevEl.removeAttribute(key));\n        }\n      }, {\n        immediate: true\n      });\n    });\n    vue.onBeforeUnmount(() => {\n      virtualTriggerAriaStopWatch == null ? void 0 : virtualTriggerAriaStopWatch();\n      virtualTriggerAriaStopWatch = void 0;\n    });\n    expose({\n      triggerRef\n    });\n    return (_ctx, _cache) => {\n      return !_ctx.virtualTriggering ? (vue.openBlock(), vue.createBlock(vue.unref(onlyChild.OnlyChild), vue.mergeProps({\n        key: 0\n      }, _ctx.$attrs, {\n        \"aria-controls\": vue.unref(ariaControls),\n        \"aria-describedby\": vue.unref(ariaDescribedby),\n        \"aria-expanded\": vue.unref(ariaExpanded),\n        \"aria-haspopup\": vue.unref(ariaHaspopup)\n      }), {\n        default: vue.withCtx(() => [vue.renderSlot(_ctx.$slots, \"default\")]),\n        _: 3\n      }, 16, [\"aria-controls\", \"aria-describedby\", \"aria-expanded\", \"aria-haspopup\"])) : vue.createCommentVNode(\"v-if\", true);\n    };\n  }\n});\nvar ElPopperTrigger = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/popper/src/trigger.vue\"]]);\nexports[\"default\"] = ElPopperTrigger;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;uCAyBc;EACZA,IAAM;EACNC,YAAc;AAChB;;;;;;;;IAIA,MAAM;MAAEC;MAAMC;IAAe,eAAOC,6BAAsB,KAAS;IAEnEC,oBAAcF,UAAU;IAElB,qBAAeG,aAA6B,MAAM;MAC/C,oBAAaC,KAAQ,SAAMC,EAAK;IAAA,CACxC;IAEK,wBAAkBF,aAA6B,MAAM;MACrD,YAAQJ,IAAK,WAAU,SAAW;QACpC,OAAOO,KAAM,SAAQA,KAAM,MAAKA,MAAMD,EAAK;MAAA;MAEtC;IAAA,CACR;IAEK,qBAAeF,aAA6B,MAAM;MAClD,YAAQJ,IAAK,WAAU,SAAW;QACpC,OAAOA,IAAK;MAAA;MAEP;IAAA,CACR;IAEK,qBAAeI,aAA6B,MAAM;MACtD,OAAOI,YAAa,SAAW,SAAMC,IAAS;IAAA,CAC/C;IAED,IAAIC,2BAA2D;IAE/DC,cAAU,MAAM;MACdC,UACE,MAAML,MAAMM,UACZ,EAACC,SAAc;QACb,IAAIA,SAAW;UACFb,mBAAQc,kBAAaD,SAAwB;QAAA;MAC1D,CAEF;QACEE,SAAW;MAAA,CAEf;MAGEJ,sBACA,CAACK,IAAIC,MAAW;QACgBR;QACAA;QAC1B,oBAAUO,EAAE,CAAG;UACjB;UACE,CACE,gBACA,gBACA,WACA,aACA,WACA,UACA,gBACF,CACAE,OAAQ,CAACC,SAAc;YACvB,MAAM;YACN,MAAaC;YACX;cAAE;cAIAJ,8BACAK,KAAU,eAAS,WAAY;cAGnC;YAAA;UAEF,CAA8B;UAG1BZ;YAAC;YACC,CACA,iBACA,oBACA,iBACA,eAAsB,CAChB,eAAQa,GAAI,KACd;cAELC;YAAA,CAEH;UACF,CACF;YAAAR;UAAA;QACA;QACE;UAAC;UACC,CACA,iBACA,oBACA,iBACA,gBACJ;QAAA;MAEF,GACa;QAEfA;MAAA,CACD;IAED;IACgCS;MACAf;MAC/BA;IAED,CAAa;IAIXgB;MACDzB","names":["name","inheritAttrs","role","triggerRef","POPPER_INJECTION_KEY","useForwardRef","computed","value","id","props","ariaHaspopup","open","virtualTriggerAriaStopWatch","onMounted","watch","virtualRef","virtualEl","unrefElement","immediate","el","prevEl","forEach","eventName","handler","slice","idx","isNil","onBeforeUnmount","expose"],"sources":["../../../../../../packages/components/popper/src/trigger.vue"],"sourcesContent":["<template>\n  <el-only-child\n    v-if=\"!virtualTriggering\"\n    v-bind=\"$attrs\"\n    :aria-controls=\"ariaControls\"\n    :aria-describedby=\"ariaDescribedby\"\n    :aria-expanded=\"ariaExpanded\"\n    :aria-haspopup=\"ariaHaspopup\"\n  >\n    <slot />\n  </el-only-child>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, inject, onBeforeUnmount, onMounted, watch } from 'vue'\nimport { isNil } from 'lodash-unified'\nimport { unrefElement } from '@vueuse/core'\nimport { ElOnlyChild } from '@element-plus/components/slot'\nimport { useForwardRef } from '@element-plus/hooks'\nimport { POPPER_INJECTION_KEY } from '@element-plus/tokens'\nimport { isElement } from '@element-plus/utils'\nimport { popperTriggerProps } from './trigger'\n\nimport type { WatchStopHandle } from 'vue'\n\ndefineOptions({\n  name: 'ElPopperTrigger',\n  inheritAttrs: false,\n})\n\nconst props = defineProps(popperTriggerProps)\n\nconst { role, triggerRef } = inject(POPPER_INJECTION_KEY, undefined)!\n\nuseForwardRef(triggerRef)\n\nconst ariaControls = computed<string | undefined>(() => {\n  return ariaHaspopup.value ? props.id : undefined\n})\n\nconst ariaDescribedby = computed<string | undefined>(() => {\n  if (role && role.value === 'tooltip') {\n    return props.open && props.id ? props.id : undefined\n  }\n  return undefined\n})\n\nconst ariaHaspopup = computed<string | undefined>(() => {\n  if (role && role.value !== 'tooltip') {\n    return role.value\n  }\n  return undefined\n})\n\nconst ariaExpanded = computed<string | undefined>(() => {\n  return ariaHaspopup.value ? `${props.open}` : undefined\n})\n\nlet virtualTriggerAriaStopWatch: WatchStopHandle | undefined = undefined\n\nonMounted(() => {\n  watch(\n    () => props.virtualRef,\n    (virtualEl) => {\n      if (virtualEl) {\n        triggerRef.value = unrefElement(virtualEl as HTMLElement)\n      }\n    },\n    {\n      immediate: true,\n    }\n  )\n\n  watch(\n    triggerRef,\n    (el, prevEl) => {\n      virtualTriggerAriaStopWatch?.()\n      virtualTriggerAriaStopWatch = undefined\n      if (isElement(el)) {\n        ;(\n          [\n            'onMouseenter',\n            'onMouseleave',\n            'onClick',\n            'onKeydown',\n            'onFocus',\n            'onBlur',\n            'onContextmenu',\n          ] as const\n        ).forEach((eventName) => {\n          const handler = props[eventName]\n          if (handler) {\n            ;(el as HTMLElement).addEventListener(\n              eventName.slice(2).toLowerCase(),\n              handler\n            )\n            ;(prevEl as HTMLElement)?.removeEventListener?.(\n              eventName.slice(2).toLowerCase(),\n              handler\n            )\n          }\n        })\n        virtualTriggerAriaStopWatch = watch(\n          [ariaControls, ariaDescribedby, ariaHaspopup, ariaExpanded],\n          (watches) => {\n            ;[\n              'aria-controls',\n              'aria-describedby',\n              'aria-haspopup',\n              'aria-expanded',\n            ].forEach((key, idx) => {\n              isNil(watches[idx])\n                ? el.removeAttribute(key)\n                : el.setAttribute(key, watches[idx]!)\n            })\n          },\n          { immediate: true }\n        )\n      }\n      if (isElement(prevEl)) {\n        ;[\n          'aria-controls',\n          'aria-describedby',\n          'aria-haspopup',\n          'aria-expanded',\n        ].forEach((key) => prevEl.removeAttribute(key))\n      }\n    },\n    {\n      immediate: true,\n    }\n  )\n})\n\nonBeforeUnmount(() => {\n  virtualTriggerAriaStopWatch?.()\n  virtualTriggerAriaStopWatch = undefined\n})\n\ndefineExpose({\n  /**\n   * @description trigger element\n   */\n  triggerRef,\n})\n</script>\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}