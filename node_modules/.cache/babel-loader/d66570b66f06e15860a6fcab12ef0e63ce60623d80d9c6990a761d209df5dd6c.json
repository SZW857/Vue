{"ast":null,"code":"import { ElMessage } from 'element-plus';\nimport SIdentify from '@/components/identify';\nexport default {\n  name: 'ForgotPwdTemplate',\n  components: {\n    SIdentify\n  },\n  data() {\n    var validateVerifycode = (rule, value, callback) => {\n      const newVal = this.identifyCode.toUpperCase();\n      const identifyStr = this.identifyCode.toLowerCase();\n      if (value === '') {\n        return callback(new Error('验证码不能为空'));\n      } else if (value === identifyStr) {\n        callback();\n      } else if (value === newVal) {\n        callback();\n      } else {\n        console.log('validateVerifycode:', value);\n        callback(new Error('验证码不正确!'));\n      }\n      // setTimeout(() => {\n      //   if (!Number.isInteger(value)) {\n      //     callback(new Error('请输入数字值'))\n      //   } else {\n      //     if (value < 18) {\n      //       callback(new Error('必须年满18岁'))\n      //     } else {\n      //       callback()\n      //     }\n      //   }\n      // }, 1000)\n    };\n\n    var telephoneNumber = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请输入手机号'));\n      } else if (this.teleRuleCheck(value)) {\n        callback();\n      } else {\n        callback(\"手机格式不正确\");\n      }\n    };\n    var idCard = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请输入身份证号码'));\n      } else if (this.idCardRuleCheck(value)) {\n        callback();\n      } else {\n        callback(new Error('身份证格式不对'));\n      }\n    };\n    var validatePass = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请输入密码'));\n        console.log(value);\n      } else {\n        if (this.passwdCheck(value)) {\n          this.$refs.ruleForm.validateField('confirmPass');\n          callback();\n        } else {\n          callback(new Error(\"密码格式不对(数字+密码组合)\"));\n        }\n      }\n    };\n    var validatePass2 = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请再次输入密码'));\n      } else if (value !== this.ruleForm.pass) {\n        callback(new Error('两次输入密码不一致!'));\n      } else {\n        callback();\n      }\n    };\n    return {};\n  },\n  methods: {\n    submitForm(formName) {\n      this.$refs[formName].validate(valid => {\n        if (valid) {\n          if (this.active++ > 3) this.active = 0;\n        } else {\n          ElMessage({\n            message: '完善信息方可进入下一步',\n            grouping: true,\n            type: 'error'\n          });\n        }\n      });\n    },\n    sendMsg() {\n      if (this.canClick) return;\n      this.canClick = true;\n      this.content = this.totalTime + 's后重新发送';\n      let clock = window.setInterval(() => {\n        this.totalTime--;\n        this.content = this.totalTime + 's后重新发送';\n        if (this.totalTime < 0) {\n          window.clearInterval(clock);\n          this.content = '重新发送短信';\n          this.totalTime = 10;\n          this.canClick = false;\n        }\n      }, 1000);\n    },\n    resetForm(formName) {\n      this.$refs[formName].resetFields();\n    },\n    prev() {\n      --this.active;\n      if (this.active < 0) this.active = 0;\n    },\n    sub(formName) {\n      this.$refs[formName].validate(valid => {\n        if (valid) {\n          this.active++;\n          if (this.active = 4) {\n            ElMessage({\n              message: '恭喜你！已重获密码',\n              type: 'success'\n            });\n            this.$router.replace('/finish');\n          }\n        } else {\n          alert('请输入正确的密码');\n          console.log('error submit!!');\n        }\n      });\n    },\n    teleRuleCheck(stringber) {\n      var pattern = /^1[34578]\\d{9}$/;\n      if (pattern.test(stringber)) {\n        return true;\n      }\n      console.log('check mobile phone ' + stringber + ' failed.');\n      return false;\n    },\n    idCardRuleCheck(string) {\n      var reg = /(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)/;\n      if (reg.test(string) === false) {\n        return false;\n      } else {\n        return true;\n      }\n    },\n    //校验密码强度\n    passwdCheck(num) {\n      let reg = /^(?![\\d]+$)(?![a-zA-Z]+$)(?![^\\da-zA-Z]+$).{6,20}$/;\n      if (reg.test(num) === false) {\n        return false;\n      } else {\n        return true;\n      }\n    },\n    // 生成随机数\n    randomNum(min, max) {\n      return Math.floor(Math.random() * (max - min) + min);\n    },\n    // 切换验证码\n    refreshCode() {\n      this.identifyCode = '';\n      this.makeCode(this.identifyCodes, 4);\n    },\n    // 生成四位随机验证码\n    makeCode(o, l) {\n      for (let i = 0; i < l; i++) {\n        this.identifyCode += this.identifyCodes[this.randomNum(0, this.identifyCodes.length)];\n      }\n    }\n  },\n  mounted() {\n    // 验证码初始化\n    this.identifyCode = '';\n    this.makeCode(this.identifyCodes, 4);\n  }\n};","map":{"version":3,"mappings":"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","names":["ElMessage","SIdentify","name","components","data","validateVerifycode","rule","value","callback","newVal","identifyCode","toUpperCase","identifyStr","toLowerCase","Error","console","log","telephoneNumber","teleRuleCheck","idCard","idCardRuleCheck","validatePass","passwdCheck","$refs","ruleForm","validateField","validatePass2","pass","methods","submitForm","formName","validate","valid","active","message","grouping","type","sendMsg","canClick","content","totalTime","clock","window","setInterval","clearInterval","resetForm","resetFields","prev","sub","$router","replace","alert","stringber","pattern","test","string","reg","num","randomNum","min","max","Math","floor","random","refreshCode","makeCode","identifyCodes","o","l","i","length","mounted"],"sourceRoot":"","sources":["C:\\Users\\14486\\Desktop\\社区公益系统前端\\vue_community\\src\\NavigationBar\\PointsGoods.vue"],"sourcesContent":["<template>\r\n  <el-button @onclick=\"message\">dian</el-button>\r\n</template>\r\n<script>\r\n\r\nimport { ElMessage } from 'element-plus'\r\nimport SIdentify from '@/components/identify'\r\n\r\nexport default {\r\n  name:'ForgotPwdTemplate',\r\n  components: {SIdentify},\r\n  data() {\r\n    var validateVerifycode = (rule, value, callback) => {\r\n      const newVal = this.identifyCode.toUpperCase()\r\n      const identifyStr = this.identifyCode.toLowerCase()\r\n      if (value === '')  {\r\n        return callback(new Error('验证码不能为空'))\r\n      }else if (value === identifyStr) {\r\n        callback()\r\n      }else if (value === newVal){\r\n        callback()\r\n      }else {\r\n        console.log('validateVerifycode:', value)\r\n        callback(new Error('验证码不正确!'))\r\n      }\r\n      // setTimeout(() => {\r\n      //   if (!Number.isInteger(value)) {\r\n      //     callback(new Error('请输入数字值'))\r\n      //   } else {\r\n      //     if (value < 18) {\r\n      //       callback(new Error('必须年满18岁'))\r\n      //     } else {\r\n      //       callback()\r\n      //     }\r\n      //   }\r\n      // }, 1000)\r\n    }\r\n    var telephoneNumber = (rule, value, callback) => {\r\n      if (value === '') {\r\n        callback(new Error('请输入手机号'))\r\n      }else if (this.teleRuleCheck(value)){\r\n        callback()\r\n      } else {\r\n        callback(\"手机格式不正确\");\r\n      }\r\n    }\r\n    var idCard = (rule, value, callback) => {\r\n      if (value === '') {\r\n        callback(new Error('请输入身份证号码'))\r\n      } else if (this.idCardRuleCheck(value)) {\r\n        callback()\r\n      } else {\r\n        callback(new Error('身份证格式不对'))\r\n      }\r\n    }\r\n    var validatePass = (rule, value, callback) => {\r\n      if (value === '') {\r\n        callback(new Error('请输入密码'))\r\n        console.log(value)\r\n      }else{\r\n        if (this.passwdCheck(value)) {\r\n          this.$refs.ruleForm.validateField('confirmPass')\r\n          callback()\r\n        }else {\r\n          callback(new Error(\"密码格式不对(数字+密码组合)\"))\r\n        }\r\n      }\r\n\r\n\r\n\r\n    }\r\n    var validatePass2 = (rule, value, callback) => {\r\n      if (value === '') {\r\n        callback(new Error('请再次输入密码'))\r\n      } else if (value !== this.ruleForm.pass) {\r\n        callback(new Error('两次输入密码不一致!'))\r\n      } else {\r\n        callback()\r\n      }\r\n    }\r\n\r\n    return {\r\n\r\n    }\r\n\r\n\r\n  },\r\n  methods: {\r\n    submitForm(formName) {\r\n      this.$refs[formName].validate((valid) => {\r\n        if (valid) {\r\n          if(this.active++>3) this.active=0\r\n        } else {\r\n          ElMessage({\r\n            message: '完善信息方可进入下一步',\r\n            grouping:true,\r\n            type: 'error',\r\n          })\r\n        }\r\n      })\r\n    },\r\n    sendMsg() {\r\n      if (this.canClick) return\r\n      this.canClick = true\r\n      this.content = this.totalTime + 's后重新发送'\r\n      let clock = window.setInterval(() => {\r\n        this.totalTime--\r\n        this.content = this.totalTime + 's后重新发送'\r\n        if (this.totalTime < 0) {\r\n          window.clearInterval(clock)\r\n          this.content = '重新发送短信'\r\n          this.totalTime = 10\r\n          this.canClick = false\r\n        }\r\n      }, 1000)\r\n    },\r\n\r\n    resetForm(formName) {\r\n      this.$refs[formName].resetFields()\r\n    },\r\n    prev(){\r\n      --this.active;\r\n      if (this.active<0) this.active=0\r\n    },\r\n    sub(formName){\r\n      this.$refs[formName].validate((valid) => {\r\n        if (valid) {\r\n          this.active++;\r\n          if (this.active=4){\r\n            ElMessage({\r\n              message: '恭喜你！已重获密码',\r\n              type: 'success',\r\n            })\r\n            this.$router.replace('/finish')\r\n          }\r\n        } else {\r\n          alert('请输入正确的密码')\r\n          console.log('error submit!!')\r\n        }\r\n      })\r\n    },\r\n    teleRuleCheck(stringber) {\r\n      var pattern = /^1[34578]\\d{9}$/;\r\n      if (pattern.test(stringber)) {\r\n        return true;\r\n      }\r\n      console.log('check mobile phone ' + stringber + ' failed.');\r\n      return false;\r\n    },\r\n    idCardRuleCheck(string) {\r\n      var reg = /(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)/;\r\n      if(reg.test(string) === false) {\r\n        return  false;\r\n      }else {\r\n        return true;\r\n      }\r\n    },\r\n    //校验密码强度\r\n    passwdCheck(num){\r\n      let reg = /^(?![\\d]+$)(?![a-zA-Z]+$)(?![^\\da-zA-Z]+$).{6,20}$/;\r\n      if (reg.test(num) === false){\r\n        return false;\r\n      }else {\r\n        return true;\r\n      }\r\n    },\r\n    // 生成随机数\r\n    randomNum(min, max) {\r\n      return Math.floor(Math.random() * (max - min) + min)\r\n    },\r\n    // 切换验证码\r\n    refreshCode() {\r\n      this.identifyCode = ''\r\n      this.makeCode(this.identifyCodes, 4)\r\n    },\r\n    // 生成四位随机验证码\r\n    makeCode(o, l) {\r\n      for (let i = 0; i < l; i++) {\r\n        this.identifyCode += this.identifyCodes[\r\n            this.randomNum(0, this.identifyCodes.length)\r\n            ]\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    // 验证码初始化\r\n    this.identifyCode = ''\r\n    this.makeCode(this.identifyCodes, 4)\r\n  },\r\n}\r\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}