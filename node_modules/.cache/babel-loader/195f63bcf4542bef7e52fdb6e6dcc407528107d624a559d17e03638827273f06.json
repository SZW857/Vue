{"ast":null,"code":"import cryptoJs from 'crypto-js';\n\n//随机生成指定数量的16进制key\nexport const generatekey = num => {\n  let library = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  let key = \"\";\n  for (var i = 0; i < num; i++) {\n    let randomPoz = Math.floor(Math.random() * library.length);\n    key += library.substring(randomPoz, randomPoz + 1);\n  }\n  return key;\n};\n\n//DES加密\nexport const encryptDes = word => {\n  var srcs = CryptoJS.enc.Utf8.parse(word);\n  var encrypted = CryptoJS.AES.encrypt(srcs, key, {\n    mode: CryptoJS.mode.ECB,\n    padding: CryptoJS.pad.Pkcs7\n  });\n  return encrypted.toString();\n};\nexport const Decrypt = word => {\n  var decrypt = CryptoJS.AES.decrypt(word, key, {\n    mode: CryptoJS.mode.ECB,\n    padding: CryptoJS.pad.Pkcs7\n  });\n  return CryptoJS.enc.Utf8.stringify(decrypt).toString();\n};\n\n//DES解密\nexport const CaptchaEncryption = () => {\n  /** 需求：\r\n   * 某系统的数字密码（大于0）。比如1983，采用加密方式进行传输。\r\n   * 规则如下：\r\n   *      先得到每位数，然后每位数都加上5，再对10求余，最后将所有数字反转，得到一串新数。\r\n   *  具体在test3里面，下面只是演示\r\n   * */\n\n  var num = 123456; // 输入的数字\n  // 1、把整数里面的每一位放到数组里\n  var str = num.toString(); // 转化为字符串\n  var intArray = new Array[str.length](); // 新建一个数组用来保存num每一位的数字\n  for (var i = 0; i < str.length; i++) {\n    // 遍历str将每一位数字添加如intArray\n    var ch = str.charAt(i);\n    intArray[i] = Integer.parseInt(ch.toString());\n  }\n  // 2、加密\n  // 每位数都加上5\n  for (var i = 0; i < intArray.length; i++) {\n    intArray[i] = intArray[i] + 5;\n  }\n  // 再对10求余\n  for (var i = 0; i < intArray.length; i++) {\n    intArray[i] = intArray[i] % 10;\n  }\n  // 将所有数字反转\n  for (var i = 0, j = intArray.length - 1; i < j; i++, j--) {\n    var temp = intArray[i];\n    intArray[i] = intArray[j];\n    intArray[j] = temp;\n  }\n  // 8 3 4 6 =》8346\n  // 3.把数组里面的每个数字进行拼接，变成加密之后的结果\n  var number = 0;\n  for (var i = 0; i < intArray.length; i++) {\n    number = number * 10 + intArray[i];\n  }\n  alert(number);\n};","map":{"version":3,"names":["cryptoJs","generatekey","num","library","key","i","randomPoz","Math","floor","random","length","substring","encryptDes","word","srcs","CryptoJS","enc","Utf8","parse","encrypted","AES","encrypt","mode","ECB","padding","pad","Pkcs7","toString","Decrypt","decrypt","stringify","CaptchaEncryption","str","intArray","Array","ch","charAt","Integer","parseInt","j","temp","number","alert"],"sources":["C:/Users/14486/Desktop/社区公益系统前端/vue_community/src/static/js/DES.js"],"sourcesContent":["import cryptoJs from 'crypto-js';\r\n\r\n//随机生成指定数量的16进制key\r\nexport const generatekey = (num) => {\r\n    let library = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n    let key = \"\";\r\n    for (var i = 0; i < num; i++) {\r\n        let randomPoz = Math.floor(Math.random() * library.length);\r\n        key += library.substring(randomPoz, randomPoz + 1);\r\n    }\r\n    return key;\r\n}\r\n\r\n//DES加密\r\nexport const encryptDes =(word) =>{\r\n    var srcs = CryptoJS.enc.Utf8.parse(word);\r\n    var encrypted = CryptoJS.AES.encrypt(srcs, key, {mode:CryptoJS.mode.ECB,padding: CryptoJS.pad.Pkcs7});\r\n    return encrypted.toString();\r\n}\r\n\r\nexport const Decrypt=(word)=>{\r\n    var decrypt = CryptoJS.AES.decrypt(word, key, {mode:CryptoJS.mode.ECB,padding: CryptoJS.pad.Pkcs7});\r\n    return CryptoJS.enc.Utf8.stringify(decrypt).toString();\r\n}\r\n\r\n\r\n//DES解密\r\nexport const CaptchaEncryption=()=>{\r\n        /** 需求：\r\n         * 某系统的数字密码（大于0）。比如1983，采用加密方式进行传输。\r\n         * 规则如下：\r\n         *      先得到每位数，然后每位数都加上5，再对10求余，最后将所有数字反转，得到一串新数。\r\n         *  具体在test3里面，下面只是演示\r\n         * */\r\n\r\n        var num = 123456;// 输入的数字\r\n        // 1、把整数里面的每一位放到数组里\r\n        var str = num.toString();// 转化为字符串\r\n        var intArray = new Array[str.length];// 新建一个数组用来保存num每一位的数字\r\n        for (var i = 0; i < str.length; i++) {\r\n            // 遍历str将每一位数字添加如intArray\r\n            var ch = str.charAt(i);\r\n            intArray[i] = Integer.parseInt(ch.toString());\r\n        }\r\n        // 2、加密\r\n        // 每位数都加上5\r\n        for (var i = 0; i < intArray.length; i++) {\r\n            intArray[i] = intArray[i] + 5;\r\n        }\r\n        // 再对10求余\r\n        for (var i = 0; i < intArray.length; i++) {\r\n            intArray[i] = intArray[i] % 10;\r\n        }\r\n        // 将所有数字反转\r\n        for (var i = 0, j = intArray.length - 1; i < j; i++, j--) {\r\n            var temp = intArray[i];\r\n            intArray[i] = intArray[j];\r\n            intArray[j] = temp;\r\n        }\r\n        // 8 3 4 6 =》8346\r\n        // 3.把数组里面的每个数字进行拼接，变成加密之后的结果\r\n        var number = 0;\r\n        for (var i = 0; i < intArray.length; i++) {\r\n            number = number * 10 + intArray[i];\r\n        }\r\n        alert(number)\r\n    }\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}