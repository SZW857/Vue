{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar lodashUnified = require('lodash-unified');\nrequire('../../../../utils/index.js');\nrequire('../components/index.js');\nvar constants = require('../constants.js');\nvar _private = require('../private.js');\nvar utils = require('../utils.js');\nvar cell = require('../components/cell.js');\nvar shared = require('@vue/shared');\nvar expandIcon = require('../components/expand-icon.js');\nconst CellRenderer = ({\n  columns,\n  column,\n  columnIndex,\n  depth,\n  expandIconProps,\n  isScrolling,\n  rowData,\n  rowIndex,\n  style,\n  expandedRowKeys,\n  ns,\n  cellProps: _cellProps,\n  expandColumnKey,\n  indentSize,\n  iconSize,\n  rowKey\n}, {\n  slots\n}) => {\n  const cellStyle = utils.enforceUnit(style);\n  if (column.placeholderSign === _private.placeholderSign) {\n    return vue.createVNode(\"div\", {\n      \"class\": ns.em(\"row-cell\", \"placeholder\"),\n      \"style\": cellStyle\n    }, null);\n  }\n  const {\n    cellRenderer,\n    dataKey,\n    dataGetter\n  } = column;\n  const columnCellRenderer = utils.componentToSlot(cellRenderer);\n  const CellComponent = columnCellRenderer || slots.default || (props => vue.createVNode(cell[\"default\"], props, null));\n  const cellData = shared.isFunction(dataGetter) ? dataGetter({\n    columns,\n    column,\n    columnIndex,\n    rowData,\n    rowIndex\n  }) : lodashUnified.get(rowData, dataKey != null ? dataKey : \"\");\n  const extraCellProps = utils.tryCall(_cellProps, {\n    cellData,\n    columns,\n    column,\n    columnIndex,\n    rowIndex,\n    rowData\n  });\n  const cellProps = {\n    class: ns.e(\"cell-text\"),\n    columns,\n    column,\n    columnIndex,\n    cellData,\n    isScrolling,\n    rowData,\n    rowIndex\n  };\n  const Cell = CellComponent(cellProps);\n  const kls = [ns.e(\"row-cell\"), column.align === constants.Alignment.CENTER && ns.is(\"align-center\"), column.align === constants.Alignment.RIGHT && ns.is(\"align-right\")];\n  const expandable = rowIndex >= 0 && column.key === expandColumnKey;\n  const expanded = rowIndex >= 0 && expandedRowKeys.includes(rowData[rowKey]);\n  let IconOrPlaceholder;\n  const iconStyle = `margin-inline-start: ${depth * indentSize}px;`;\n  if (expandable) {\n    if (shared.isObject(expandIconProps)) {\n      IconOrPlaceholder = vue.createVNode(expandIcon[\"default\"], vue.mergeProps(expandIconProps, {\n        \"class\": [ns.e(\"expand-icon\"), ns.is(\"expanded\", expanded)],\n        \"size\": iconSize,\n        \"expanded\": expanded,\n        \"style\": iconStyle,\n        \"expandable\": true\n      }), null);\n    } else {\n      IconOrPlaceholder = vue.createVNode(\"div\", {\n        \"style\": [iconStyle, `width: ${iconSize}px; height: ${iconSize}px;`].join(\" \")\n      }, null);\n    }\n  }\n  return vue.createVNode(\"div\", vue.mergeProps({\n    \"class\": kls,\n    \"style\": cellStyle\n  }, extraCellProps), [IconOrPlaceholder, Cell]);\n};\nCellRenderer.inheritAttrs = false;\nexports[\"default\"] = CellRenderer;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;EAuBMA;EAEFC;EACAC,WAFF;EAGED,KAHF;EAIEE,eAJF;EAKEC,WALF;EAMEC,OANF;EAOEC,QAPF;EAQEC,KARF;EASEC,eATF;EAUEC;EACAC,SAXF;EAYEC,eAZF;EAaEF,UAbF;EAcEG;EACAC;GAfF;EAiBEC;MAjBF;EAmBEC;EAEF;IAAEC;MACC;MACH,OAAe;;EAEf;EACE;IAAAC;WAA4DC;IAA5DC;EACD;;EACD,MAAMC;QAAAC;IAAgBC,OAAhB;IAAyBH;IAAzBhB,WAAN;IAEAI,OAAwB;;EAExB,sBAAmB,iBACC,qBACb;;IAGDc;IACWnB,OAAF;IAAWD,MAAX;IAAmBE,WAAnB;IAAgCI,QAAhC;IAAyCC;GAA1C,CADG;EAIjB,MAAMe,SAAc;IAClBF,KADyC;IAEzCnB,OAFyC;IAGzCD,MAHyC;IAIzCE,WAJyC;IAKzCK,QALyC;IAMzCD;IANFA;IASAC;EACEgB;QADgBC;QAAAC;QAAAC;QAAAC;MAAAC;QAAAC;EAQhBtB;IARF;MAWAqB,iBAA0B,mBAA1BE;QAEML,OACJjB,EAAE,CAACuB,EAAE,mBACCvB,EAACwB,IAAP,UAA0B,WAA1B,CAAqCxB;QAIjCkB,gBAAanB;QACboB,UAAQ,EAAWA;QAEzB;QACME,YAAa;;IACnB;MACED,iBAAY,kBAAmB;QAC7BA,8DAAiB;MAAA;IAAA;EAAA;EAAA;IAAA;WAAjB;EAUD,GAXDN,cAWO;;YAGM,qBAEKX","names":["CellRenderer","column","columns","columnIndex","depth","expandIconProps","isScrolling","rowData","rowIndex","ns","style","expandedRowKeys","iconSize","cellProps","indentSize","rowKey","slots","cellRenderer","cellStyle","dataGetter","CellComponent","cellData","dataKey","extraCellProps","class","Cell","kls","expandable","expanded","IconOrPlaceholder","iconStyle","ExpandIcon","e","align"],"sources":["../../../../../../../packages/components/table-v2/src/renderers/cell.tsx"],"sourcesContent":["import { get } from 'lodash-unified'\nimport { isFunction, isObject } from '@element-plus/utils'\nimport { ExpandIcon, TableCell } from '../components'\nimport { Alignment } from '../constants'\nimport { placeholderSign } from '../private'\nimport { componentToSlot, enforceUnit, tryCall } from '../utils'\n\nimport type { FunctionalComponent, UnwrapNestedRefs, VNode } from 'vue'\nimport type { CellRendererParams } from '../types'\nimport type { TableV2RowCellRenderParam } from '../components'\nimport type { UseNamespaceReturn } from '@element-plus/hooks'\nimport type { UseTableReturn } from '../use-table'\nimport type { TableV2Props } from '../table'\n\ntype CellRendererProps = TableV2RowCellRenderParam &\n  Pick<\n    TableV2Props,\n    'cellProps' | 'expandColumnKey' | 'indentSize' | 'iconSize' | 'rowKey'\n  > &\n  UnwrapNestedRefs<Pick<UseTableReturn, 'expandedRowKeys'>> & {\n    ns: UseNamespaceReturn\n  }\n\nconst CellRenderer: FunctionalComponent<CellRendererProps> = (\n  {\n    // renderer props\n    columns,\n    column,\n    columnIndex,\n    depth,\n    expandIconProps,\n    isScrolling,\n    rowData,\n    rowIndex,\n    // from use-table\n    style,\n    expandedRowKeys,\n    ns,\n    // derived props\n    cellProps: _cellProps,\n    expandColumnKey,\n    indentSize,\n    iconSize,\n    rowKey,\n  },\n  { slots }\n) => {\n  const cellStyle = enforceUnit(style)\n\n  if (column.placeholderSign === placeholderSign) {\n    return <div class={ns.em('row-cell', 'placeholder')} style={cellStyle} />\n  }\n  const { cellRenderer, dataKey, dataGetter } = column\n\n  const columnCellRenderer = componentToSlot(cellRenderer)\n\n  const CellComponent =\n    columnCellRenderer ||\n    slots.default ||\n    ((props: CellRendererParams<any>) => <TableCell {...props} />)\n\n  const cellData = isFunction(dataGetter)\n    ? dataGetter({ columns, column, columnIndex, rowData, rowIndex })\n    : get(rowData, dataKey ?? '')\n\n  const extraCellProps = tryCall(_cellProps, {\n    cellData,\n    columns,\n    column,\n    columnIndex,\n    rowIndex,\n    rowData,\n  })\n\n  const cellProps = {\n    class: ns.e('cell-text'),\n    columns,\n    column,\n    columnIndex,\n    cellData,\n    isScrolling,\n    rowData,\n    rowIndex,\n  }\n\n  const Cell = CellComponent(cellProps)\n\n  const kls = [\n    ns.e('row-cell'),\n    column.align === Alignment.CENTER && ns.is('align-center'),\n    column.align === Alignment.RIGHT && ns.is('align-right'),\n  ]\n\n  const expandable = rowIndex >= 0 && column.key === expandColumnKey\n  const expanded = rowIndex >= 0 && expandedRowKeys.includes(rowData[rowKey])\n\n  let IconOrPlaceholder: VNode | undefined\n  const iconStyle = `margin-inline-start: ${depth * indentSize}px;`\n  if (expandable) {\n    if (isObject(expandIconProps)) {\n      IconOrPlaceholder = (\n        <ExpandIcon\n          {...expandIconProps}\n          class={[ns.e('expand-icon'), ns.is('expanded', expanded)]}\n          size={iconSize}\n          expanded={expanded}\n          style={iconStyle}\n          expandable\n        />\n      )\n    } else {\n      IconOrPlaceholder = (\n        <div\n          style={[\n            iconStyle,\n            `width: ${iconSize}px; height: ${iconSize}px;`,\n          ].join(' ')}\n        />\n      )\n    }\n  }\n\n  return (\n    <div class={kls} style={cellStyle} {...extraCellProps}>\n      {IconOrPlaceholder}\n      {Cell}\n    </div>\n  )\n}\n\nCellRenderer.inheritAttrs = false\n\nexport default CellRenderer\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}