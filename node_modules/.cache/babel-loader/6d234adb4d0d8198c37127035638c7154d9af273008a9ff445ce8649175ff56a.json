{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-022255c8\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"s-canvas\"\n};\nconst _hoisted_2 = [\"width\", \"height\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"canvas\", {\n    id: \"s-canvas\",\n    width: $props.contentWidth,\n    height: $props.contentHeight\n  }, null, 8 /* PROPS */, _hoisted_2)]);\n}","map":{"version":3,"mappings":";;;EACOA,KAAK,EAAC;AAAU;;;uBAArBC,oBAEM,OAFNC,UAEM,GADJC,oBAA6E;IAArEC,EAAE,EAAC,UAAU;IAAEC,KAAK,EAAEC,mBAAY;IAAGC,MAAM,EAAED","names":["class","_createElementBlock","_hoisted_1","_createElementVNode","id","width","$props","height"],"sourceRoot":"","sources":["C:\\Users\\14486\\Desktop\\社区公益系统前端\\vue_community\\src\\components\\identify.vue"],"sourcesContent":["<template>\r\n  <div class=\"s-canvas\">\r\n    <canvas id=\"s-canvas\" :width=\"contentWidth\" :height=\"contentHeight\"></canvas>\r\n  </div>\r\n</template>\r\n<script>\r\nexport default {\r\n  name: 'SIdentify',\r\n  props: {\r\n    identifyCode: {\r\n      type: String,\r\n      default: '1234'\r\n    },\r\n    fontSizeMin: {\r\n      type: Number,\r\n      default: 28\r\n    },\r\n    fontSizeMax: {\r\n      type: Number,\r\n      default: 40\r\n    },\r\n    backgroundColorMin: {\r\n      type: Number,\r\n      default: 180\r\n    },\r\n    backgroundColorMax: {\r\n      type: Number,\r\n      default: 240\r\n    },\r\n    colorMin: {\r\n      type: Number,\r\n      default: 50\r\n    },\r\n    colorMax: {\r\n      type: Number,\r\n      default: 160\r\n    },\r\n    lineColorMin: {\r\n      type: Number,\r\n      default: 40\r\n    },\r\n    lineColorMax: {\r\n      type: Number,\r\n      default: 180\r\n    },\r\n    dotColorMin: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    dotColorMax: {\r\n      type: Number,\r\n      default: 255\r\n    },\r\n    contentWidth: {\r\n      type: Number,\r\n      default: 112\r\n    },\r\n    contentHeight: {\r\n      type: Number,\r\n      default: 40\r\n    }\r\n  },\r\n  methods: {\r\n    // 生成一个随机数\r\n    randomNum (min, max) {\r\n      return Math.floor(Math.random() * (max - min) + min)\r\n    },\r\n    // 生成一个随机的颜色\r\n    randomColor (min, max) {\r\n      var r = this.randomNum(min, max)\r\n      var g = this.randomNum(min, max)\r\n      var b = this.randomNum(min, max)\r\n      return 'rgb(' + r + ',' + g + ',' + b + ')'\r\n    },\r\n    drawPic () {\r\n      var canvas = document.getElementById('s-canvas')\r\n      var ctx = canvas.getContext('2d')\r\n      ctx.textBaseline = 'bottom'\r\n      // 绘制背景\r\n      ctx.fillStyle = this.randomColor(\r\n          this.backgroundColorMin,\r\n          this.backgroundColorMax\r\n      )\r\n      ctx.fillRect(0, 0, this.contentWidth, this.contentHeight)\r\n      // 绘制文字\r\n      for (let i = 0; i < this.identifyCode.length; i++) {\r\n        this.drawText(ctx, this.identifyCode[i], i)\r\n      }\r\n      this.drawLine(ctx)\r\n      this.drawDot(ctx)\r\n    },\r\n    drawText (ctx, txt, i) {\r\n      ctx.fillStyle = this.randomColor(this.colorMin, this.colorMax)\r\n      ctx.font =\r\n          this.randomNum(this.fontSizeMin, this.fontSizeMax) + 'px SimHei'\r\n      var x = (i + 1) * (this.contentWidth / (this.identifyCode.length + 1))\r\n      var y = this.randomNum(this.fontSizeMax, this.contentHeight - 5)\r\n      var deg = this.randomNum(-30, 30)\r\n      // 修改坐标原点和旋转角度\r\n      ctx.translate(x, y)\r\n      ctx.rotate(deg * Math.PI / 270)\r\n      ctx.fillText(txt, 0, 0)\r\n      // 恢复坐标原点和旋转角度\r\n      ctx.rotate(-deg * Math.PI / 270)\r\n      ctx.translate(-x, -y)\r\n    },\r\n    drawLine (ctx) {\r\n      // 绘制干扰线\r\n      for (let i = 0; i < 2; i++) {\r\n        ctx.strokeStyle = this.randomColor(\r\n            this.lineColorMin,\r\n            this.lineColorMax\r\n        )\r\n        ctx.beginPath()\r\n        ctx.moveTo(\r\n            this.randomNum(0, this.contentWidth),\r\n            this.randomNum(0, this.contentHeight)\r\n        )\r\n        ctx.lineTo(\r\n            this.randomNum(0, this.contentWidth),\r\n            this.randomNum(0, this.contentHeight)\r\n        )\r\n        ctx.stroke()\r\n      }\r\n    },\r\n    drawDot (ctx) {\r\n      // 绘制干扰点\r\n      for (let i = 0; i < 20; i++) {\r\n        ctx.fillStyle = this.randomColor(0, 255)\r\n        ctx.beginPath()\r\n        ctx.arc(\r\n            this.randomNum(0, this.contentWidth),\r\n            this.randomNum(0, this.contentHeight),\r\n            1,\r\n            0,\r\n            2 * Math.PI\r\n        )\r\n        ctx.fill()\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    identifyCode () {\r\n      this.drawPic()\r\n    }\r\n  },\r\n  mounted () {\r\n    this.drawPic()\r\n  }\r\n}\r\n</script>\r\n<style lang='scss' scoped>\r\n.s-canvas {\r\n  height: 38px;\r\n}\r\n.s-canvas canvas{\r\n  margin-top: 1px;\r\n  margin-left: 8px;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}