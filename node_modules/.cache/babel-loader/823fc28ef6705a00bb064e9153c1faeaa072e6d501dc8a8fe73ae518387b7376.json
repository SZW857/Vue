{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nrequire('../../../../utils/index.js');\nrequire('../../../../tokens/index.js');\nrequire('../../../../hooks/index.js');\nvar utils = require('../utils.js');\nvar useShortcut = require('./use-shortcut.js');\nvar datePicker = require('../../../../tokens/date-picker.js');\nvar index = require('../../../../hooks/use-namespace/index.js');\nvar index$1 = require('../../../../hooks/use-locale/index.js');\nvar shared = require('@vue/shared');\nconst useRangePicker = (props, {\n  defaultValue,\n  leftDate,\n  rightDate,\n  unit,\n  onParsedValueChanged\n}) => {\n  const {\n    emit\n  } = vue.getCurrentInstance();\n  const {\n    pickerNs\n  } = vue.inject(datePicker.ROOT_PICKER_INJECTION_KEY);\n  const drpNs = index.useNamespace(\"date-range-picker\");\n  const {\n    t,\n    lang\n  } = index$1.useLocale();\n  const handleShortcutClick = useShortcut.useShortcut(lang);\n  const minDate = vue.ref();\n  const maxDate = vue.ref();\n  const rangeState = vue.ref({\n    endDate: null,\n    selecting: false\n  });\n  const handleChangeRange = val => {\n    rangeState.value = val;\n  };\n  const handleRangeConfirm = (visible = false) => {\n    const _minDate = vue.unref(minDate);\n    const _maxDate = vue.unref(maxDate);\n    if (utils.isValidRange([_minDate, _maxDate])) {\n      emit(\"pick\", [_minDate, _maxDate], visible);\n    }\n  };\n  const onSelect = selecting => {\n    rangeState.value.selecting = selecting;\n    if (!selecting) {\n      rangeState.value.endDate = null;\n    }\n  };\n  const restoreDefault = () => {\n    const [start, end] = utils.getDefaultValue(vue.unref(defaultValue), {\n      lang: vue.unref(lang),\n      unit,\n      unlinkPanels: props.unlinkPanels\n    });\n    minDate.value = void 0;\n    maxDate.value = void 0;\n    leftDate.value = start;\n    rightDate.value = end;\n  };\n  vue.watch(defaultValue, val => {\n    if (val) {\n      restoreDefault();\n    }\n  }, {\n    immediate: true\n  });\n  vue.watch(() => props.parsedValue, parsedValue => {\n    if (shared.isArray(parsedValue) && parsedValue.length === 2) {\n      const [start, end] = parsedValue;\n      minDate.value = start;\n      leftDate.value = start;\n      maxDate.value = end;\n      onParsedValueChanged(vue.unref(minDate), vue.unref(maxDate));\n    } else {\n      restoreDefault();\n    }\n  }, {\n    immediate: true\n  });\n  return {\n    minDate,\n    maxDate,\n    rangeState,\n    lang,\n    ppNs: pickerNs,\n    drpNs,\n    handleChangeRange,\n    handleRangeConfirm,\n    handleShortcutClick,\n    onSelect,\n    t\n  };\n};\nexports.useRangePicker = useRangePicker;","map":{"version":3,"mappings":"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","names":["useRangePicker","props","defaultValue","leftDate","rightDate","unit","onParsedValueChanged","emit","getCurrentInstance","pickerNs","inject","ROOT_PICKER_INJECTION_KEY","drpNs","useNamespace","t","lang","useLocale","handleShortcutClick","useShortcut","minDate","ref","maxDate","rangeState","endDate","selecting","handleChangeRange","val","value","handleRangeConfirm","visible","_minDate","unref","_maxDate","isValidRange","onSelect","restoreDefault","start","end","getDefaultValue","unlinkPanels","watch","immediate","parsedValue","isArray","length","ppNs"],"sources":["../../../../../../../packages/components/date-picker/src/composables/use-range-picker.ts"],"sourcesContent":["import { getCurrentInstance, inject, ref, unref, watch } from 'vue'\nimport { isArray } from '@element-plus/utils'\nimport { ROOT_PICKER_INJECTION_KEY } from '@element-plus/tokens'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { getDefaultValue, isValidRange } from '../utils'\nimport { useShortcut } from './use-shortcut'\n\nimport type { Ref } from 'vue'\nimport type { Dayjs } from 'dayjs'\nimport type { PanelRangeSharedProps, RangeState } from '../props/shared'\nimport type { DefaultValue } from '../utils'\n\ntype UseRangePickerProps = {\n  onParsedValueChanged: (\n    minDate: Dayjs | undefined,\n    maxDate: Dayjs | undefined\n  ) => void\n  defaultValue: Ref<DefaultValue>\n  leftDate: Ref<Dayjs>\n  rightDate: Ref<Dayjs>\n  unit: 'month' | 'year'\n}\n\nexport const useRangePicker = (\n  props: PanelRangeSharedProps,\n  {\n    defaultValue,\n    leftDate,\n    rightDate,\n    unit,\n\n    onParsedValueChanged,\n  }: UseRangePickerProps\n) => {\n  const { emit } = getCurrentInstance()!\n\n  const { pickerNs } = inject(ROOT_PICKER_INJECTION_KEY)!\n  const drpNs = useNamespace('date-range-picker')\n  const { t, lang } = useLocale()\n  const handleShortcutClick = useShortcut(lang)\n  const minDate = ref<Dayjs>()\n  const maxDate = ref<Dayjs>()\n  const rangeState = ref<RangeState>({\n    endDate: null,\n    selecting: false,\n  })\n\n  const handleChangeRange = (val: RangeState) => {\n    rangeState.value = val\n  }\n\n  const handleRangeConfirm = (visible = false) => {\n    const _minDate = unref(minDate)\n    const _maxDate = unref(maxDate)\n\n    if (isValidRange([_minDate, _maxDate])) {\n      emit('pick', [_minDate, _maxDate], visible)\n    }\n  }\n\n  const onSelect = (selecting: boolean) => {\n    rangeState.value.selecting = selecting\n    if (!selecting) {\n      rangeState.value.endDate = null\n    }\n  }\n\n  const restoreDefault = () => {\n    const [start, end] = getDefaultValue(unref(defaultValue), {\n      lang: unref(lang),\n      unit,\n      unlinkPanels: props.unlinkPanels,\n    })\n    minDate.value = undefined\n    maxDate.value = undefined\n    leftDate.value = start\n    rightDate.value = end\n  }\n\n  watch(\n    defaultValue,\n    (val) => {\n      if (val) {\n        restoreDefault()\n      }\n    },\n    { immediate: true }\n  )\n\n  watch(\n    () => props.parsedValue,\n    (parsedValue) => {\n      if (isArray(parsedValue) && parsedValue.length === 2) {\n        const [start, end] = parsedValue\n        minDate.value = start\n        leftDate.value = start\n        maxDate.value = end\n        onParsedValueChanged(unref(minDate), unref(maxDate))\n      } else {\n        restoreDefault()\n      }\n    },\n    { immediate: true }\n  )\n\n  return {\n    minDate,\n    maxDate,\n    rangeState,\n    lang,\n    ppNs: pickerNs,\n    drpNs,\n\n    handleChangeRange,\n    handleRangeConfirm,\n    handleShortcutClick,\n    onSelect,\n    t,\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}