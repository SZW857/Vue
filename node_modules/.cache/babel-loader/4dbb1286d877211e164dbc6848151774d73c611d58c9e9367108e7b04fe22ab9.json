{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nrequire('../../../utils/index.js');\nrequire('../../../hooks/index.js');\nvar runtime = require('../../../utils/vue/props/runtime.js');\nvar index = require('../../../hooks/use-common-props/index.js');\nvar index$1 = require('../../../hooks/use-global-config/index.js');\nconst messageConfig = {};\nconst configProviderProps = runtime.buildProps({\n  a11y: {\n    type: Boolean,\n    default: true\n  },\n  locale: {\n    type: runtime.definePropType(Object)\n  },\n  size: index.useSizeProp,\n  button: {\n    type: runtime.definePropType(Object)\n  },\n  experimentalFeatures: {\n    type: runtime.definePropType(Object)\n  },\n  keyboardNavigation: {\n    type: Boolean,\n    default: true\n  },\n  message: {\n    type: runtime.definePropType(Object)\n  },\n  zIndex: Number,\n  namespace: {\n    type: String,\n    default: \"el\"\n  }\n});\nconst ConfigProvider = vue.defineComponent({\n  name: \"ElConfigProvider\",\n  props: configProviderProps,\n  setup(props, {\n    slots\n  }) {\n    vue.watch(() => props.message, val => {\n      Object.assign(messageConfig, val != null ? val : {});\n    }, {\n      immediate: true,\n      deep: true\n    });\n    const config = index$1.provideGlobalConfig(props);\n    return () => vue.renderSlot(slots, \"default\", {\n      config: config == null ? void 0 : config.value\n    });\n  }\n});\nexports.configProviderProps = configProviderProps;\nexports[\"default\"] = ConfigProvider;\nexports.messageConfig = messageConfig;","map":{"version":3,"mappings":";;;;;;;;;;;AAGY,MAACA,aAAa,GAAG;AACjB,MAACC,mBAAmB,GAAGC,kBAAU,CAAC;EAC5CC,IAAI,EAAE;IACJC,IAAI,EAAEC,OAAO;IACbC,OAAO,EAAE;EACb,CAAG;EACDC,MAAM,EAAE;IACNH,IAAI,EAAEI,sBAAc,CAACC,MAAM;EAC/B,CAAG;EACDC,IAAI,EAAEC,iBAAW;EACjBC,MAAM,EAAE;IACNR,IAAI,EAAEI,sBAAc,CAACC,MAAM;EAC/B,CAAG;EACDI,oBAAoB,EAAE;IACpBT,IAAI,EAAEI,sBAAc,CAACC,MAAM;EAC/B,CAAG;EACDK,kBAAkB,EAAE;IAClBV,IAAI,EAAEC,OAAO;IACbC,OAAO,EAAE;EACb,CAAG;EACDS,OAAO,EAAE;IACPX,IAAI,EAAEI,sBAAc,CAACC,MAAM;EAC/B,CAAG;EACDO,MAAM,EAAEC,MAAM;EACdC,SAAS,EAAE;IACTd,IAAI,EAAEe,MAAM;IACZb,OAAO,EAAE;EACb;AACA,CAAC;AACI,MAACc,cAAc,GAAGC,mBAAe,CAAC;EACrCC,IAAI,EAAE,kBAAkB;EACxBC,KAAK,EAAEtB,mBAAmB;EAC1BuB,KAAK,CAACD,KAAK,EAAE;IAAEE;EAAK,CAAE,EAAE;IACtBC,SAAK,CAAC,MAAMH,KAAK,CAACR,OAAO,EAAGY,GAAG,IAAK;MAClClB,MAAM,CAACmB,MAAM,CAAC5B,aAAa,EAAE2B,GAAG,IAAI,IAAI,GAAGA,GAAG,GAAG,EAAE,CAAC;IAC1D,CAAK,EAAE;MAAEE,SAAS,EAAE,IAAI;MAAEC,IAAI,EAAE;IAAI,CAAE,CAAC;IACnC,MAAMC,MAAM,GAAGC,2BAAmB,CAACT,KAAK,CAAC;IACzC,OAAO,MAAMU,cAAU,CAACR,KAAK,EAAE,SAAS,EAAE;MAAEM,MAAM,EAAEA,MAAM,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACG;IAAK,CAAE,CAAC;EACjG;AACA,CAAC","names":["messageConfig","configProviderProps","buildProps","a11y","type","Boolean","default","locale","definePropType","Object","size","useSizeProp","button","experimentalFeatures","keyboardNavigation","message","zIndex","Number","namespace","String","ConfigProvider","defineComponent","name","props","setup","slots","watch","val","assign","immediate","deep","config","provideGlobalConfig","renderSlot","value"],"sources":["../../../../../../packages/components/config-provider/src/config-provider.ts"],"sourcesContent":["import { defineComponent, renderSlot, watch } from 'vue'\nimport { buildProps, definePropType } from '@element-plus/utils'\nimport { provideGlobalConfig, useSizeProp } from '@element-plus/hooks'\n\nimport type { ExtractPropTypes } from 'vue'\nimport type { ExperimentalFeatures } from '@element-plus/tokens'\nimport type { Language } from '@element-plus/locale'\nimport type { ButtonConfigContext } from '@element-plus/components/button'\nimport type { MessageConfigContext } from '@element-plus/components/message'\n\nexport const messageConfig: MessageConfigContext = {}\n\nexport const configProviderProps = buildProps({\n  // Controlling if the users want a11y features.\n  a11y: {\n    type: Boolean,\n    default: true,\n  },\n\n  locale: {\n    type: definePropType<Language>(Object),\n  },\n\n  size: useSizeProp,\n\n  button: {\n    type: definePropType<ButtonConfigContext>(Object),\n  },\n\n  experimentalFeatures: {\n    type: definePropType<ExperimentalFeatures>(Object),\n  },\n\n  // Controls if we should handle keyboard navigation\n  keyboardNavigation: {\n    type: Boolean,\n    default: true,\n  },\n\n  message: {\n    type: definePropType<MessageConfigContext>(Object),\n  },\n\n  zIndex: Number,\n\n  namespace: {\n    type: String,\n    default: 'el',\n  },\n} as const)\nexport type ConfigProviderProps = ExtractPropTypes<typeof configProviderProps>\n\nconst ConfigProvider = defineComponent({\n  name: 'ElConfigProvider',\n  props: configProviderProps,\n\n  setup(props, { slots }) {\n    watch(\n      () => props.message,\n      (val) => {\n        Object.assign(messageConfig, val ?? {})\n      },\n      { immediate: true, deep: true }\n    )\n    const config = provideGlobalConfig(props)\n    return () => renderSlot(slots, 'default', { config: config?.value })\n  },\n})\nexport type ConfigProviderInstance = InstanceType<typeof ConfigProvider>\n\nexport default ConfigProvider\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}