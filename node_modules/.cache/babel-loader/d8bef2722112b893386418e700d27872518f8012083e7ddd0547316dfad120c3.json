{"ast":null,"code":"import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_button = _resolveComponent(\"el-button\");\n  return _openBlock(), _createBlock(_component_el_button, {\n    onOnclick: _ctx.message\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"dian\")]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onOnclick\"]);\n}","map":{"version":3,"mappings":";;;uBACEA,aAA8CC;IAAlCC,SAAO,EAAEC;EAAO;sBAAE,MAAI,kBAAJ,MAAI","names":["_createBlock","_component_el_button","onOnclick","_ctx"],"sourceRoot":"","sources":["C:\\Users\\14486\\Desktop\\社区公益系统前端\\vue_community\\src\\NavigationBar\\PointsGoods.vue"],"sourcesContent":["<template>\r\n  <el-button @onclick=\"message\">dian</el-button>\r\n</template>\r\n<script>\r\n\r\nimport { ElMessage } from 'element-plus'\r\nimport SIdentify from '@/components/identify'\r\n\r\nexport default {\r\n  name:'ForgotPwdTemplate',\r\n  components: {SIdentify},\r\n  data() {\r\n    var validateVerifycode = (rule, value, callback) => {\r\n      const newVal = this.identifyCode.toUpperCase()\r\n      const identifyStr = this.identifyCode.toLowerCase()\r\n      if (value === '')  {\r\n        return callback(new Error('验证码不能为空'))\r\n      }else if (value === identifyStr) {\r\n        callback()\r\n      }else if (value === newVal){\r\n        callback()\r\n      }else {\r\n        console.log('validateVerifycode:', value)\r\n        callback(new Error('验证码不正确!'))\r\n      }\r\n      // setTimeout(() => {\r\n      //   if (!Number.isInteger(value)) {\r\n      //     callback(new Error('请输入数字值'))\r\n      //   } else {\r\n      //     if (value < 18) {\r\n      //       callback(new Error('必须年满18岁'))\r\n      //     } else {\r\n      //       callback()\r\n      //     }\r\n      //   }\r\n      // }, 1000)\r\n    }\r\n    var telephoneNumber = (rule, value, callback) => {\r\n      if (value === '') {\r\n        callback(new Error('请输入手机号'))\r\n      }else if (this.teleRuleCheck(value)){\r\n        callback()\r\n      } else {\r\n        callback(\"手机格式不正确\");\r\n      }\r\n    }\r\n    var idCard = (rule, value, callback) => {\r\n      if (value === '') {\r\n        callback(new Error('请输入身份证号码'))\r\n      } else if (this.idCardRuleCheck(value)) {\r\n        callback()\r\n      } else {\r\n        callback(new Error('身份证格式不对'))\r\n      }\r\n    }\r\n    var validatePass = (rule, value, callback) => {\r\n      if (value === '') {\r\n        callback(new Error('请输入密码'))\r\n        console.log(value)\r\n      }else{\r\n        if (this.passwdCheck(value)) {\r\n          this.$refs.ruleForm.validateField('confirmPass')\r\n          callback()\r\n        }else {\r\n          callback(new Error(\"密码格式不对(数字+密码组合)\"))\r\n        }\r\n      }\r\n\r\n\r\n\r\n    }\r\n    var validatePass2 = (rule, value, callback) => {\r\n      if (value === '') {\r\n        callback(new Error('请再次输入密码'))\r\n      } else if (value !== this.ruleForm.pass) {\r\n        callback(new Error('两次输入密码不一致!'))\r\n      } else {\r\n        callback()\r\n      }\r\n    }\r\n\r\n    return {\r\n\r\n    }\r\n\r\n\r\n  },\r\n  methods: {\r\n    submitForm(formName) {\r\n      this.$refs[formName].validate((valid) => {\r\n        if (valid) {\r\n          if(this.active++>3) this.active=0\r\n        } else {\r\n          ElMessage({\r\n            message: '完善信息方可进入下一步',\r\n            grouping:true,\r\n            type: 'error',\r\n          })\r\n        }\r\n      })\r\n    },\r\n    sendMsg() {\r\n      if (this.canClick) return\r\n      this.canClick = true\r\n      this.content = this.totalTime + 's后重新发送'\r\n      let clock = window.setInterval(() => {\r\n        this.totalTime--\r\n        this.content = this.totalTime + 's后重新发送'\r\n        if (this.totalTime < 0) {\r\n          window.clearInterval(clock)\r\n          this.content = '重新发送短信'\r\n          this.totalTime = 10\r\n          this.canClick = false\r\n        }\r\n      }, 1000)\r\n    },\r\n\r\n    resetForm(formName) {\r\n      this.$refs[formName].resetFields()\r\n    },\r\n    prev(){\r\n      --this.active;\r\n      if (this.active<0) this.active=0\r\n    },\r\n    sub(formName){\r\n      this.$refs[formName].validate((valid) => {\r\n        if (valid) {\r\n          this.active++;\r\n          if (this.active=4){\r\n            ElMessage({\r\n              message: '恭喜你！已重获密码',\r\n              type: 'success',\r\n            })\r\n            this.$router.replace('/finish')\r\n          }\r\n        } else {\r\n          alert('请输入正确的密码')\r\n          console.log('error submit!!')\r\n        }\r\n      })\r\n    },\r\n    teleRuleCheck(stringber) {\r\n      var pattern = /^1[34578]\\d{9}$/;\r\n      if (pattern.test(stringber)) {\r\n        return true;\r\n      }\r\n      console.log('check mobile phone ' + stringber + ' failed.');\r\n      return false;\r\n    },\r\n    idCardRuleCheck(string) {\r\n      var reg = /(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)/;\r\n      if(reg.test(string) === false) {\r\n        return  false;\r\n      }else {\r\n        return true;\r\n      }\r\n    },\r\n    //校验密码强度\r\n    passwdCheck(num){\r\n      let reg = /^(?![\\d]+$)(?![a-zA-Z]+$)(?![^\\da-zA-Z]+$).{6,20}$/;\r\n      if (reg.test(num) === false){\r\n        return false;\r\n      }else {\r\n        return true;\r\n      }\r\n    },\r\n    // 生成随机数\r\n    randomNum(min, max) {\r\n      return Math.floor(Math.random() * (max - min) + min)\r\n    },\r\n    // 切换验证码\r\n    refreshCode() {\r\n      this.identifyCode = ''\r\n      this.makeCode(this.identifyCodes, 4)\r\n    },\r\n    // 生成四位随机验证码\r\n    makeCode(o, l) {\r\n      for (let i = 0; i < l; i++) {\r\n        this.identifyCode += this.identifyCodes[\r\n            this.randomNum(0, this.identifyCodes.length)\r\n            ]\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    // 验证码初始化\r\n    this.identifyCode = ''\r\n    this.makeCode(this.identifyCodes, 4)\r\n  },\r\n}\r\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}