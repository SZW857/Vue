{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nrequire('../../../tokens/index.js');\nrequire('../../../hooks/index.js');\nvar uploadList = require('./upload-list2.js');\nvar uploadContent = require('./upload-content2.js');\nvar useHandlers = require('./use-handlers.js');\nvar upload = require('./upload.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar index = require('../../../hooks/use-common-props/index.js');\nvar upload$1 = require('../../../tokens/upload.js');\nconst __default__ = vue.defineComponent({\n  name: \"ElUpload\"\n});\nconst _sfc_main = /* @__PURE__ */vue.defineComponent({\n  ...__default__,\n  props: upload.uploadProps,\n  setup(__props, {\n    expose\n  }) {\n    const props = __props;\n    const slots = vue.useSlots();\n    const disabled = index.useDisabled();\n    const uploadRef = vue.shallowRef();\n    const {\n      abort,\n      submit,\n      clearFiles,\n      uploadFiles,\n      handleStart,\n      handleError,\n      handleRemove,\n      handleSuccess,\n      handleProgress\n    } = useHandlers.useHandlers(props, uploadRef);\n    const isPictureCard = vue.computed(() => props.listType === \"picture-card\");\n    const uploadContentProps = vue.computed(() => ({\n      ...props,\n      fileList: uploadFiles.value,\n      onStart: handleStart,\n      onProgress: handleProgress,\n      onSuccess: handleSuccess,\n      onError: handleError,\n      onRemove: handleRemove\n    }));\n    vue.onBeforeUnmount(() => {\n      uploadFiles.value.forEach(({\n        url\n      }) => {\n        if (url == null ? void 0 : url.startsWith(\"blob:\")) URL.revokeObjectURL(url);\n      });\n    });\n    vue.provide(upload$1.uploadContextKey, {\n      accept: vue.toRef(props, \"accept\")\n    });\n    expose({\n      abort,\n      submit,\n      clearFiles,\n      handleStart,\n      handleRemove\n    });\n    return (_ctx, _cache) => {\n      return vue.openBlock(), vue.createElementBlock(\"div\", null, [vue.unref(isPictureCard) && _ctx.showFileList ? (vue.openBlock(), vue.createBlock(uploadList[\"default\"], {\n        key: 0,\n        disabled: vue.unref(disabled),\n        \"list-type\": _ctx.listType,\n        files: vue.unref(uploadFiles),\n        \"handle-preview\": _ctx.onPreview,\n        onRemove: vue.unref(handleRemove)\n      }, vue.createSlots({\n        append: vue.withCtx(() => [vue.createVNode(uploadContent[\"default\"], vue.mergeProps({\n          ref_key: \"uploadRef\",\n          ref: uploadRef\n        }, vue.unref(uploadContentProps)), {\n          default: vue.withCtx(() => [vue.unref(slots).trigger ? vue.renderSlot(_ctx.$slots, \"trigger\", {\n            key: 0\n          }) : vue.createCommentVNode(\"v-if\", true), !vue.unref(slots).trigger && vue.unref(slots).default ? vue.renderSlot(_ctx.$slots, \"default\", {\n            key: 1\n          }) : vue.createCommentVNode(\"v-if\", true)]),\n          _: 3\n        }, 16)]),\n        _: 2\n      }, [_ctx.$slots.file ? {\n        name: \"default\",\n        fn: vue.withCtx(({\n          file\n        }) => [vue.renderSlot(_ctx.$slots, \"file\", {\n          file\n        })])\n      } : void 0]), 1032, [\"disabled\", \"list-type\", \"files\", \"handle-preview\", \"onRemove\"])) : vue.createCommentVNode(\"v-if\", true), !vue.unref(isPictureCard) || vue.unref(isPictureCard) && !_ctx.showFileList ? (vue.openBlock(), vue.createBlock(uploadContent[\"default\"], vue.mergeProps({\n        key: 1,\n        ref_key: \"uploadRef\",\n        ref: uploadRef\n      }, vue.unref(uploadContentProps)), {\n        default: vue.withCtx(() => [vue.unref(slots).trigger ? vue.renderSlot(_ctx.$slots, \"trigger\", {\n          key: 0\n        }) : vue.createCommentVNode(\"v-if\", true), !vue.unref(slots).trigger && vue.unref(slots).default ? vue.renderSlot(_ctx.$slots, \"default\", {\n          key: 1\n        }) : vue.createCommentVNode(\"v-if\", true)]),\n        _: 3\n      }, 16)) : vue.createCommentVNode(\"v-if\", true), _ctx.$slots.trigger ? vue.renderSlot(_ctx.$slots, \"default\", {\n        key: 2\n      }) : vue.createCommentVNode(\"v-if\", true), vue.renderSlot(_ctx.$slots, \"tip\"), !vue.unref(isPictureCard) && _ctx.showFileList ? (vue.openBlock(), vue.createBlock(uploadList[\"default\"], {\n        key: 3,\n        disabled: vue.unref(disabled),\n        \"list-type\": _ctx.listType,\n        files: vue.unref(uploadFiles),\n        \"handle-preview\": _ctx.onPreview,\n        onRemove: vue.unref(handleRemove)\n      }, vue.createSlots({\n        _: 2\n      }, [_ctx.$slots.file ? {\n        name: \"default\",\n        fn: vue.withCtx(({\n          file\n        }) => [vue.renderSlot(_ctx.$slots, \"file\", {\n          file\n        })])\n      } : void 0]), 1032, [\"disabled\", \"list-type\", \"files\", \"handle-preview\", \"onRemove\"])) : vue.createCommentVNode(\"v-if\", true)]);\n    };\n  }\n});\nvar Upload = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/upload/src/upload.vue\"]]);\nexports[\"default\"] = Upload;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;uCAoEc;EACZA,IAAM;AACR;;;;;;;;IAIA,MAAMC,QAAQC,YAAS;IACvB,MAAMC,WAAWC,iBAAY;IAE7B,MAAMC,YAAYC,cAAkC;IAC9C;MACJC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;IAAA,CACE,2BAAYC,OAAOX,SAAS;IAEhC,MAAMY,aAAgB,gBAAS,MAAMD,MAAME,aAAa,cAAc;IAEhE,2BAAqBC,aAA6B,OAAO;MAC7D,GAAGH;MACHI,UAAUV,WAAY;MACtBW,OAAS;MACTC,UAAY;MACZC,SAAW;MACXC,OAAS;MACTC,QAAU;IAAA,CACV;IAEFC,oBAAgB,MAAM;MACpBhB,YAAYiB,KAAM,SAAQ,CAAC;QAAEC;MAAU;QACjC,uBAAuB,6BAAGC,IAAIC,gBAAgBF,GAAG;MAAA,CACtD;IAAA,CACF;IAEDG,YAAQC,yBAAkB;MACxBC,QAAQC,SAAM,QAAO,QAAQ;IAAA,CAC9B;IAEYC;MAEX5B;MAEAC;MAEAC;MAEAE;MAEAE;IAAA,CACD","names":["name","slots","useSlots","disabled","useDisabled","uploadRef","shallowRef","abort","submit","clearFiles","uploadFiles","handleStart","handleError","handleRemove","handleSuccess","handleProgress","props","isPictureCard","listType","computed","fileList","onStart","onProgress","onSuccess","onError","onRemove","onBeforeUnmount","value","url","URL","revokeObjectURL","provide","uploadContextKey","accept","toRef","expose"],"sources":["../../../../../../packages/components/upload/src/upload.vue"],"sourcesContent":["<template>\n  <div>\n    <upload-list\n      v-if=\"isPictureCard && showFileList\"\n      :disabled=\"disabled\"\n      :list-type=\"listType\"\n      :files=\"uploadFiles\"\n      :handle-preview=\"onPreview\"\n      @remove=\"handleRemove\"\n    >\n      <template v-if=\"$slots.file\" #default=\"{ file }\">\n        <slot name=\"file\" :file=\"file\" />\n      </template>\n      <template #append>\n        <upload-content ref=\"uploadRef\" v-bind=\"uploadContentProps\">\n          <slot v-if=\"slots.trigger\" name=\"trigger\" />\n          <slot v-if=\"!slots.trigger && slots.default\" />\n        </upload-content>\n      </template>\n    </upload-list>\n\n    <upload-content\n      v-if=\"!isPictureCard || (isPictureCard && !showFileList)\"\n      ref=\"uploadRef\"\n      v-bind=\"uploadContentProps\"\n    >\n      <slot v-if=\"slots.trigger\" name=\"trigger\" />\n      <slot v-if=\"!slots.trigger && slots.default\" />\n    </upload-content>\n\n    <slot v-if=\"$slots.trigger\" />\n    <slot name=\"tip\" />\n    <upload-list\n      v-if=\"!isPictureCard && showFileList\"\n      :disabled=\"disabled\"\n      :list-type=\"listType\"\n      :files=\"uploadFiles\"\n      :handle-preview=\"onPreview\"\n      @remove=\"handleRemove\"\n    >\n      <template v-if=\"$slots.file\" #default=\"{ file }\">\n        <slot name=\"file\" :file=\"file\" />\n      </template>\n    </upload-list>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport {\n  computed,\n  onBeforeUnmount,\n  provide,\n  shallowRef,\n  toRef,\n  useSlots,\n} from 'vue'\nimport { uploadContextKey } from '@element-plus/tokens'\nimport { useDisabled } from '@element-plus/hooks'\n\nimport UploadList from './upload-list.vue'\nimport UploadContent from './upload-content.vue'\nimport { useHandlers } from './use-handlers'\nimport { uploadProps } from './upload'\nimport type {\n  UploadContentInstance,\n  UploadContentProps,\n} from './upload-content'\n\ndefineOptions({\n  name: 'ElUpload',\n})\n\nconst props = defineProps(uploadProps)\n\nconst slots = useSlots()\nconst disabled = useDisabled()\n\nconst uploadRef = shallowRef<UploadContentInstance>()\nconst {\n  abort,\n  submit,\n  clearFiles,\n  uploadFiles,\n  handleStart,\n  handleError,\n  handleRemove,\n  handleSuccess,\n  handleProgress,\n} = useHandlers(props, uploadRef)\n\nconst isPictureCard = computed(() => props.listType === 'picture-card')\n\nconst uploadContentProps = computed<UploadContentProps>(() => ({\n  ...props,\n  fileList: uploadFiles.value,\n  onStart: handleStart,\n  onProgress: handleProgress,\n  onSuccess: handleSuccess,\n  onError: handleError,\n  onRemove: handleRemove,\n}))\n\nonBeforeUnmount(() => {\n  uploadFiles.value.forEach(({ url }) => {\n    if (url?.startsWith('blob:')) URL.revokeObjectURL(url)\n  })\n})\n\nprovide(uploadContextKey, {\n  accept: toRef(props, 'accept'),\n})\n\ndefineExpose({\n  /** @description cancel upload request */\n  abort,\n  /** @description upload the file list manually */\n  submit,\n  /** @description clear the file list  */\n  clearFiles,\n  /** @description select the file manually */\n  handleStart,\n  /** @description remove the file manually */\n  handleRemove,\n})\n</script>\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}