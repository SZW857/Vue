{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nrequire('../../../tokens/index.js');\nrequire('../../../hooks/index.js');\nvar buttonGroup = require('./button-group.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar button = require('../../../tokens/button.js');\nvar index = require('../../../hooks/use-namespace/index.js');\nconst __default__ = vue.defineComponent({\n  name: \"ElButtonGroup\"\n});\nconst _sfc_main = /* @__PURE__ */vue.defineComponent({\n  ...__default__,\n  props: buttonGroup.buttonGroupProps,\n  setup(__props) {\n    const props = __props;\n    vue.provide(button.buttonGroupContextKey, vue.reactive({\n      size: vue.toRef(props, \"size\"),\n      type: vue.toRef(props, \"type\")\n    }));\n    const ns = index.useNamespace(\"button\");\n    return (_ctx, _cache) => {\n      return vue.openBlock(), vue.createElementBlock(\"div\", {\n        class: vue.normalizeClass(`${vue.unref(ns).b(\"group\")}`)\n      }, [vue.renderSlot(_ctx.$slots, \"default\")], 2);\n    };\n  }\n});\nvar ButtonGroup = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/button/src/button-group.vue\"]]);\nexports[\"default\"] = ButtonGroup;","map":{"version":3,"mappings":";;;;;;;;;;;;uCAWc;EACZA,IAAM;AACR;;;;;;IAEAC,YACEC,8BACAC,YAAS;MACPC,MAAMC,SAAM,QAAO,MAAM;MACzBC,MAAMD,SAAM,QAAO,MAAM;IAAA,CAC1B,CACH;IACM,WAAKE,mBAAa,QAAQ","names":["name","provide","buttonGroupContextKey","reactive","size","toRef","type","useNamespace"],"sources":["../../../../../../packages/components/button/src/button-group.vue"],"sourcesContent":["<template>\n  <div :class=\"`${ns.b('group')}`\">\n    <slot />\n  </div>\n</template>\n<script lang=\"ts\" setup>\nimport { provide, reactive, toRef } from 'vue'\nimport { buttonGroupContextKey } from '@element-plus/tokens'\nimport { useNamespace } from '@element-plus/hooks'\nimport { buttonGroupProps } from './button-group'\n\ndefineOptions({\n  name: 'ElButtonGroup',\n})\nconst props = defineProps(buttonGroupProps)\nprovide(\n  buttonGroupContextKey,\n  reactive({\n    size: toRef(props, 'size'),\n    type: toRef(props, 'type'),\n  })\n)\nconst ns = useNamespace('button')\n</script>\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}