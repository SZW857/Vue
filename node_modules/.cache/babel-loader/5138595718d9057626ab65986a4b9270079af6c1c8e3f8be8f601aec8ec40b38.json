{"ast":null,"code":"import SIdentify from '@/components/identify';\nexport default {\n  components: {\n    SIdentify\n  },\n  data() {\n    var validateVerifycode = (rule, value, callback) => {\n      const newVal = value.toLowerCase();\n      const identifyStr = this.identifyCode.toLowerCase();\n      if (newVal === '') {\n        return callback(new Error('验证码不能为空'));\n      } else if (value !== identifyStr) {\n        console.log('validateVerifycode:', value);\n        callback(new Error('验证码不正确!'));\n      } else {\n        callback(new Error('验证码正确!'));\n      }\n      // setTimeout(() => {\n      //   if (!Number.isInteger(value)) {\n      //     callback(new Error('请输入数字值'))\n      //   } else {\n      //     if (value < 18) {\n      //       callback(new Error('必须年满18岁'))\n      //     } else {\n      //       callback()\n      //     }\n      //   }\n      // }, 1000)\n    };\n\n    return {\n      identifyCodes: '3456789ABCDEFGHGKMNPQRSTUVWXY',\n      identifyCode: '',\n      rules: {\n        verifycode: [{\n          required: true,\n          trigger: 'blur',\n          validator: validateVerifycode\n        }]\n      },\n      ruleForm: {\n        verifycode: ''\n      }\n    };\n  },\n  methods: {\n    submitForm(formName) {\n      this.$refs[formName].validate(valid => {\n        if (valid) {\n          alert('submit!');\n        } else {\n          console.log('error submit!!');\n          return false;\n        }\n      });\n    },\n    resetForm(formName) {\n      this.$refs[formName].resetFields();\n    },\n    // 生成随机数\n    randomNum(min, max) {\n      return Math.floor(Math.random() * (max - min) + min);\n    },\n    // 切换验证码\n    refreshCode() {\n      this.identifyCode = '';\n      this.makeCode(this.identifyCodes, 4);\n    },\n    // 生成四位随机验证码\n    makeCode(o, l) {\n      for (let i = 0; i < l; i++) {\n        this.identifyCode += this.identifyCodes[this.randomNum(0, this.identifyCodes.length)];\n      }\n    }\n  },\n  mounted() {\n    // 验证码初始化\n    this.identifyCode = '';\n    this.makeCode(this.identifyCodes, 4);\n  }\n};","map":{"version":3,"mappings":"AA6BA,OAAOA,SAAQ,MAAO,uBAAsB;AAC5C,eAAe;EACbC,UAAU,EAAE;IAACD;EAAS,CAAC;EACvBE,IAAI,GAAG;IACL,IAAIC,kBAAiB,GAAI,CAACC,IAAI,EAAEC,KAAK,EAAEC,QAAQ,KAAK;MACjD,MAAMC,MAAK,GAAIF,KAAK,CAACG,WAAW,EAAC;MACjC,MAAMC,WAAU,GAAI,IAAI,CAACC,YAAY,CAACF,WAAW,EAAC;MACnD,IAAID,MAAK,KAAM,EAAE,EAAG;QAClB,OAAOD,QAAQ,CAAC,IAAIK,KAAK,CAAC,SAAS,CAAC;MACtC,CAAC,MAAK,IAAIN,KAAI,KAAMI,WAAW,EAAE;QAC/BG,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAER,KAAK;QACxCC,QAAQ,CAAC,IAAIK,KAAK,CAAC,SAAS,CAAC;MAC/B,CAAC,MAAK;QACJL,QAAQ,CAAC,IAAIK,KAAK,CAAC,QAAQ,CAAC;MAC9B;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACF;;IACA,OAAO;MACLG,aAAa,EAAE,+BAA+B;MAC9CJ,YAAY,EAAE,EAAE;MAChBK,KAAK,EAAE;QACLC,UAAU,EAAE,CACV;UAACC,QAAQ,EAAE,IAAI;UAAEC,OAAO,EAAE,MAAM;UAAEC,SAAS,EAAEhB;QAAkB;MAEnE,CAAC;MACDiB,QAAQ,EAAE;QACRJ,UAAU,EAAE;MACd;IACF;EACF,CAAC;EACDK,OAAO,EAAE;IACPC,UAAU,CAACC,QAAQ,EAAE;MACnB,IAAI,CAACC,KAAK,CAACD,QAAQ,CAAC,CAACE,QAAQ,CAAEC,KAAK,IAAK;QACvC,IAAIA,KAAK,EAAE;UACTC,KAAK,CAAC,SAAS;QACjB,OAAO;UACLf,OAAO,CAACC,GAAG,CAAC,gBAAgB;UAC5B,OAAO,KAAI;QACb;MACF,CAAC;IACH,CAAC;IACDe,SAAS,CAACL,QAAQ,EAAE;MAClB,IAAI,CAACC,KAAK,CAACD,QAAQ,CAAC,CAACM,WAAW,EAAC;IACnC,CAAC;IACD;IACAC,SAAS,CAACC,GAAG,EAAEC,GAAG,EAAE;MAClB,OAAOC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAC,IAAKH,GAAE,GAAID,GAAG,IAAIA,GAAG;IACrD,CAAC;IACD;IACAK,WAAW,GAAG;MACZ,IAAI,CAAC1B,YAAW,GAAI,EAAC;MACrB,IAAI,CAAC2B,QAAQ,CAAC,IAAI,CAACvB,aAAa,EAAE,CAAC;IACrC,CAAC;IACD;IACAuB,QAAQ,CAACC,CAAC,EAAEC,CAAC,EAAE;MACb,KAAK,IAAIC,IAAI,CAAC,EAAEA,IAAID,CAAC,EAAEC,CAAC,EAAE,EAAE;QAC1B,IAAI,CAAC9B,YAAW,IAAK,IAAI,CAACI,aAAa,CACnC,IAAI,CAACgB,SAAS,CAAC,CAAC,EAAE,IAAI,CAAChB,aAAa,CAAC2B,MAAM,EAC3C;MACN;IACF;EACF,CAAC;EACDC,OAAO,GAAG;IACR;IACA,IAAI,CAAChC,YAAW,GAAI,EAAC;IACrB,IAAI,CAAC2B,QAAQ,CAAC,IAAI,CAACvB,aAAa,EAAE,CAAC;EACrC;AACF","names":["SIdentify","components","data","validateVerifycode","rule","value","callback","newVal","toLowerCase","identifyStr","identifyCode","Error","console","log","identifyCodes","rules","verifycode","required","trigger","validator","ruleForm","methods","submitForm","formName","$refs","validate","valid","alert","resetForm","resetFields","randomNum","min","max","Math","floor","random","refreshCode","makeCode","o","l","i","length","mounted"],"sourceRoot":"","sources":["C:\\Users\\14486\\Desktop\\社区公益系统前端\\vue_community\\src\\NavigationBar\\PointsGoods.vue"],"sourcesContent":["<template>\r\n  <div style=\"display: flex\">\r\n  <el-form\r\n      :model=\"ruleForm\"\r\n      status-icon\r\n      :rules=\"rules\"\r\n      ref=\"ruleForm\"\r\n      label-width=\"100px\"\r\n      class=\"demo-ruleForm\"\r\n      style=\"width: 500px;\"\r\n  >\r\n    <el-form-item label=\"验证码\" prop=\"verifycode\">\r\n      <el-input\r\n          v-model=\"ruleForm.verifycode\"\r\n          placeholder=\"请输入验证码\"\r\n          type=\"text\"\r\n      ></el-input>\r\n    </el-form-item>\r\n    <el-form-item>\r\n      <el-button style=\"margin-left: 500px\" @click=\"refreshCode\">刷新</el-button>\r\n      <s-identify :identifyCode=\"identifyCode\" style=\"background-color: #8720a4;width: 130px\"/>\r\n      <el-button type=\"primary\" @click=\"submitForm('ruleForm')\">提交</el-button>\r\n      <el-button @click=\"resetForm('ruleForm')\">重置</el-button>\r\n    </el-form-item>\r\n  </el-form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport SIdentify from '@/components/identify'\r\nexport default {\r\n  components: {SIdentify},\r\n  data() {\r\n    var validateVerifycode = (rule, value, callback) => {\r\n       const newVal = value.toLowerCase()\r\n       const identifyStr = this.identifyCode.toLowerCase()\r\n      if (newVal === '')  {\r\n        return callback(new Error('验证码不能为空'))\r\n      }else if (value !== identifyStr) {\r\n        console.log('validateVerifycode:', value)\r\n        callback(new Error('验证码不正确!'))\r\n      }else {\r\n        callback(new Error('验证码正确!'))\r\n      }\r\n      // setTimeout(() => {\r\n      //   if (!Number.isInteger(value)) {\r\n      //     callback(new Error('请输入数字值'))\r\n      //   } else {\r\n      //     if (value < 18) {\r\n      //       callback(new Error('必须年满18岁'))\r\n      //     } else {\r\n      //       callback()\r\n      //     }\r\n      //   }\r\n      // }, 1000)\r\n    }\r\n    return {\r\n      identifyCodes: '3456789ABCDEFGHGKMNPQRSTUVWXY',\r\n      identifyCode: '',\r\n      rules: {\r\n        verifycode: [\r\n          {required: true, trigger: 'blur', validator: validateVerifycode}\r\n        ]\r\n      },\r\n      ruleForm: {\r\n        verifycode: '',\r\n      },\r\n    }\r\n  },\r\n  methods: {\r\n    submitForm(formName) {\r\n      this.$refs[formName].validate((valid) => {\r\n        if (valid) {\r\n          alert('submit!')\r\n        } else {\r\n          console.log('error submit!!')\r\n          return false\r\n        }\r\n      })\r\n    },\r\n    resetForm(formName) {\r\n      this.$refs[formName].resetFields()\r\n    },\r\n    // 生成随机数\r\n    randomNum(min, max) {\r\n      return Math.floor(Math.random() * (max - min) + min)\r\n    },\r\n    // 切换验证码\r\n    refreshCode() {\r\n      this.identifyCode = ''\r\n      this.makeCode(this.identifyCodes, 4)\r\n    },\r\n    // 生成四位随机验证码\r\n    makeCode(o, l) {\r\n      for (let i = 0; i < l; i++) {\r\n        this.identifyCode += this.identifyCodes[\r\n            this.randomNum(0, this.identifyCodes.length)\r\n            ]\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    // 验证码初始化\r\n    this.identifyCode = ''\r\n    this.makeCode(this.identifyCodes, 4)\r\n  },\r\n}\r\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}