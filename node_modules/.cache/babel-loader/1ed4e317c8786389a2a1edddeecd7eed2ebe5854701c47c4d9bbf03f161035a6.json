{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar shared = require('@vue/shared');\nvar lodashUnified = require('lodash-unified');\nvar core = require('@popperjs/core');\nrequire('../../focus-trap/index.js');\nrequire('../../../hooks/index.js');\nrequire('../../../tokens/index.js');\nrequire('../../../utils/index.js');\nvar content = require('./content.js');\nvar utils = require('./utils.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar popper = require('../../../tokens/popper.js');\nvar form = require('../../../tokens/form.js');\nvar index = require('../../../hooks/use-z-index/index.js');\nvar index$1 = require('../../../hooks/use-namespace/index.js');\nvar types = require('../../../utils/types.js');\nvar focusTrap = require('../../focus-trap/src/focus-trap.js');\nconst __default__ = vue.defineComponent({\n  name: \"ElPopperContent\"\n});\nconst _sfc_main = /* @__PURE__ */vue.defineComponent({\n  ...__default__,\n  props: content.popperContentProps,\n  emits: content.popperContentEmits,\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const {\n      popperInstanceRef,\n      contentRef,\n      triggerRef,\n      role\n    } = vue.inject(popper.POPPER_INJECTION_KEY, void 0);\n    const formItemContext = vue.inject(form.formItemContextKey, void 0);\n    const {\n      nextZIndex\n    } = index.useZIndex();\n    const ns = index$1.useNamespace(\"popper\");\n    const popperContentRef = vue.ref();\n    const focusStartRef = vue.ref(\"first\");\n    const arrowRef = vue.ref();\n    const arrowOffset = vue.ref();\n    vue.provide(popper.POPPER_CONTENT_INJECTION_KEY, {\n      arrowRef,\n      arrowOffset\n    });\n    if (formItemContext && (formItemContext.addInputId || formItemContext.removeInputId)) {\n      vue.provide(form.formItemContextKey, {\n        ...formItemContext,\n        addInputId: shared.NOOP,\n        removeInputId: shared.NOOP\n      });\n    }\n    const contentZIndex = vue.ref(props.zIndex || nextZIndex());\n    const trapped = vue.ref(false);\n    let triggerTargetAriaStopWatch = void 0;\n    const computedReference = vue.computed(() => utils.unwrapMeasurableEl(props.referenceEl) || vue.unref(triggerRef));\n    const contentStyle = vue.computed(() => [{\n      zIndex: vue.unref(contentZIndex)\n    }, props.popperStyle]);\n    const contentClass = vue.computed(() => [ns.b(), ns.is(\"pure\", props.pure), ns.is(props.effect), props.popperClass]);\n    const ariaModal = vue.computed(() => {\n      return role && role.value === \"dialog\" ? \"false\" : void 0;\n    });\n    const createPopperInstance = ({\n      referenceEl,\n      popperContentEl,\n      arrowEl\n    }) => {\n      const options = utils.buildPopperOptions(props, {\n        arrowEl,\n        arrowOffset: vue.unref(arrowOffset)\n      });\n      return core.createPopper(referenceEl, popperContentEl, options);\n    };\n    const updatePopper = (shouldUpdateZIndex = true) => {\n      var _a;\n      (_a = vue.unref(popperInstanceRef)) == null ? void 0 : _a.update();\n      shouldUpdateZIndex && (contentZIndex.value = props.zIndex || nextZIndex());\n    };\n    const togglePopperAlive = () => {\n      var _a, _b;\n      const monitorable = {\n        name: \"eventListeners\",\n        enabled: props.visible\n      };\n      (_b = (_a = vue.unref(popperInstanceRef)) == null ? void 0 : _a.setOptions) == null ? void 0 : _b.call(_a, options => ({\n        ...options,\n        modifiers: [...(options.modifiers || []), monitorable]\n      }));\n      updatePopper(false);\n      if (props.visible && props.focusOnShow) {\n        trapped.value = true;\n      } else if (props.visible === false) {\n        trapped.value = false;\n      }\n    };\n    const onFocusAfterTrapped = () => {\n      emit(\"focus\");\n    };\n    const onFocusAfterReleased = event => {\n      var _a;\n      if (((_a = event.detail) == null ? void 0 : _a.focusReason) !== \"pointer\") {\n        focusStartRef.value = \"first\";\n        emit(\"blur\");\n      }\n    };\n    const onFocusInTrap = event => {\n      if (props.visible && !trapped.value) {\n        if (event.target) {\n          focusStartRef.value = event.target;\n        }\n        trapped.value = true;\n      }\n    };\n    const onFocusoutPrevented = event => {\n      if (!props.trapping) {\n        if (event.detail.focusReason === \"pointer\") {\n          event.preventDefault();\n        }\n        trapped.value = false;\n      }\n    };\n    const onReleaseRequested = () => {\n      trapped.value = false;\n      emit(\"close\");\n    };\n    vue.onMounted(() => {\n      let updateHandle;\n      vue.watch(computedReference, referenceEl => {\n        var _a;\n        updateHandle == null ? void 0 : updateHandle();\n        const popperInstance = vue.unref(popperInstanceRef);\n        (_a = popperInstance == null ? void 0 : popperInstance.destroy) == null ? void 0 : _a.call(popperInstance);\n        if (referenceEl) {\n          const popperContentEl = vue.unref(popperContentRef);\n          contentRef.value = popperContentEl;\n          popperInstanceRef.value = createPopperInstance({\n            referenceEl,\n            popperContentEl,\n            arrowEl: vue.unref(arrowRef)\n          });\n          updateHandle = vue.watch(() => referenceEl.getBoundingClientRect(), () => updatePopper(), {\n            immediate: true\n          });\n        } else {\n          popperInstanceRef.value = void 0;\n        }\n      }, {\n        immediate: true\n      });\n      vue.watch(() => props.triggerTargetEl, (triggerTargetEl, prevTriggerTargetEl) => {\n        triggerTargetAriaStopWatch == null ? void 0 : triggerTargetAriaStopWatch();\n        triggerTargetAriaStopWatch = void 0;\n        const el = vue.unref(triggerTargetEl || popperContentRef.value);\n        const prevEl = vue.unref(prevTriggerTargetEl || popperContentRef.value);\n        if (types.isElement(el)) {\n          triggerTargetAriaStopWatch = vue.watch([role, () => props.ariaLabel, ariaModal, () => props.id], watches => {\n            ;\n            [\"role\", \"aria-label\", \"aria-modal\", \"id\"].forEach((key, idx) => {\n              lodashUnified.isNil(watches[idx]) ? el.removeAttribute(key) : el.setAttribute(key, watches[idx]);\n            });\n          }, {\n            immediate: true\n          });\n        }\n        if (prevEl !== el && types.isElement(prevEl)) {\n          ;\n          [\"role\", \"aria-label\", \"aria-modal\", \"id\"].forEach(key => {\n            prevEl.removeAttribute(key);\n          });\n        }\n      }, {\n        immediate: true\n      });\n      vue.watch(() => props.visible, togglePopperAlive, {\n        immediate: true\n      });\n      vue.watch(() => utils.buildPopperOptions(props, {\n        arrowEl: vue.unref(arrowRef),\n        arrowOffset: vue.unref(arrowOffset)\n      }), option => {\n        var _a;\n        return (_a = popperInstanceRef.value) == null ? void 0 : _a.setOptions(option);\n      });\n    });\n    vue.onBeforeUnmount(() => {\n      triggerTargetAriaStopWatch == null ? void 0 : triggerTargetAriaStopWatch();\n      triggerTargetAriaStopWatch = void 0;\n    });\n    expose({\n      popperContentRef,\n      popperInstanceRef,\n      updatePopper,\n      contentStyle\n    });\n    return (_ctx, _cache) => {\n      return vue.openBlock(), vue.createElementBlock(\"div\", {\n        ref_key: \"popperContentRef\",\n        ref: popperContentRef,\n        style: vue.normalizeStyle(vue.unref(contentStyle)),\n        class: vue.normalizeClass(vue.unref(contentClass)),\n        tabindex: \"-1\",\n        onMouseenter: _cache[0] || (_cache[0] = e => _ctx.$emit(\"mouseenter\", e)),\n        onMouseleave: _cache[1] || (_cache[1] = e => _ctx.$emit(\"mouseleave\", e))\n      }, [vue.createVNode(vue.unref(focusTrap[\"default\"]), {\n        trapped: trapped.value,\n        \"trap-on-focus-in\": true,\n        \"focus-trap-el\": popperContentRef.value,\n        \"focus-start-el\": focusStartRef.value,\n        onFocusAfterTrapped,\n        onFocusAfterReleased,\n        onFocusin: onFocusInTrap,\n        onFocusoutPrevented,\n        onReleaseRequested\n      }, {\n        default: vue.withCtx(() => [vue.renderSlot(_ctx.$slots, \"default\")]),\n        _: 3\n      }, 8, [\"trapped\", \"focus-trap-el\", \"focus-start-el\"])], 38);\n    };\n  }\n});\nvar ElPopperContent = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/popper/src/content.vue\"]]);\nexports[\"default\"] = ElPopperContent;","map":{"version":3,"mappings":"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","names":["name","popperInstanceRef","contentRef","triggerRef","role","POPPER_INJECTION_KEY","inject","nextZIndex","useZIndex","useNamespace","popperContentRef","ref","arrowRef","arrowOffset","provide","POPPER_CONTENT_INJECTION_KEY","formItemContext","addInputId","removeInputId","formItemContextKey","contentZIndex","props","triggerTargetAriaStopWatch","computed","unwrapMeasurableEl","referenceEl","unref","contentStyle","zIndex","ns","b","pure","is","effect","value","createPopperInstance","popperContentEl","arrowEl","buildPopperOptions","options","shouldUpdateZIndex","_b","monitorable","enabled","modifiers","updatePopper","trapped","emit","focusStartRef","event","onMounted","watch","_a","updateHandle","immediate","isNil","prevEl","removeAttribute","onBeforeUnmount"],"sources":["../../../../../../packages/components/popper/src/content.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"popperContentRef\"\n    :style=\"contentStyle\"\n    :class=\"contentClass\"\n    tabindex=\"-1\"\n    @mouseenter=\"(e) => $emit('mouseenter', e)\"\n    @mouseleave=\"(e) => $emit('mouseleave', e)\"\n  >\n    <el-focus-trap\n      :trapped=\"trapped\"\n      :trap-on-focus-in=\"true\"\n      :focus-trap-el=\"popperContentRef\"\n      :focus-start-el=\"focusStartRef\"\n      @focus-after-trapped=\"onFocusAfterTrapped\"\n      @focus-after-released=\"onFocusAfterReleased\"\n      @focusin=\"onFocusInTrap\"\n      @focusout-prevented=\"onFocusoutPrevented\"\n      @release-requested=\"onReleaseRequested\"\n    >\n      <slot />\n    </el-focus-trap>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport {\n  computed,\n  inject,\n  onBeforeUnmount,\n  onMounted,\n  provide,\n  ref,\n  unref,\n  watch,\n} from 'vue'\nimport { NOOP } from '@vue/shared'\nimport { isNil } from 'lodash-unified'\nimport { createPopper } from '@popperjs/core'\nimport ElFocusTrap from '@element-plus/components/focus-trap'\nimport { useNamespace, useZIndex } from '@element-plus/hooks'\nimport {\n  POPPER_CONTENT_INJECTION_KEY,\n  POPPER_INJECTION_KEY,\n  formItemContextKey,\n} from '@element-plus/tokens'\nimport { isElement } from '@element-plus/utils'\nimport { popperContentEmits, popperContentProps } from './content'\nimport { buildPopperOptions, unwrapMeasurableEl } from './utils'\n\nimport type { WatchStopHandle } from 'vue'\nimport type { CreatePopperInstanceParams } from './content'\n\ndefineOptions({\n  name: 'ElPopperContent',\n})\n\nconst emit = defineEmits(popperContentEmits)\n\nconst props = defineProps(popperContentProps)\n\nconst { popperInstanceRef, contentRef, triggerRef, role } = inject(\n  POPPER_INJECTION_KEY,\n  undefined\n)!\nconst formItemContext = inject(formItemContextKey, undefined)\nconst { nextZIndex } = useZIndex()\nconst ns = useNamespace('popper')\nconst popperContentRef = ref<HTMLElement>()\nconst focusStartRef = ref<'container' | 'first' | HTMLElement>('first')\nconst arrowRef = ref<HTMLElement>()\nconst arrowOffset = ref<number>()\nprovide(POPPER_CONTENT_INJECTION_KEY, {\n  arrowRef,\n  arrowOffset,\n})\n\nif (\n  formItemContext &&\n  (formItemContext.addInputId || formItemContext.removeInputId)\n) {\n  // disallow auto-id from inside popper content\n  provide(formItemContextKey, {\n    ...formItemContext,\n    addInputId: NOOP,\n    removeInputId: NOOP,\n  })\n}\n\nconst contentZIndex = ref<number>(props.zIndex || nextZIndex())\nconst trapped = ref<boolean>(false)\n\nlet triggerTargetAriaStopWatch: WatchStopHandle | undefined = undefined\n\nconst computedReference = computed(\n  () => unwrapMeasurableEl(props.referenceEl) || unref(triggerRef)\n)\n\nconst contentStyle = computed(\n  () => [{ zIndex: unref(contentZIndex) }, props.popperStyle] as any\n)\n\nconst contentClass = computed(() => [\n  ns.b(),\n  ns.is('pure', props.pure),\n  ns.is(props.effect),\n  props.popperClass,\n])\n\nconst ariaModal = computed<string | undefined>(() => {\n  return role && role.value === 'dialog' ? 'false' : undefined\n})\n\nconst createPopperInstance = ({\n  referenceEl,\n  popperContentEl,\n  arrowEl,\n}: CreatePopperInstanceParams) => {\n  const options = buildPopperOptions(props, {\n    arrowEl,\n    arrowOffset: unref(arrowOffset),\n  })\n\n  return createPopper(referenceEl, popperContentEl, options)\n}\n\nconst updatePopper = (shouldUpdateZIndex = true) => {\n  unref(popperInstanceRef)?.update()\n  shouldUpdateZIndex && (contentZIndex.value = props.zIndex || nextZIndex())\n}\n\nconst togglePopperAlive = () => {\n  const monitorable = { name: 'eventListeners', enabled: props.visible }\n  unref(popperInstanceRef)?.setOptions?.((options) => ({\n    ...options,\n    modifiers: [...(options.modifiers || []), monitorable],\n  }))\n  updatePopper(false)\n  if (props.visible && props.focusOnShow) {\n    trapped.value = true\n  } else if (props.visible === false) {\n    trapped.value = false\n  }\n}\n\nconst onFocusAfterTrapped = () => {\n  emit('focus')\n}\n\nconst onFocusAfterReleased = (event: CustomEvent) => {\n  if (event.detail?.focusReason !== 'pointer') {\n    focusStartRef.value = 'first'\n    emit('blur')\n  }\n}\n\nconst onFocusInTrap = (event: FocusEvent) => {\n  if (props.visible && !trapped.value) {\n    if (event.target) {\n      focusStartRef.value = event.target as typeof focusStartRef.value\n    }\n    trapped.value = true\n  }\n}\n\nconst onFocusoutPrevented = (event: CustomEvent) => {\n  if (!props.trapping) {\n    if (event.detail.focusReason === 'pointer') {\n      event.preventDefault()\n    }\n    trapped.value = false\n  }\n}\n\nconst onReleaseRequested = () => {\n  trapped.value = false\n  emit('close')\n}\n\nonMounted(() => {\n  let updateHandle: WatchStopHandle\n  watch(\n    computedReference,\n    (referenceEl) => {\n      updateHandle?.()\n      const popperInstance = unref(popperInstanceRef)\n      popperInstance?.destroy?.()\n      if (referenceEl) {\n        const popperContentEl = unref(popperContentRef)!\n        contentRef.value = popperContentEl\n\n        popperInstanceRef.value = createPopperInstance({\n          referenceEl,\n          popperContentEl,\n          arrowEl: unref(arrowRef),\n        })\n\n        updateHandle = watch(\n          () => referenceEl.getBoundingClientRect(),\n          () => updatePopper(),\n          {\n            immediate: true,\n          }\n        )\n      } else {\n        popperInstanceRef.value = undefined\n      }\n    },\n    {\n      immediate: true,\n    }\n  )\n\n  watch(\n    () => props.triggerTargetEl,\n    (triggerTargetEl, prevTriggerTargetEl) => {\n      triggerTargetAriaStopWatch?.()\n      triggerTargetAriaStopWatch = undefined\n\n      const el = unref(triggerTargetEl || popperContentRef.value)\n      const prevEl = unref(prevTriggerTargetEl || popperContentRef.value)\n\n      if (isElement(el)) {\n        triggerTargetAriaStopWatch = watch(\n          [role, () => props.ariaLabel, ariaModal, () => props.id],\n          (watches) => {\n            ;['role', 'aria-label', 'aria-modal', 'id'].forEach((key, idx) => {\n              isNil(watches[idx])\n                ? el.removeAttribute(key)\n                : el.setAttribute(key, watches[idx]!)\n            })\n          },\n          { immediate: true }\n        )\n      }\n      if (prevEl !== el && isElement(prevEl)) {\n        ;['role', 'aria-label', 'aria-modal', 'id'].forEach((key) => {\n          prevEl.removeAttribute(key)\n        })\n      }\n    },\n    { immediate: true }\n  )\n\n  watch(() => props.visible, togglePopperAlive, { immediate: true })\n\n  watch(\n    () =>\n      buildPopperOptions(props, {\n        arrowEl: unref(arrowRef),\n        arrowOffset: unref(arrowOffset),\n      }),\n    (option) => popperInstanceRef.value?.setOptions(option)\n  )\n})\n\nonBeforeUnmount(() => {\n  triggerTargetAriaStopWatch?.()\n  triggerTargetAriaStopWatch = undefined\n})\n\ndefineExpose({\n  /**\n   * @description popper content element\n   */\n  popperContentRef,\n  /**\n   * @description popperjs instance\n   */\n  popperInstanceRef,\n  /**\n   * @description method for updating popper\n   */\n  updatePopper,\n\n  /**\n   * @description content style\n   */\n  contentStyle,\n})\n</script>\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}