{"ast":null,"code":"import Vue from \"vue\";\nimport VideoPlayer from \"vue-video-player\";\n\n// require('video.js/dist/video-js.css')  //按官网引会找不到然后报错\nrequire(\"vue-video-player/node_modules/video.js/dist/video-js.css\");\nVue.use(VideoPlayer);\nexport default {\n  name: \"my_video\",\n  props: {},\n  data() {\n    return {\n      options: {\n        playbackRates: [0.5, 1.0, 1.5, 2.0, 3.0],\n        // 可选的播放速度\n        autoplay: true,\n        // 是否自动播放\n        muted: false,\n        // 是否静音\n        loop: true,\n        // 是否开启循环播放\n        preload: \"auto\",\n        // 自动预加载\n        language: \"zh-CN\",\n        // 语言，'en', 'zh-cn', 'zh-tw'\n        aspectRatio: \"16:9\",\n        // 播放器高宽占比（例如\"16:9\"或\"4:3\"）\n        fluid: true,\n        // 当true时，Video.js player将拥有流体大小。换句话说，它将按比例缩放以适应其容器。\n        sources: [{\n          type: \"video/mp4\",\n          // 类型\n          src: \"https://mp4i.vodfile.m1905.com/202011280727/c884af78f3467d3e7d65804b40c74771/video/2020/11/26/v20201126Z7OID3M29Z1FF6G3/v20201126Z7OID3M29Z1FF6G3.mp4\" // url地址\n        }],\n\n        poster: \"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1606462956126&di=2d87964d4faf656af55d09d938640d97&imgtype=0&src=http%3A%2F%2Fattachments.gfan.com%2Fforum%2Fattachments2%2F201310%2F10%2F150326y7dzdd8d4kpjjdsd.jpg\",\n        // 封面地址\n        notSupportedMessage: \"此视频暂无法播放，请稍后再试\",\n        // 允许覆盖Video.js无法播放媒体源时显示的默认信息。\n        controlBar: {\n          timeDivider: true,\n          // 是否显示当前时间和持续时间的分隔符，\"/\"\n          durationDisplay: true,\n          // 是否显示持续时间\n          remainingTimeDisplay: false,\n          // 是否显示剩余时间\n          fullscreenToggle: true // 是否显示全屏按钮\n        }\n      }\n    };\n  },\n\n  methods: {\n    // 播放回调\n    onPlayerPlay($event) {\n      console.log(\"player play!\", $event);\n    },\n    // 暂停回调\n    onPlayerPause($event) {\n      console.log(\"player pause!\", $event);\n    },\n    // 视频播完回调\n    onPlayerEnded($event) {\n      console.log($event);\n    },\n    // DOM元素上的readyState更改导致播放停止\n    onPlayerWaiting($event) {\n      console.log($event);\n    },\n    // 已开始播放回调\n    onPlayerPlaying($event) {\n      console.log($event);\n    },\n    // 当播放器在当前播放位置下载数据时触发\n    onPlayerLoadeddata($event) {\n      console.log($event);\n    },\n    // 当前播放位置发生变化时触发。\n    onPlayerTimeupdate($event) {\n      console.log($event);\n    },\n    //媒体的readyState为HAVE_FUTURE_DATA或更高\n    onPlayerCanplay($event) {\n      // console.log('player Canplay!', player)\n    },\n    //媒体的readyState为HAVE_ENOUGH_DATA或更高。这意味着可以在不缓冲的情况下播放整个媒体文件。\n    onPlayerCanplaythrough($event) {\n      // console.log('player Canplaythrough!', player)\n    },\n    //播放状态改变回调\n    playerStateChanged($event) {\n      console.log(\"player current update state\", $event);\n    },\n    //将侦听器绑定到组件的就绪状态。与事件监听器的不同之处在于，如果ready事件已经发生，它将立即触发该函数。。\n    playerReadied() {\n      console.log(\"example player 1 readied\");\n    }\n  }\n};","map":{"version":3,"mappings":"AAwBA,OAAOA,GAAE,MAAO,KAAK;AACrB,OAAOC,WAAU,MAAO,kBAAkB;;AAG1C;AACAC,OAAO,CAAC,0DAA0D,CAAC;AAEnEF,GAAG,CAACG,GAAG,CAACF,WAAW,CAAC;AACpB,eAAe;EACbG,IAAI,EAAE,UAAU;EAChBC,KAAK,EAAE,CAAC,CAAC;EACTC,IAAI,GAAG;IACL,OAAO;MACLC,OAAO,EAAE;QACPC,aAAa,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;QAAE;QAC1CC,QAAQ,EAAE,IAAI;QAAE;QAChBC,KAAK,EAAE,KAAK;QAAE;QACdC,IAAI,EAAE,IAAI;QAAE;QACZC,OAAO,EAAE,MAAM;QAAE;QACjBC,QAAQ,EAAE,OAAO;QAAE;QACnBC,WAAW,EAAE,MAAM;QAAE;QACrBC,KAAK,EAAE,IAAI;QAAE;QACbC,OAAO,EAAE,CACP;UACEC,IAAI,EAAE,WAAW;UAAE;UACnBC,GAAG,EACC,uJAAuJ,CAAE;QAC/J,CAAC,CACF;;QACDC,MAAM,EACF,yOAAyO;QAAE;QAC/OC,mBAAmB,EAAE,gBAAgB;QAAE;QACvCC,UAAU,EAAE;UACVC,WAAW,EAAE,IAAI;UAAE;UACnBC,eAAe,EAAE,IAAI;UAAE;UACvBC,oBAAoB,EAAE,KAAK;UAAE;UAC7BC,gBAAgB,EAAE,IAAI,CAAE;QAC1B;MACF;IACF,CAAC;EACH,CAAC;;EACDC,OAAO,EAAE;IACP;IACAC,YAAY,CAACC,MAAM,EAAE;MACnBC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEF,MAAM,CAAC;IACrC,CAAC;IACD;IACAG,aAAa,CAACH,MAAM,EAAE;MACpBC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,MAAM,CAAC;IACtC,CAAC;IACD;IACAI,aAAa,CAACJ,MAAM,EAAE;MACpBC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;IACrB,CAAC;IACD;IACAK,eAAe,CAACL,MAAM,EAAE;MACtBC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;IACrB,CAAC;IACD;IACAM,eAAe,CAACN,MAAM,EAAE;MACtBC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;IACrB,CAAC;IACD;IACAO,kBAAkB,CAACP,MAAM,EAAE;MACzBC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;IACrB,CAAC;IACD;IACAQ,kBAAkB,CAACR,MAAM,EAAE;MACzBC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;IACrB,CAAC;IACD;IACAS,eAAe,CAACT,MAAM,EAAE;MACtB;IAAA,CACD;IACD;IACAU,sBAAsB,CAACV,MAAM,EAAE;MAC7B;IAAA,CACD;IACD;IACAW,kBAAkB,CAACX,MAAM,EAAE;MACzBC,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEF,MAAM,CAAC;IACpD,CAAC;IACD;IACAY,aAAa,GAAG;MACdX,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IACzC;EACF;AACF,CAAC","names":["Vue","VideoPlayer","require","use","name","props","data","options","playbackRates","autoplay","muted","loop","preload","language","aspectRatio","fluid","sources","type","src","poster","notSupportedMessage","controlBar","timeDivider","durationDisplay","remainingTimeDisplay","fullscreenToggle","methods","onPlayerPlay","$event","console","log","onPlayerPause","onPlayerEnded","onPlayerWaiting","onPlayerPlaying","onPlayerLoadeddata","onPlayerTimeupdate","onPlayerCanplay","onPlayerCanplaythrough","playerStateChanged","playerReadied"],"sourceRoot":"","sources":["C:\\Users\\14486\\Desktop\\社区公益系统前端\\vue_community\\src\\NavigationBar\\test.vue"],"sourcesContent":["<template>\r\n  <div class=\"my_video\">\r\n    <video-player\r\n        class=\"video-player vjs-custom-skin\"\r\n        ref=\"videoPlayer\"\r\n        :playsinline=\"true\"\r\n        :options=\"options\"\r\n        @play=\"onPlayerPlay($event)\"\r\n        @pause=\"onPlayerPause($event)\"\r\n        @ended=\"onPlayerEnded($event)\"\r\n        @waiting=\"onPlayerWaiting($event)\"\r\n        @playing=\"onPlayerPlaying($event)\"\r\n        @loadeddata=\"onPlayerLoadeddata($event)\"\r\n        @timeupdate=\"onPlayerTimeupdate($event)\"\r\n        @canplay=\"onPlayerCanplay($event)\"\r\n        @canplaythrough=\"onPlayerCanplaythrough($event)\"\r\n        @statechanged=\"playerStateChanged($event)\"\r\n        @ready=\"playerReadied\"\r\n    >\r\n    </video-player>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Vue from \"vue\";\r\nimport VideoPlayer from \"vue-video-player\";\r\n\r\n\r\n// require('video.js/dist/video-js.css')  //按官网引会找不到然后报错\r\nrequire(\"vue-video-player/node_modules/video.js/dist/video-js.css\");\r\n\r\nVue.use(VideoPlayer);\r\nexport default {\r\n  name: \"my_video\",\r\n  props: {},\r\n  data() {\r\n    return {\r\n      options: {\r\n        playbackRates: [0.5, 1.0, 1.5, 2.0, 3.0], // 可选的播放速度\r\n        autoplay: true, // 是否自动播放\r\n        muted: false, // 是否静音\r\n        loop: true, // 是否开启循环播放\r\n        preload: \"auto\", // 自动预加载\r\n        language: \"zh-CN\", // 语言，'en', 'zh-cn', 'zh-tw'\r\n        aspectRatio: \"16:9\", // 播放器高宽占比（例如\"16:9\"或\"4:3\"）\r\n        fluid: true, // 当true时，Video.js player将拥有流体大小。换句话说，它将按比例缩放以适应其容器。\r\n        sources: [\r\n          {\r\n            type: \"video/mp4\", // 类型\r\n            src:\r\n                \"https://mp4i.vodfile.m1905.com/202011280727/c884af78f3467d3e7d65804b40c74771/video/2020/11/26/v20201126Z7OID3M29Z1FF6G3/v20201126Z7OID3M29Z1FF6G3.mp4\", // url地址\r\n          },\r\n        ],\r\n        poster:\r\n            \"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1606462956126&di=2d87964d4faf656af55d09d938640d97&imgtype=0&src=http%3A%2F%2Fattachments.gfan.com%2Fforum%2Fattachments2%2F201310%2F10%2F150326y7dzdd8d4kpjjdsd.jpg\", // 封面地址\r\n        notSupportedMessage: \"此视频暂无法播放，请稍后再试\", // 允许覆盖Video.js无法播放媒体源时显示的默认信息。\r\n        controlBar: {\r\n          timeDivider: true, // 是否显示当前时间和持续时间的分隔符，\"/\"\r\n          durationDisplay: true, // 是否显示持续时间\r\n          remainingTimeDisplay: false, // 是否显示剩余时间\r\n          fullscreenToggle: true, // 是否显示全屏按钮\r\n        },\r\n      },\r\n    };\r\n  },\r\n  methods: {\r\n    // 播放回调\r\n    onPlayerPlay($event) {\r\n      console.log(\"player play!\", $event);\r\n    },\r\n    // 暂停回调\r\n    onPlayerPause($event) {\r\n      console.log(\"player pause!\", $event);\r\n    },\r\n    // 视频播完回调\r\n    onPlayerEnded($event) {\r\n      console.log($event);\r\n    },\r\n    // DOM元素上的readyState更改导致播放停止\r\n    onPlayerWaiting($event) {\r\n      console.log($event);\r\n    },\r\n    // 已开始播放回调\r\n    onPlayerPlaying($event) {\r\n      console.log($event);\r\n    },\r\n    // 当播放器在当前播放位置下载数据时触发\r\n    onPlayerLoadeddata($event) {\r\n      console.log($event);\r\n    },\r\n    // 当前播放位置发生变化时触发。\r\n    onPlayerTimeupdate($event) {\r\n      console.log($event);\r\n    },\r\n    //媒体的readyState为HAVE_FUTURE_DATA或更高\r\n    onPlayerCanplay($event) {\r\n      // console.log('player Canplay!', player)\r\n    },\r\n    //媒体的readyState为HAVE_ENOUGH_DATA或更高。这意味着可以在不缓冲的情况下播放整个媒体文件。\r\n    onPlayerCanplaythrough($event) {\r\n      // console.log('player Canplaythrough!', player)\r\n    },\r\n    //播放状态改变回调\r\n    playerStateChanged($event) {\r\n      console.log(\"player current update state\", $event);\r\n    },\r\n    //将侦听器绑定到组件的就绪状态。与事件监听器的不同之处在于，如果ready事件已经发生，它将立即触发该函数。。\r\n    playerReadied() {\r\n      console.log(\"example player 1 readied\");\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.my_video {\r\n  width: 1000px;\r\n  height: 800px;\r\n  margin: 0 auto;\r\n  text-align: center;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}