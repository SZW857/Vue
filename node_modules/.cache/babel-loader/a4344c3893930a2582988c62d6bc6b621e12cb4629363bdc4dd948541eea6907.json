{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nrequire('../../../hooks/index.js');\nvar checkbox = require('./checkbox.js');\nrequire('./composables/index.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar useCheckbox = require('./composables/use-checkbox.js');\nvar index = require('../../../hooks/use-namespace/index.js');\nconst _hoisted_1 = [\"tabindex\", \"role\", \"aria-checked\"];\nconst _hoisted_2 = [\"id\", \"aria-hidden\", \"name\", \"tabindex\", \"disabled\", \"true-value\", \"false-value\"];\nconst _hoisted_3 = [\"id\", \"aria-hidden\", \"disabled\", \"value\", \"name\", \"tabindex\"];\nconst __default__ = vue.defineComponent({\n  name: \"ElCheckbox\"\n});\nconst _sfc_main = /* @__PURE__ */vue.defineComponent({\n  ...__default__,\n  props: checkbox.checkboxProps,\n  emits: checkbox.checkboxEmits,\n  setup(__props) {\n    const props = __props;\n    const slots = vue.useSlots();\n    const {\n      inputId,\n      isLabeledByFormItem,\n      isChecked,\n      isDisabled,\n      isFocused,\n      checkboxSize,\n      hasOwnLabel,\n      model,\n      handleChange,\n      onClickRoot\n    } = useCheckbox.useCheckbox(props, slots);\n    const ns = index.useNamespace(\"checkbox\");\n    return (_ctx, _cache) => {\n      return vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(!vue.unref(hasOwnLabel) && vue.unref(isLabeledByFormItem) ? \"span\" : \"label\"), {\n        class: vue.normalizeClass([vue.unref(ns).b(), vue.unref(ns).m(vue.unref(checkboxSize)), vue.unref(ns).is(\"disabled\", vue.unref(isDisabled)), vue.unref(ns).is(\"bordered\", _ctx.border), vue.unref(ns).is(\"checked\", vue.unref(isChecked))]),\n        \"aria-controls\": _ctx.indeterminate ? _ctx.controls : null,\n        onClick: vue.unref(onClickRoot)\n      }, {\n        default: vue.withCtx(() => [vue.createElementVNode(\"span\", {\n          class: vue.normalizeClass([vue.unref(ns).e(\"input\"), vue.unref(ns).is(\"disabled\", vue.unref(isDisabled)), vue.unref(ns).is(\"checked\", vue.unref(isChecked)), vue.unref(ns).is(\"indeterminate\", _ctx.indeterminate), vue.unref(ns).is(\"focus\", vue.unref(isFocused))]),\n          tabindex: _ctx.indeterminate ? 0 : void 0,\n          role: _ctx.indeterminate ? \"checkbox\" : void 0,\n          \"aria-checked\": _ctx.indeterminate ? \"mixed\" : void 0\n        }, [_ctx.trueLabel || _ctx.falseLabel ? vue.withDirectives((vue.openBlock(), vue.createElementBlock(\"input\", {\n          key: 0,\n          id: vue.unref(inputId),\n          \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => vue.isRef(model) ? model.value = $event : null),\n          class: vue.normalizeClass(vue.unref(ns).e(\"original\")),\n          type: \"checkbox\",\n          \"aria-hidden\": _ctx.indeterminate ? \"true\" : \"false\",\n          name: _ctx.name,\n          tabindex: _ctx.tabindex,\n          disabled: vue.unref(isDisabled),\n          \"true-value\": _ctx.trueLabel,\n          \"false-value\": _ctx.falseLabel,\n          onChange: _cache[1] || (_cache[1] = (...args) => vue.unref(handleChange) && vue.unref(handleChange)(...args)),\n          onFocus: _cache[2] || (_cache[2] = $event => isFocused.value = true),\n          onBlur: _cache[3] || (_cache[3] = $event => isFocused.value = false)\n        }, null, 42, _hoisted_2)), [[vue.vModelCheckbox, vue.unref(model)]]) : vue.withDirectives((vue.openBlock(), vue.createElementBlock(\"input\", {\n          key: 1,\n          id: vue.unref(inputId),\n          \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => vue.isRef(model) ? model.value = $event : null),\n          class: vue.normalizeClass(vue.unref(ns).e(\"original\")),\n          type: \"checkbox\",\n          \"aria-hidden\": _ctx.indeterminate ? \"true\" : \"false\",\n          disabled: vue.unref(isDisabled),\n          value: _ctx.label,\n          name: _ctx.name,\n          tabindex: _ctx.tabindex,\n          onChange: _cache[5] || (_cache[5] = (...args) => vue.unref(handleChange) && vue.unref(handleChange)(...args)),\n          onFocus: _cache[6] || (_cache[6] = $event => isFocused.value = true),\n          onBlur: _cache[7] || (_cache[7] = $event => isFocused.value = false)\n        }, null, 42, _hoisted_3)), [[vue.vModelCheckbox, vue.unref(model)]]), vue.createElementVNode(\"span\", {\n          class: vue.normalizeClass(vue.unref(ns).e(\"inner\"))\n        }, null, 2)], 10, _hoisted_1), vue.unref(hasOwnLabel) ? (vue.openBlock(), vue.createElementBlock(\"span\", {\n          key: 0,\n          class: vue.normalizeClass(vue.unref(ns).e(\"label\"))\n        }, [vue.renderSlot(_ctx.$slots, \"default\"), !_ctx.$slots.default ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, {\n          key: 0\n        }, [vue.createTextVNode(vue.toDisplayString(_ctx.label), 1)], 64)) : vue.createCommentVNode(\"v-if\", true)], 2)) : vue.createCommentVNode(\"v-if\", true)]),\n        _: 3\n      }, 8, [\"class\", \"aria-controls\", \"onClick\"]);\n    };\n  }\n});\nvar Checkbox = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/checkbox/src/checkbox.vue\"]]);\nexports[\"default\"] = Checkbox;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;uCAuEc;EACZA,IAAM;AACR;;;;;;;IAIA,MAAMC,QAAQC,YAAS;IAEjB;MACJC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;IAAA,CACE,2BAAYC,OAAOZ,KAAK;IAEtB,WAAKa,mBAAa,UAAU","names":["name","slots","useSlots","inputId","isLabeledByFormItem","isChecked","isDisabled","isFocused","checkboxSize","hasOwnLabel","model","handleChange","onClickRoot","props","useNamespace"],"sources":["../../../../../../packages/components/checkbox/src/checkbox.vue"],"sourcesContent":["<template>\n  <component\n    :is=\"!hasOwnLabel && isLabeledByFormItem ? 'span' : 'label'\"\n    :class=\"[\n      ns.b(),\n      ns.m(checkboxSize),\n      ns.is('disabled', isDisabled),\n      ns.is('bordered', border),\n      ns.is('checked', isChecked),\n    ]\"\n    :aria-controls=\"indeterminate ? controls : null\"\n    @click=\"onClickRoot\"\n  >\n    <span\n      :class=\"[\n        ns.e('input'),\n        ns.is('disabled', isDisabled),\n        ns.is('checked', isChecked),\n        ns.is('indeterminate', indeterminate),\n        ns.is('focus', isFocused),\n      ]\"\n      :tabindex=\"indeterminate ? 0 : undefined\"\n      :role=\"indeterminate ? 'checkbox' : undefined\"\n      :aria-checked=\"indeterminate ? 'mixed' : undefined\"\n    >\n      <input\n        v-if=\"trueLabel || falseLabel\"\n        :id=\"inputId\"\n        v-model=\"model\"\n        :class=\"ns.e('original')\"\n        type=\"checkbox\"\n        :aria-hidden=\"indeterminate ? 'true' : 'false'\"\n        :name=\"name\"\n        :tabindex=\"tabindex\"\n        :disabled=\"isDisabled\"\n        :true-value=\"trueLabel\"\n        :false-value=\"falseLabel\"\n        @change=\"handleChange\"\n        @focus=\"isFocused = true\"\n        @blur=\"isFocused = false\"\n      />\n      <input\n        v-else\n        :id=\"inputId\"\n        v-model=\"model\"\n        :class=\"ns.e('original')\"\n        type=\"checkbox\"\n        :aria-hidden=\"indeterminate ? 'true' : 'false'\"\n        :disabled=\"isDisabled\"\n        :value=\"label\"\n        :name=\"name\"\n        :tabindex=\"tabindex\"\n        @change=\"handleChange\"\n        @focus=\"isFocused = true\"\n        @blur=\"isFocused = false\"\n      />\n      <span :class=\"ns.e('inner')\" />\n    </span>\n    <span v-if=\"hasOwnLabel\" :class=\"ns.e('label')\">\n      <slot />\n      <template v-if=\"!$slots.default\">{{ label }}</template>\n    </span>\n  </component>\n</template>\n\n<script lang=\"ts\" setup>\nimport { useSlots } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { checkboxEmits, checkboxProps } from './checkbox'\nimport { useCheckbox } from './composables'\n\ndefineOptions({\n  name: 'ElCheckbox',\n})\n\nconst props = defineProps(checkboxProps)\ndefineEmits(checkboxEmits)\nconst slots = useSlots()\n\nconst {\n  inputId,\n  isLabeledByFormItem,\n  isChecked,\n  isDisabled,\n  isFocused,\n  checkboxSize,\n  hasOwnLabel,\n  model,\n  handleChange,\n  onClickRoot,\n} = useCheckbox(props, slots)\n\nconst ns = useNamespace('checkbox')\n</script>\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}