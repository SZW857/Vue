{"ast":null,"code":"// The `kern` table contains kerning pairs.\n// Note that some fonts use the GPOS OpenType layout table to specify kerning.\n// https://www.microsoft.com/typography/OTSPEC/kern.htm\n\nimport check from '../check';\nimport parse from '../parse';\nfunction parseWindowsKernTable(p) {\n  const pairs = {};\n  // Skip nTables.\n  p.skip('uShort');\n  const subtableVersion = p.parseUShort();\n  check.argument(subtableVersion === 0, 'Unsupported kern sub-table version.');\n  // Skip subtableLength, subtableCoverage\n  p.skip('uShort', 2);\n  const nPairs = p.parseUShort();\n  // Skip searchRange, entrySelector, rangeShift.\n  p.skip('uShort', 3);\n  for (let i = 0; i < nPairs; i += 1) {\n    const leftIndex = p.parseUShort();\n    const rightIndex = p.parseUShort();\n    const value = p.parseShort();\n    pairs[leftIndex + ',' + rightIndex] = value;\n  }\n  return pairs;\n}\nfunction parseMacKernTable(p) {\n  const pairs = {};\n  // The Mac kern table stores the version as a fixed (32 bits) but we only loaded the first 16 bits.\n  // Skip the rest.\n  p.skip('uShort');\n  const nTables = p.parseULong();\n  //check.argument(nTables === 1, 'Only 1 subtable is supported (got ' + nTables + ').');\n  if (nTables > 1) {\n    console.warn('Only the first kern subtable is supported.');\n  }\n  p.skip('uLong');\n  const coverage = p.parseUShort();\n  const subtableVersion = coverage & 0xFF;\n  p.skip('uShort');\n  if (subtableVersion === 0) {\n    const nPairs = p.parseUShort();\n    // Skip searchRange, entrySelector, rangeShift.\n    p.skip('uShort', 3);\n    for (let i = 0; i < nPairs; i += 1) {\n      const leftIndex = p.parseUShort();\n      const rightIndex = p.parseUShort();\n      const value = p.parseShort();\n      pairs[leftIndex + ',' + rightIndex] = value;\n    }\n  }\n  return pairs;\n}\n\n// Parse the `kern` table which contains kerning pairs.\nfunction parseKernTable(data, start) {\n  const p = new parse.Parser(data, start);\n  const tableVersion = p.parseUShort();\n  if (tableVersion === 0) {\n    return parseWindowsKernTable(p);\n  } else if (tableVersion === 1) {\n    return parseMacKernTable(p);\n  } else {\n    throw new Error('Unsupported kern table version (' + tableVersion + ').');\n  }\n}\nexport default {\n  parse: parseKernTable\n};","map":{"version":3,"names":["check","parse","parseWindowsKernTable","p","pairs","skip","subtableVersion","parseUShort","argument","nPairs","i","leftIndex","rightIndex","value","parseShort","parseMacKernTable","nTables","parseULong","console","warn","coverage","parseKernTable","data","start","Parser","tableVersion","Error"],"sources":["C:/Users/14486/Desktop/社区公益系统前端/vue_community/node_modules/opentype.js/src/tables/kern.js"],"sourcesContent":["// The `kern` table contains kerning pairs.\n// Note that some fonts use the GPOS OpenType layout table to specify kerning.\n// https://www.microsoft.com/typography/OTSPEC/kern.htm\n\nimport check from '../check';\nimport parse from '../parse';\n\nfunction parseWindowsKernTable(p) {\n    const pairs = {};\n    // Skip nTables.\n    p.skip('uShort');\n    const subtableVersion = p.parseUShort();\n    check.argument(subtableVersion === 0, 'Unsupported kern sub-table version.');\n    // Skip subtableLength, subtableCoverage\n    p.skip('uShort', 2);\n    const nPairs = p.parseUShort();\n    // Skip searchRange, entrySelector, rangeShift.\n    p.skip('uShort', 3);\n    for (let i = 0; i < nPairs; i += 1) {\n        const leftIndex = p.parseUShort();\n        const rightIndex = p.parseUShort();\n        const value = p.parseShort();\n        pairs[leftIndex + ',' + rightIndex] = value;\n    }\n    return pairs;\n}\n\nfunction parseMacKernTable(p) {\n    const pairs = {};\n    // The Mac kern table stores the version as a fixed (32 bits) but we only loaded the first 16 bits.\n    // Skip the rest.\n    p.skip('uShort');\n    const nTables = p.parseULong();\n    //check.argument(nTables === 1, 'Only 1 subtable is supported (got ' + nTables + ').');\n    if (nTables > 1) {\n        console.warn('Only the first kern subtable is supported.');\n    }\n    p.skip('uLong');\n    const coverage = p.parseUShort();\n    const subtableVersion = coverage & 0xFF;\n    p.skip('uShort');\n    if (subtableVersion === 0) {\n        const nPairs = p.parseUShort();\n        // Skip searchRange, entrySelector, rangeShift.\n        p.skip('uShort', 3);\n        for (let i = 0; i < nPairs; i += 1) {\n            const leftIndex = p.parseUShort();\n            const rightIndex = p.parseUShort();\n            const value = p.parseShort();\n            pairs[leftIndex + ',' + rightIndex] = value;\n        }\n    }\n    return pairs;\n}\n\n// Parse the `kern` table which contains kerning pairs.\nfunction parseKernTable(data, start) {\n    const p = new parse.Parser(data, start);\n    const tableVersion = p.parseUShort();\n    if (tableVersion === 0) {\n        return parseWindowsKernTable(p);\n    } else if (tableVersion === 1) {\n        return parseMacKernTable(p);\n    } else {\n        throw new Error('Unsupported kern table version (' + tableVersion + ').');\n    }\n}\n\nexport default { parse: parseKernTable };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}