{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar index$1 = require('../../scrollbar/index.js');\nrequire('../../../hooks/index.js');\nrequire('../../../utils/index.js');\nvar iconsVue = require('@element-plus/icons-vue');\nvar index = require('../../icon/index.js');\nvar node = require('./node2.js');\nvar types = require('./types.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar index$2 = require('../../../hooks/use-namespace/index.js');\nvar index$3 = require('../../../hooks/use-locale/index.js');\nvar rand = require('../../../utils/rand.js');\nconst _sfc_main = vue.defineComponent({\n  name: \"ElCascaderMenu\",\n  components: {\n    Loading: iconsVue.Loading,\n    ElIcon: index.ElIcon,\n    ElScrollbar: index$1.ElScrollbar,\n    ElCascaderNode: node[\"default\"]\n  },\n  props: {\n    nodes: {\n      type: Array,\n      required: true\n    },\n    index: {\n      type: Number,\n      required: true\n    }\n  },\n  setup(props) {\n    const instance = vue.getCurrentInstance();\n    const ns = index$2.useNamespace(\"cascader-menu\");\n    const {\n      t\n    } = index$3.useLocale();\n    const id = rand.generateId();\n    let activeNode = null;\n    let hoverTimer = null;\n    const panel = vue.inject(types.CASCADER_PANEL_INJECTION_KEY);\n    const hoverZone = vue.ref(null);\n    const isEmpty = vue.computed(() => !props.nodes.length);\n    const isLoading = vue.computed(() => !panel.initialLoaded);\n    const menuId = vue.computed(() => `cascader-menu-${id}-${props.index}`);\n    const handleExpand = e => {\n      activeNode = e.target;\n    };\n    const handleMouseMove = e => {\n      if (!panel.isHoverMenu || !activeNode || !hoverZone.value) return;\n      if (activeNode.contains(e.target)) {\n        clearHoverTimer();\n        const el = instance.vnode.el;\n        const {\n          left\n        } = el.getBoundingClientRect();\n        const {\n          offsetWidth,\n          offsetHeight\n        } = el;\n        const startX = e.clientX - left;\n        const top = activeNode.offsetTop;\n        const bottom = top + activeNode.offsetHeight;\n        hoverZone.value.innerHTML = `\n          <path style=\"pointer-events: auto;\" fill=\"transparent\" d=\"M${startX} ${top} L${offsetWidth} 0 V${top} Z\" />\n          <path style=\"pointer-events: auto;\" fill=\"transparent\" d=\"M${startX} ${bottom} L${offsetWidth} ${offsetHeight} V${bottom} Z\" />\n        `;\n      } else if (!hoverTimer) {\n        hoverTimer = window.setTimeout(clearHoverZone, panel.config.hoverThreshold);\n      }\n    };\n    const clearHoverTimer = () => {\n      if (!hoverTimer) return;\n      clearTimeout(hoverTimer);\n      hoverTimer = null;\n    };\n    const clearHoverZone = () => {\n      if (!hoverZone.value) return;\n      hoverZone.value.innerHTML = \"\";\n      clearHoverTimer();\n    };\n    return {\n      ns,\n      panel,\n      hoverZone,\n      isEmpty,\n      isLoading,\n      menuId,\n      t,\n      handleExpand,\n      handleMouseMove,\n      clearHoverZone\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_cascader_node = vue.resolveComponent(\"el-cascader-node\");\n  const _component_loading = vue.resolveComponent(\"loading\");\n  const _component_el_icon = vue.resolveComponent(\"el-icon\");\n  const _component_el_scrollbar = vue.resolveComponent(\"el-scrollbar\");\n  return vue.openBlock(), vue.createBlock(_component_el_scrollbar, {\n    key: _ctx.menuId,\n    tag: \"ul\",\n    role: \"menu\",\n    class: vue.normalizeClass(_ctx.ns.b()),\n    \"wrap-class\": _ctx.ns.e(\"wrap\"),\n    \"view-class\": [_ctx.ns.e(\"list\"), _ctx.ns.is(\"empty\", _ctx.isEmpty)],\n    onMousemove: _ctx.handleMouseMove,\n    onMouseleave: _ctx.clearHoverZone\n  }, {\n    default: vue.withCtx(() => {\n      var _a;\n      return [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.nodes, node => {\n        return vue.openBlock(), vue.createBlock(_component_el_cascader_node, {\n          key: node.uid,\n          node,\n          \"menu-id\": _ctx.menuId,\n          onExpand: _ctx.handleExpand\n        }, null, 8, [\"node\", \"menu-id\", \"onExpand\"]);\n      }), 128)), _ctx.isLoading ? (vue.openBlock(), vue.createElementBlock(\"div\", {\n        key: 0,\n        class: vue.normalizeClass(_ctx.ns.e(\"empty-text\"))\n      }, [vue.createVNode(_component_el_icon, {\n        size: \"14\",\n        class: vue.normalizeClass(_ctx.ns.is(\"loading\"))\n      }, {\n        default: vue.withCtx(() => [vue.createVNode(_component_loading)]),\n        _: 1\n      }, 8, [\"class\"]), vue.createTextVNode(\" \" + vue.toDisplayString(_ctx.t(\"el.cascader.loading\")), 1)], 2)) : _ctx.isEmpty ? (vue.openBlock(), vue.createElementBlock(\"div\", {\n        key: 1,\n        class: vue.normalizeClass(_ctx.ns.e(\"empty-text\"))\n      }, vue.toDisplayString(_ctx.t(\"el.cascader.noData\")), 3)) : ((_a = _ctx.panel) == null ? void 0 : _a.isHoverMenu) ? (vue.openBlock(), vue.createElementBlock(\"svg\", {\n        key: 2,\n        ref: \"hoverZone\",\n        class: vue.normalizeClass(_ctx.ns.e(\"hover-zone\"))\n      }, null, 2)) : vue.createCommentVNode(\"v-if\", true)];\n    }),\n    _: 1\n  }, 8, [\"class\", \"wrap-class\", \"view-class\", \"onMousemove\", \"onMouseleave\"]);\n}\nvar ElCascaderMenu = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/cascader-panel/src/menu.vue\"]]);\nexports[\"default\"] = ElCascaderMenu;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;AAiDA,MAAKA,YAAaC,mBAAa;EAC7BC,IAAM;EAENC,UAAY;IAAAC,SACVA;IAAAC,QACAA;IAAAC,aACAA;IAAAC,gBACAA;EAAA,CACF;EAEAC,KAAO;IACLC,KAAO;MACLC,IAAM;MACNC,QAAU;IAAA,CACZ;IACAC,KAAO;MACLF,IAAM;MACNC,QAAU;IAAA;EACZ,CACF;EAEAE,MAAML,KAAO;IACX,MAAMM,WAAWC,sBAAmB;IAC9B,WAAKC,qBAAa,eAAe;IAEjC;MAAEC;IAAA,IAAMC,iBAAU;IACxB,MAAMC,KAAKC,eAAW;IACtB,IAAIC,UAAoC;IACxC,IAAIC,UAA+B;IAE7B,cAAQC,WAAOC,kCAA4B;IAE3C,kBAAYC,QAA0B,IAAI;IAEhD,MAAMC,UAAUC,YAAS,OAAM,CAACnB,MAAMC,MAAMmB,MAAM;IAClD,MAAMC,SAAY,gBAAS,MAAM,CAACC,MAAMC,aAAa;IACrD,MAAMC,SAASL,YAAS,OAAuB,uBAAMnB,MAAMI,KAAO;IAE5D,qBAAgBqB,CAAkB;MACtCZ,aAAaY,CAAE;IAAA,CACjB;IAEM,wBAAmBA,CAAkB;MACzC,IAAI,CAACH,KAAM,gBAAe,CAACT,cAAc,CAACa,SAAU,QAAO;MAE3D,IAAIb,UAAW,UAASY,CAAE,OAAqB,CAAG;QAChCE;QAEV,WAAKrB,SAASsB,KAAM;QACpB;UAAEC;QAAS,OAAGC,qBAAsB;QACpC;UAAEC;UAAaC;QAAiB;QAChC,eAASP,EAAEQ,OAAU;QAC3B,MAAMC,MAAMrB,UAAW;QACjB,eAASqB,MAAMrB,UAAW;QAEhCa,UAAUS,MAAMC,SAAY;AAAA,uEACmCC,UAAUH,QAAQH,WAAkB;AAAA,uEACpCM,UAAUC,MAAW,oBAAeN,YAAiB;AAAA;MAAA,CAEtH,UAAW,CAAClB,UAAY;QACtBA,aAAayB,MAAO,YAClBC,cACA,QAAMC,OAAOC,cACf;MAAA;IACF,CACF;IAEA,MAAMf,kBAAkB,MAAM;MAC5B,IAAI,CAACb,YAAY;MACjB6B,aAAa7B,UAAU;MACVA;IAAA,CACf;IAEA,MAAM0B,iBAAiB,MAAM;MAC3B,IAAI,CAACd,SAAU,QAAO;MACtBA,UAAUS,MAAMC,SAAY;MACZT;IAAA,CAClB;IACO;MACLiB;MACAtB;MACAI;MACAR;MACAG;MACAG;MACAf;MACAoC;MACAC;MACAN;IAAA,CACF;EAAA;AAEJ,CAAC;;;;;;0BA3ICO,eA+Be;IA9BZC,GAAK;IACNC,GAAI;IACJC,IAAK;IACJC,OAAKC,kBAAE,SAAGC,CAAC;IACX,cAAYC,QAAG7B,CAAC;IAChB,cAAU,CAAG6B,IAAG,MAAC,SAAUA,IAAG,OAAE,SAAUA,IAAO;IACjDC,WAAW;IACXC,YAAY;EAAA;yBAGX,MAAqB;MAAA;eAKrBC,aAJW;QACV;UACST;UACDU;UAAA;;QAEA,8BAKL;MAAA,WALiBJ,IAAK,+BAAMK;QAAAX;QAGtBG;MAAA,GAFI,CAAMS,eAAO,mBAAG,EAAE;QAAAC;iCACnB;MAAA;QAAAC;QACHC;MACN,kBAIAC,iFAFyB,qCAAM;QAAAhB;QAOnCG;OAFI;QACHH,KAAK,CAAE;QAAI/B","names":["_sfc_main","defineComponent","name","components","Loading","ElIcon","ElScrollbar","ElCascaderNode","props","nodes","type","required","index","setup","instance","getCurrentInstance","useNamespace","t","useLocale","id","generateId","activeNode","hoverTimer","inject","CASCADER_PANEL_INJECTION_KEY","ref","isEmpty","computed","length","isLoading","panel","initialLoaded","menuId","e","hoverZone","clearHoverTimer","vnode","left","getBoundingClientRect","offsetWidth","offsetHeight","clientX","top","value","innerHTML","startX","bottom","window","clearHoverZone","config","hoverThreshold","clearTimeout","ns","handleExpand","handleMouseMove","_createBlock","key","tag","role","class","_normalizeClass","b","_ctx","onMousemove","onMouseleave","_openBlock","node","_createElementBlock","_createVNode","size","default","_","_createTextVNode"],"sources":["../../../../../../packages/components/cascader-panel/src/menu.vue"],"sourcesContent":["<template>\n  <el-scrollbar\n    :key=\"menuId\"\n    tag=\"ul\"\n    role=\"menu\"\n    :class=\"ns.b()\"\n    :wrap-class=\"ns.e('wrap')\"\n    :view-class=\"[ns.e('list'), ns.is('empty', isEmpty)]\"\n    @mousemove=\"handleMouseMove\"\n    @mouseleave=\"clearHoverZone\"\n  >\n    <el-cascader-node\n      v-for=\"node in nodes\"\n      :key=\"node.uid\"\n      :node=\"node\"\n      :menu-id=\"menuId\"\n      @expand=\"handleExpand\"\n    />\n    <div v-if=\"isLoading\" :class=\"ns.e('empty-text')\">\n      <el-icon size=\"14\" :class=\"ns.is('loading')\">\n        <loading />\n      </el-icon>\n      {{ t('el.cascader.loading') }}\n    </div>\n    <div v-else-if=\"isEmpty\" :class=\"ns.e('empty-text')\">\n      {{ t('el.cascader.noData') }}\n    </div>\n    <svg\n      v-else-if=\"panel?.isHoverMenu\"\n      ref=\"hoverZone\"\n      :class=\"ns.e('hover-zone')\"\n    />\n  </el-scrollbar>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, getCurrentInstance, inject, ref } from 'vue'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { generateId } from '@element-plus/utils'\nimport { Loading } from '@element-plus/icons-vue'\nimport ElIcon from '@element-plus/components/icon'\nimport ElCascaderNode from './node.vue'\nimport { CASCADER_PANEL_INJECTION_KEY } from './types'\n\nimport type { default as CascaderNode } from './node'\nimport type { PropType } from 'vue'\nimport type { Nullable } from '@element-plus/utils'\n\nexport default defineComponent({\n  name: 'ElCascaderMenu',\n\n  components: {\n    Loading,\n    ElIcon,\n    ElScrollbar,\n    ElCascaderNode,\n  },\n\n  props: {\n    nodes: {\n      type: Array as PropType<CascaderNode[]>,\n      required: true,\n    },\n    index: {\n      type: Number,\n      required: true,\n    },\n  },\n\n  setup(props) {\n    const instance = getCurrentInstance()!\n    const ns = useNamespace('cascader-menu')\n\n    const { t } = useLocale()\n    const id = generateId()\n    let activeNode: Nullable<HTMLElement> = null\n    let hoverTimer: Nullable<number> = null\n\n    const panel = inject(CASCADER_PANEL_INJECTION_KEY)!\n\n    const hoverZone = ref<null | SVGSVGElement>(null)\n\n    const isEmpty = computed(() => !props.nodes.length)\n    const isLoading = computed(() => !panel.initialLoaded)\n    const menuId = computed(() => `cascader-menu-${id}-${props.index}`)\n\n    const handleExpand = (e: MouseEvent) => {\n      activeNode = e.target as HTMLElement\n    }\n\n    const handleMouseMove = (e: MouseEvent) => {\n      if (!panel.isHoverMenu || !activeNode || !hoverZone.value) return\n\n      if (activeNode.contains(e.target as HTMLElement)) {\n        clearHoverTimer()\n\n        const el = instance.vnode.el as HTMLElement\n        const { left } = el.getBoundingClientRect()\n        const { offsetWidth, offsetHeight } = el\n        const startX = e.clientX - left\n        const top = activeNode.offsetTop\n        const bottom = top + activeNode.offsetHeight\n\n        hoverZone.value.innerHTML = `\n          <path style=\"pointer-events: auto;\" fill=\"transparent\" d=\"M${startX} ${top} L${offsetWidth} 0 V${top} Z\" />\n          <path style=\"pointer-events: auto;\" fill=\"transparent\" d=\"M${startX} ${bottom} L${offsetWidth} ${offsetHeight} V${bottom} Z\" />\n        `\n      } else if (!hoverTimer) {\n        hoverTimer = window.setTimeout(\n          clearHoverZone,\n          panel.config.hoverThreshold\n        )\n      }\n    }\n\n    const clearHoverTimer = () => {\n      if (!hoverTimer) return\n      clearTimeout(hoverTimer)\n      hoverTimer = null\n    }\n\n    const clearHoverZone = () => {\n      if (!hoverZone.value) return\n      hoverZone.value.innerHTML = ''\n      clearHoverTimer()\n    }\n    return {\n      ns,\n      panel,\n      hoverZone,\n      isEmpty,\n      isLoading,\n      menuId,\n      t,\n      handleExpand,\n      handleMouseMove,\n      clearHoverZone,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}