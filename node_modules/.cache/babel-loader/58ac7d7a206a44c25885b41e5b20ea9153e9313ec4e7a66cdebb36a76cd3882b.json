{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar index = require('../../tooltip/index.js');\nrequire('../../popper/index.js');\nrequire('../../../utils/index.js');\nrequire('../../../hooks/index.js');\nvar useMenu = require('./use-menu.js');\nvar menuItem = require('./menu-item.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar index$1 = require('../../../hooks/use-namespace/index.js');\nvar error = require('../../../utils/error.js');\nvar popper = require('../../popper/src/popper.js');\nconst COMPONENT_NAME = \"ElMenuItem\";\nconst _sfc_main = vue.defineComponent({\n  name: COMPONENT_NAME,\n  components: {\n    ElTooltip: index.ElTooltip\n  },\n  props: menuItem.menuItemProps,\n  emits: menuItem.menuItemEmits,\n  setup(props, {\n    emit\n  }) {\n    const instance = vue.getCurrentInstance();\n    const rootMenu = vue.inject(\"rootMenu\");\n    const nsMenu = index$1.useNamespace(\"menu\");\n    const nsMenuItem = index$1.useNamespace(\"menu-item\");\n    if (!rootMenu) error.throwError(COMPONENT_NAME, \"can not inject root menu\");\n    const {\n      parentMenu,\n      indexPath\n    } = useMenu[\"default\"](instance, vue.toRef(props, \"index\"));\n    const subMenu = vue.inject(`subMenu:${parentMenu.value.uid}`);\n    if (!subMenu) error.throwError(COMPONENT_NAME, \"can not inject sub menu\");\n    const active = vue.computed(() => props.index === rootMenu.activeIndex);\n    const item = vue.reactive({\n      index: props.index,\n      indexPath,\n      active\n    });\n    const handleClick = () => {\n      if (!props.disabled) {\n        rootMenu.handleMenuItemClick({\n          index: props.index,\n          indexPath: indexPath.value,\n          route: props.route\n        });\n        emit(\"click\", item);\n      }\n    };\n    vue.onMounted(() => {\n      subMenu.addSubMenu(item);\n      rootMenu.addMenuItem(item);\n    });\n    vue.onBeforeUnmount(() => {\n      subMenu.removeSubMenu(item);\n      rootMenu.removeMenuItem(item);\n    });\n    return {\n      Effect: popper.Effect,\n      parentMenu,\n      rootMenu,\n      active,\n      nsMenu,\n      nsMenuItem,\n      handleClick\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_tooltip = vue.resolveComponent(\"el-tooltip\");\n  return vue.openBlock(), vue.createElementBlock(\"li\", {\n    class: vue.normalizeClass([_ctx.nsMenuItem.b(), _ctx.nsMenuItem.is(\"active\", _ctx.active), _ctx.nsMenuItem.is(\"disabled\", _ctx.disabled)]),\n    role: \"menuitem\",\n    tabindex: \"-1\",\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleClick && _ctx.handleClick(...args))\n  }, [_ctx.parentMenu.type.name === \"ElMenu\" && _ctx.rootMenu.props.collapse && _ctx.$slots.title ? (vue.openBlock(), vue.createBlock(_component_el_tooltip, {\n    key: 0,\n    effect: _ctx.Effect.DARK,\n    placement: \"right\",\n    \"fallback-placements\": [\"left\"],\n    persistent: \"\"\n  }, {\n    content: vue.withCtx(() => [vue.renderSlot(_ctx.$slots, \"title\")]),\n    default: vue.withCtx(() => [vue.createElementVNode(\"div\", {\n      class: vue.normalizeClass(_ctx.nsMenu.be(\"tooltip\", \"trigger\"))\n    }, [vue.renderSlot(_ctx.$slots, \"default\")], 2)]),\n    _: 3\n  }, 8, [\"effect\"])) : (vue.openBlock(), vue.createElementBlock(vue.Fragment, {\n    key: 1\n  }, [vue.renderSlot(_ctx.$slots, \"default\"), vue.renderSlot(_ctx.$slots, \"title\")], 64))], 2);\n}\nvar MenuItem = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/menu/src/menu-item.vue\"]]);\nexports[\"default\"] = MenuItem;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AAyDA,MAAMA,cAAiB;AACvB,MAAKC,YAAaC,mBAAa;EAC7BC,IAAM;EACNC,UAAY;IAAAC,WACVA;EAAA,CACF;EAEAC,KAAO;EACPC,KAAO;EAEPC,MAAMF,KAAO;IAAEG;EAAQ;IACrB,MAAMC,WAAWC,sBAAmB;IAC9B,iBAAWC,WAAqB,UAAU;IAC1C,eAASC,qBAAa,MAAM;IAC5B,mBAAaA,qBAAa,WAAW;IAC3C,IAAI,CAACC,UAAUC,iBAAWf,gBAAgB,0BAA0B;IAE9D;MAAEgB;MAAYC;IAAc,uBAAQP,UAAUQ,SAAM,QAAO,OAAO,CAAC;IAEzE,MAAMC,OAAU,cAAmC,sBAAWC,MAAMC,GAAK;IACzE,IAAI,CAACF,SAASJ,iBAAWf,gBAAgB,yBAAyB;IAElE,MAAMsB,SAASC,YAAS,OAAMjB,KAAM,WAAUQ,SAASU,WAAW;IAClE,MAAMC,OAA2BC,YAAS;MACxCC,OAAOrB,KAAM;MACbW;MACAK;IAAA,CACD;IAED,MAAMM,cAAc,MAAM;MACpB,KAACtB,MAAMuB,QAAU;QACnBf,SAASgB,mBAAoB;UAC3BH,OAAOrB,KAAM;UACbW,WAAWA,SAAU;UACrBc,OAAOzB,KAAM;QAAA,CACd;QACDG,KAAK,SAASgB,IAAI;MAAA;IACpB,CACF;IAEAO,cAAU,MAAM;MACdb,QAAQc,WAAWR,IAAI;MACvBX,SAASoB,YAAYT,IAAI;IAAA,CAC1B;IAEDU,oBAAgB,MAAM;MACpBhB,QAAQiB,cAAcX,IAAI;MAC1BX,SAASuB,eAAeZ,IAAI;IAAA,CAC7B;IAEM;MAAAa,QACLA;MACAtB;MACAF;MACAQ;MACAiB;MACAC;MACAZ;IAAA,CACF;EAAA;AAEJ,CAAC;;;0BApHCa,sBAgCK;IA/BFC,KAAK,sBAAUC,gBAAWC,CAAC,IAAUD,gBAAWE,EAAE,WAAWF,IAAM,UAASA,gBAAWE,EAAE,aAAaF,IAAQ;IAK/GG,IAAK;IACLC,QAAS;IACRC,SAAKC,MAAE;EAAA,IAGSN,IAAW,iBAAKxC,SAAI,QAAyB,kBAASG,MAAM4C,QAAoB,gBAAOC,0BADxGC,eAiBa;IAAAC;IAXVC,QAAQX,IAAO;IAChBY,SAAU;IACT,qBAAqB;IACtBC;EAAA;IAEWC,SAAOC,YAChB,MAAqB,CAArBC,cAAqB;yBAEvB,MAEM,CAFNC,sBAEM;MAFAlB,OAAKmB,kBAAE,aAAOC,EAAE;IAAA,IACpBH,cAAQ;;yCAGZlB,sBAGW;IAAAY;EAAA,IAFTM,cAAQ,0BACRA,cAAqB","names":["COMPONENT_NAME","_sfc_main","defineComponent","name","components","ElTooltip","props","emits","setup","emit","instance","getCurrentInstance","inject","useNamespace","rootMenu","throwError","parentMenu","indexPath","toRef","subMenu","value","uid","active","computed","activeIndex","item","reactive","index","handleClick","disabled","handleMenuItemClick","route","onMounted","addSubMenu","addMenuItem","onBeforeUnmount","removeSubMenu","removeMenuItem","Effect","nsMenu","nsMenuItem","_createElementBlock","class","_ctx","b","is","role","tabindex","onClick","_cache","collapse","title","_createBlock","key","effect","placement","persistent","content","_withCtx","_renderSlot","_createElementVNode","_normalizeClass","be"],"sources":["../../../../../../packages/components/menu/src/menu-item.vue"],"sourcesContent":["<template>\n  <li\n    :class=\"[\n      nsMenuItem.b(),\n      nsMenuItem.is('active', active),\n      nsMenuItem.is('disabled', disabled),\n    ]\"\n    role=\"menuitem\"\n    tabindex=\"-1\"\n    @click=\"handleClick\"\n  >\n    <el-tooltip\n      v-if=\"\n        parentMenu.type.name === 'ElMenu' &&\n        rootMenu.props.collapse &&\n        $slots.title\n      \"\n      :effect=\"Effect.DARK\"\n      placement=\"right\"\n      :fallback-placements=\"['left']\"\n      persistent\n    >\n      <template #content>\n        <slot name=\"title\" />\n      </template>\n      <div :class=\"nsMenu.be('tooltip', 'trigger')\">\n        <slot />\n      </div>\n    </el-tooltip>\n    <template v-else>\n      <slot />\n      <slot name=\"title\" />\n    </template>\n  </li>\n</template>\n\n<script lang=\"ts\">\n// @ts-nocheck\nimport {\n  computed,\n  defineComponent,\n  getCurrentInstance,\n  inject,\n  onBeforeUnmount,\n  onMounted,\n  reactive,\n  toRef,\n} from 'vue'\nimport ElTooltip from '@element-plus/components/tooltip'\nimport { Effect } from '@element-plus/components/popper'\nimport { throwError } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport useMenu from './use-menu'\nimport { menuItemEmits, menuItemProps } from './menu-item'\n\nimport type { MenuItemRegistered, MenuProvider, SubMenuProvider } from './types'\n\nconst COMPONENT_NAME = 'ElMenuItem'\nexport default defineComponent({\n  name: COMPONENT_NAME,\n  components: {\n    ElTooltip,\n  },\n\n  props: menuItemProps,\n  emits: menuItemEmits,\n\n  setup(props, { emit }) {\n    const instance = getCurrentInstance()!\n    const rootMenu = inject<MenuProvider>('rootMenu')\n    const nsMenu = useNamespace('menu')\n    const nsMenuItem = useNamespace('menu-item')\n    if (!rootMenu) throwError(COMPONENT_NAME, 'can not inject root menu')\n\n    const { parentMenu, indexPath } = useMenu(instance, toRef(props, 'index'))\n\n    const subMenu = inject<SubMenuProvider>(`subMenu:${parentMenu.value.uid}`)\n    if (!subMenu) throwError(COMPONENT_NAME, 'can not inject sub menu')\n\n    const active = computed(() => props.index === rootMenu.activeIndex)\n    const item: MenuItemRegistered = reactive({\n      index: props.index,\n      indexPath,\n      active,\n    })\n\n    const handleClick = () => {\n      if (!props.disabled) {\n        rootMenu.handleMenuItemClick({\n          index: props.index,\n          indexPath: indexPath.value,\n          route: props.route,\n        })\n        emit('click', item)\n      }\n    }\n\n    onMounted(() => {\n      subMenu.addSubMenu(item)\n      rootMenu.addMenuItem(item)\n    })\n\n    onBeforeUnmount(() => {\n      subMenu.removeSubMenu(item)\n      rootMenu.removeMenuItem(item)\n    })\n\n    return {\n      Effect,\n      parentMenu,\n      rootMenu,\n      active,\n      nsMenu,\n      nsMenuItem,\n      handleClick,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}