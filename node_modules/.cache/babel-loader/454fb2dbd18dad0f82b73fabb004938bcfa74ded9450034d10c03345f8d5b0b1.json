{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nrequire('../../../hooks/index.js');\nvar useOption = require('./useOption.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar index = require('../../../hooks/use-namespace/index.js');\nconst _sfc_main = vue.defineComponent({\n  name: \"ElOption\",\n  componentName: \"ElOption\",\n  props: {\n    value: {\n      required: true,\n      type: [String, Number, Boolean, Object]\n    },\n    label: [String, Number],\n    created: Boolean,\n    disabled: {\n      type: Boolean,\n      default: false\n    }\n  },\n  setup(props) {\n    const ns = index.useNamespace(\"select\");\n    const states = vue.reactive({\n      index: -1,\n      groupDisabled: false,\n      visible: true,\n      hitState: false,\n      hover: false\n    });\n    const {\n      currentLabel,\n      itemSelected,\n      isDisabled,\n      select,\n      hoverItem\n    } = useOption.useOption(props, states);\n    const {\n      visible,\n      hover\n    } = vue.toRefs(states);\n    const vm = vue.getCurrentInstance().proxy;\n    select.onOptionCreate(vm);\n    vue.onBeforeUnmount(() => {\n      const key = vm.value;\n      const {\n        selected\n      } = select;\n      const selectedOptions = select.props.multiple ? selected : [selected];\n      const doesSelected = selectedOptions.some(item => {\n        return item.value === vm.value;\n      });\n      vue.nextTick(() => {\n        if (select.cachedOptions.get(key) === vm && !doesSelected) {\n          select.cachedOptions.delete(key);\n        }\n      });\n      select.onOptionDestroy(key, vm);\n    });\n    function selectOptionClick() {\n      if (props.disabled !== true && states.groupDisabled !== true) {\n        select.handleOptionSelect(vm, true);\n      }\n    }\n    return {\n      ns,\n      currentLabel,\n      itemSelected,\n      isDisabled,\n      select,\n      hoverItem,\n      visible,\n      hover,\n      selectOptionClick,\n      states\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return vue.withDirectives((vue.openBlock(), vue.createElementBlock(\"li\", {\n    class: vue.normalizeClass([_ctx.ns.be(\"dropdown\", \"item\"), _ctx.ns.is(\"disabled\", _ctx.isDisabled), {\n      selected: _ctx.itemSelected,\n      hover: _ctx.hover\n    }]),\n    onMouseenter: _cache[0] || (_cache[0] = (...args) => _ctx.hoverItem && _ctx.hoverItem(...args)),\n    onClick: _cache[1] || (_cache[1] = vue.withModifiers((...args) => _ctx.selectOptionClick && _ctx.selectOptionClick(...args), [\"stop\"]))\n  }, [vue.renderSlot(_ctx.$slots, \"default\", {}, () => [vue.createElementVNode(\"span\", null, vue.toDisplayString(_ctx.currentLabel), 1)])], 34)), [[vue.vShow, _ctx.visible]]);\n}\nvar Option = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/select/src/option.vue\"]]);\nexports[\"default\"] = Option;","map":{"version":3,"mappings":";;;;;;;;;;AAkCA,MAAKA,YAAaC,mBAAa;EAC7BC,IAAM;EACNC,aAAe;EAEfC,KAAO;IACLC,KAAO;MACLC,QAAU;MACVC,IAAM,GAACC,MAAQ,UAAQC,SAASC,MAAM;IAAA,CACxC;IACAC,OAAO,CAACH,QAAQI,MAAM;IACtBC,OAAS;IACTC,QAAU;MACRP,IAAM;MACNQ,OAAS;IAAA;EACX,CACF;EAEAC,MAAMZ,KAAO;IACL,WAAKa,mBAAa,QAAQ;IAChC,MAAMC,SAASC,YAAS;MACtBC,KAAO;MACPC,aAAe;MACfC,OAAS;MACTC,QAAU;MACVC,KAAO;IAAA,CACR;IAEK;MAAEC;MAAcC,YAAc;MAAAC;MAAYC;MAAQC;IACtD,wBAAUzB,OAAOc,MAAM;IAEzB,MAAM;MAAEI;MAASE;IAAU,eAAON,MAAM;IAElC,WAAKY,wBAAqB;IAEhCF,OAAOG,eAAeC,EAAkC;IAExDC,oBAAgB,MAAM;MACpB,MAAMC,MAAOF,EAAoC;MACjD,MAAM;QAAEG;MAAa;MACrB,MAAMC,kBAAkBR,MAAO,OAAMS,QAAW,cAAW,CAACF,QAAQ;MACpE,MAAMG,YAAe,mBAAgBC,IAAK,CAACC,IAAS;QAC3C,YAAKnC,UAAW2B,EAAoC;MAAA,CAC5D;MAEDS,aAAS,MAAM;QACb,IAAIb,OAAOc,aAAc,KAAIR,GAAG,CAAM,WAAM,CAACI,YAAc;UAClDV,qBAAce,OAAOT,GAAG;QAAA;MACjC,CACD;MACMN,uBAAgBM,KAAKF,EAAE;IAAA,CAC/B;IAE4B;MAC3B,IAAI5B,KAAM,cAAa,IAAQ,WAAOiB,kBAAkB,IAAM;QACrDO,0BAAmBI,IAAI,IAAI;MAAA;IACpC;IAGK;MACLY;MACAnB;MACAC;MACAC;MACAC;MACAC;MACAP;MACAE;MACAqB;MACA3B;IAAA,CACF;EAAA;AAEJ,CAAC;;8CAxGC4B,sBAgBK;IAdFC,KAAK,sBAAUC,QAAGC,EAAE,sBAA4BD,QAAGE,EAAE,aAAaF,IAAU;MAA6Bb;MAAsBX;IAAA;IAQ/H2B,cAAUC,MAAE;IACZC,SAAKD,yDAAOJ,IAAiB;EAAA,IAE9BM,eAEON,4BAFP,MAEO,CADLO,uBAA+B,kCAAtBP,IAAY,0CAbfA,IAAO","names":["_sfc_main","defineComponent","name","componentName","props","value","required","type","String","Boolean","Object","label","Number","created","disabled","default","setup","useNamespace","states","reactive","index","groupDisabled","visible","hitState","hover","currentLabel","itemSelected","isDisabled","select","hoverItem","getCurrentInstance","onOptionCreate","vm","onBeforeUnmount","key","selected","selectedOptions","multiple","doesSelected","some","item","nextTick","cachedOptions","delete","ns","selectOptionClick","_createElementBlock","class","_ctx","be","is","onMouseenter","_cache","onClick","_renderSlot","_createElementVNode"],"sources":["../../../../../../packages/components/select/src/option.vue"],"sourcesContent":["<template>\n  <li\n    v-show=\"visible\"\n    :class=\"[\n      ns.be('dropdown', 'item'),\n      ns.is('disabled', isDisabled),\n      {\n        selected: itemSelected,\n        hover,\n      },\n    ]\"\n    @mouseenter=\"hoverItem\"\n    @click.stop=\"selectOptionClick\"\n  >\n    <slot>\n      <span>{{ currentLabel }}</span>\n    </slot>\n  </li>\n</template>\n\n<script lang=\"ts\">\n// @ts-nocheck\nimport {\n  defineComponent,\n  getCurrentInstance,\n  nextTick,\n  onBeforeUnmount,\n  reactive,\n  toRefs,\n} from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { useOption } from './useOption'\nimport type { SelectOptionProxy } from './token'\n\nexport default defineComponent({\n  name: 'ElOption',\n  componentName: 'ElOption',\n\n  props: {\n    value: {\n      required: true,\n      type: [String, Number, Boolean, Object],\n    },\n    label: [String, Number],\n    created: Boolean,\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n  },\n\n  setup(props) {\n    const ns = useNamespace('select')\n    const states = reactive({\n      index: -1,\n      groupDisabled: false,\n      visible: true,\n      hitState: false,\n      hover: false,\n    })\n\n    const { currentLabel, itemSelected, isDisabled, select, hoverItem } =\n      useOption(props, states)\n\n    const { visible, hover } = toRefs(states)\n\n    const vm = getCurrentInstance().proxy\n\n    select.onOptionCreate(vm as unknown as SelectOptionProxy)\n\n    onBeforeUnmount(() => {\n      const key = (vm as unknown as SelectOptionProxy).value\n      const { selected } = select\n      const selectedOptions = select.props.multiple ? selected : [selected]\n      const doesSelected = selectedOptions.some((item) => {\n        return item.value === (vm as unknown as SelectOptionProxy).value\n      })\n      // if option is not selected, remove it from cache\n      nextTick(() => {\n        if (select.cachedOptions.get(key) === vm && !doesSelected) {\n          select.cachedOptions.delete(key)\n        }\n      })\n      select.onOptionDestroy(key, vm)\n    })\n\n    function selectOptionClick() {\n      if (props.disabled !== true && states.groupDisabled !== true) {\n        select.handleOptionSelect(vm, true)\n      }\n    }\n\n    return {\n      ns,\n      currentLabel,\n      itemSelected,\n      isDisabled,\n      select,\n      hoverItem,\n      visible,\n      hover,\n      selectOptionClick,\n      states,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}