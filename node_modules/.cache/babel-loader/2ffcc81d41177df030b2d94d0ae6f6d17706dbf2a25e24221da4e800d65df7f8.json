{"ast":null,"code":"// The `GSUB` table contains ligatures, among other things.\n// https://www.microsoft.com/typography/OTSPEC/gsub.htm\n\nimport check from '../check';\nimport { Parser } from '../parse';\nimport table from '../table';\nconst subtableParsers = new Array(9); // subtableParsers[0] is unused\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#SS\nsubtableParsers[1] = function parseLookup1() {\n  const start = this.offset + this.relativeOffset;\n  const substFormat = this.parseUShort();\n  if (substFormat === 1) {\n    return {\n      substFormat: 1,\n      coverage: this.parsePointer(Parser.coverage),\n      deltaGlyphId: this.parseUShort()\n    };\n  } else if (substFormat === 2) {\n    return {\n      substFormat: 2,\n      coverage: this.parsePointer(Parser.coverage),\n      substitute: this.parseOffset16List()\n    };\n  }\n  check.assert(false, '0x' + start.toString(16) + ': lookup type 1 format must be 1 or 2.');\n};\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#MS\nsubtableParsers[2] = function parseLookup2() {\n  const substFormat = this.parseUShort();\n  check.argument(substFormat === 1, 'GSUB Multiple Substitution Subtable identifier-format must be 1');\n  return {\n    substFormat: substFormat,\n    coverage: this.parsePointer(Parser.coverage),\n    sequences: this.parseListOfLists()\n  };\n};\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#AS\nsubtableParsers[3] = function parseLookup3() {\n  const substFormat = this.parseUShort();\n  check.argument(substFormat === 1, 'GSUB Alternate Substitution Subtable identifier-format must be 1');\n  return {\n    substFormat: substFormat,\n    coverage: this.parsePointer(Parser.coverage),\n    alternateSets: this.parseListOfLists()\n  };\n};\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#LS\nsubtableParsers[4] = function parseLookup4() {\n  const substFormat = this.parseUShort();\n  check.argument(substFormat === 1, 'GSUB ligature table identifier-format must be 1');\n  return {\n    substFormat: substFormat,\n    coverage: this.parsePointer(Parser.coverage),\n    ligatureSets: this.parseListOfLists(function () {\n      return {\n        ligGlyph: this.parseUShort(),\n        components: this.parseUShortList(this.parseUShort() - 1)\n      };\n    })\n  };\n};\nconst lookupRecordDesc = {\n  sequenceIndex: Parser.uShort,\n  lookupListIndex: Parser.uShort\n};\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#CSF\nsubtableParsers[5] = function parseLookup5() {\n  const start = this.offset + this.relativeOffset;\n  const substFormat = this.parseUShort();\n  if (substFormat === 1) {\n    return {\n      substFormat: substFormat,\n      coverage: this.parsePointer(Parser.coverage),\n      ruleSets: this.parseListOfLists(function () {\n        const glyphCount = this.parseUShort();\n        const substCount = this.parseUShort();\n        return {\n          input: this.parseUShortList(glyphCount - 1),\n          lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)\n        };\n      })\n    };\n  } else if (substFormat === 2) {\n    return {\n      substFormat: substFormat,\n      coverage: this.parsePointer(Parser.coverage),\n      classDef: this.parsePointer(Parser.classDef),\n      classSets: this.parseListOfLists(function () {\n        const glyphCount = this.parseUShort();\n        const substCount = this.parseUShort();\n        return {\n          classes: this.parseUShortList(glyphCount - 1),\n          lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)\n        };\n      })\n    };\n  } else if (substFormat === 3) {\n    const glyphCount = this.parseUShort();\n    const substCount = this.parseUShort();\n    return {\n      substFormat: substFormat,\n      coverages: this.parseList(glyphCount, Parser.pointer(Parser.coverage)),\n      lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)\n    };\n  }\n  check.assert(false, '0x' + start.toString(16) + ': lookup type 5 format must be 1, 2 or 3.');\n};\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#CC\nsubtableParsers[6] = function parseLookup6() {\n  const start = this.offset + this.relativeOffset;\n  const substFormat = this.parseUShort();\n  if (substFormat === 1) {\n    return {\n      substFormat: 1,\n      coverage: this.parsePointer(Parser.coverage),\n      chainRuleSets: this.parseListOfLists(function () {\n        return {\n          backtrack: this.parseUShortList(),\n          input: this.parseUShortList(this.parseShort() - 1),\n          lookahead: this.parseUShortList(),\n          lookupRecords: this.parseRecordList(lookupRecordDesc)\n        };\n      })\n    };\n  } else if (substFormat === 2) {\n    return {\n      substFormat: 2,\n      coverage: this.parsePointer(Parser.coverage),\n      backtrackClassDef: this.parsePointer(Parser.classDef),\n      inputClassDef: this.parsePointer(Parser.classDef),\n      lookaheadClassDef: this.parsePointer(Parser.classDef),\n      chainClassSet: this.parseListOfLists(function () {\n        return {\n          backtrack: this.parseUShortList(),\n          input: this.parseUShortList(this.parseShort() - 1),\n          lookahead: this.parseUShortList(),\n          lookupRecords: this.parseRecordList(lookupRecordDesc)\n        };\n      })\n    };\n  } else if (substFormat === 3) {\n    return {\n      substFormat: 3,\n      backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n      inputCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n      lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n      lookupRecords: this.parseRecordList(lookupRecordDesc)\n    };\n  }\n  check.assert(false, '0x' + start.toString(16) + ': lookup type 6 format must be 1, 2 or 3.');\n};\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#ES\nsubtableParsers[7] = function parseLookup7() {\n  // Extension Substitution subtable\n  const substFormat = this.parseUShort();\n  check.argument(substFormat === 1, 'GSUB Extension Substitution subtable identifier-format must be 1');\n  const extensionLookupType = this.parseUShort();\n  const extensionParser = new Parser(this.data, this.offset + this.parseULong());\n  return {\n    substFormat: 1,\n    lookupType: extensionLookupType,\n    extension: subtableParsers[extensionLookupType].call(extensionParser)\n  };\n};\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#RCCS\nsubtableParsers[8] = function parseLookup8() {\n  const substFormat = this.parseUShort();\n  check.argument(substFormat === 1, 'GSUB Reverse Chaining Contextual Single Substitution Subtable identifier-format must be 1');\n  return {\n    substFormat: substFormat,\n    coverage: this.parsePointer(Parser.coverage),\n    backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n    lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n    substitutes: this.parseUShortList()\n  };\n};\n\n// https://www.microsoft.com/typography/OTSPEC/gsub.htm\nfunction parseGsubTable(data, start) {\n  start = start || 0;\n  const p = new Parser(data, start);\n  const tableVersion = p.parseVersion();\n  check.argument(tableVersion === 1, 'Unsupported GSUB table version.');\n  return {\n    version: tableVersion,\n    scripts: p.parseScriptList(),\n    features: p.parseFeatureList(),\n    lookups: p.parseLookupList(subtableParsers)\n  };\n}\n\n// GSUB Writing //////////////////////////////////////////////\nconst subtableMakers = new Array(9);\nsubtableMakers[1] = function makeLookup1(subtable) {\n  if (subtable.substFormat === 1) {\n    return new table.Table('substitutionTable', [{\n      name: 'substFormat',\n      type: 'USHORT',\n      value: 1\n    }, {\n      name: 'coverage',\n      type: 'TABLE',\n      value: new table.Coverage(subtable.coverage)\n    }, {\n      name: 'deltaGlyphID',\n      type: 'USHORT',\n      value: subtable.deltaGlyphId\n    }]);\n  } else {\n    return new table.Table('substitutionTable', [{\n      name: 'substFormat',\n      type: 'USHORT',\n      value: 2\n    }, {\n      name: 'coverage',\n      type: 'TABLE',\n      value: new table.Coverage(subtable.coverage)\n    }].concat(table.ushortList('substitute', subtable.substitute)));\n  }\n  check.fail('Lookup type 1 substFormat must be 1 or 2.');\n};\nsubtableMakers[3] = function makeLookup3(subtable) {\n  check.assert(subtable.substFormat === 1, 'Lookup type 3 substFormat must be 1.');\n  return new table.Table('substitutionTable', [{\n    name: 'substFormat',\n    type: 'USHORT',\n    value: 1\n  }, {\n    name: 'coverage',\n    type: 'TABLE',\n    value: new table.Coverage(subtable.coverage)\n  }].concat(table.tableList('altSet', subtable.alternateSets, function (alternateSet) {\n    return new table.Table('alternateSetTable', table.ushortList('alternate', alternateSet));\n  })));\n};\nsubtableMakers[4] = function makeLookup4(subtable) {\n  check.assert(subtable.substFormat === 1, 'Lookup type 4 substFormat must be 1.');\n  return new table.Table('substitutionTable', [{\n    name: 'substFormat',\n    type: 'USHORT',\n    value: 1\n  }, {\n    name: 'coverage',\n    type: 'TABLE',\n    value: new table.Coverage(subtable.coverage)\n  }].concat(table.tableList('ligSet', subtable.ligatureSets, function (ligatureSet) {\n    return new table.Table('ligatureSetTable', table.tableList('ligature', ligatureSet, function (ligature) {\n      return new table.Table('ligatureTable', [{\n        name: 'ligGlyph',\n        type: 'USHORT',\n        value: ligature.ligGlyph\n      }].concat(table.ushortList('component', ligature.components, ligature.components.length + 1)));\n    }));\n  })));\n};\nfunction makeGsubTable(gsub) {\n  return new table.Table('GSUB', [{\n    name: 'version',\n    type: 'ULONG',\n    value: 0x10000\n  }, {\n    name: 'scripts',\n    type: 'TABLE',\n    value: new table.ScriptList(gsub.scripts)\n  }, {\n    name: 'features',\n    type: 'TABLE',\n    value: new table.FeatureList(gsub.features)\n  }, {\n    name: 'lookups',\n    type: 'TABLE',\n    value: new table.LookupList(gsub.lookups, subtableMakers)\n  }]);\n}\nexport default {\n  parse: parseGsubTable,\n  make: makeGsubTable\n};","map":{"version":3,"names":["check","Parser","table","subtableParsers","Array","parseLookup1","start","offset","relativeOffset","substFormat","parseUShort","coverage","parsePointer","deltaGlyphId","substitute","parseOffset16List","assert","toString","parseLookup2","argument","sequences","parseListOfLists","parseLookup3","alternateSets","parseLookup4","ligatureSets","ligGlyph","components","parseUShortList","lookupRecordDesc","sequenceIndex","uShort","lookupListIndex","parseLookup5","ruleSets","glyphCount","substCount","input","lookupRecords","parseRecordList","classDef","classSets","classes","coverages","parseList","pointer","parseLookup6","chainRuleSets","backtrack","parseShort","lookahead","backtrackClassDef","inputClassDef","lookaheadClassDef","chainClassSet","backtrackCoverage","inputCoverage","lookaheadCoverage","parseLookup7","extensionLookupType","extensionParser","data","parseULong","lookupType","extension","call","parseLookup8","substitutes","parseGsubTable","p","tableVersion","parseVersion","version","scripts","parseScriptList","features","parseFeatureList","lookups","parseLookupList","subtableMakers","makeLookup1","subtable","Table","name","type","value","Coverage","concat","ushortList","fail","makeLookup3","tableList","alternateSet","makeLookup4","ligatureSet","ligature","length","makeGsubTable","gsub","ScriptList","FeatureList","LookupList","parse","make"],"sources":["C:/Users/14486/Desktop/社区公益系统前端/vue_community/node_modules/opentype.js/src/tables/gsub.js"],"sourcesContent":["// The `GSUB` table contains ligatures, among other things.\n// https://www.microsoft.com/typography/OTSPEC/gsub.htm\n\nimport check from '../check';\nimport { Parser } from '../parse';\nimport table from '../table';\n\nconst subtableParsers = new Array(9);         // subtableParsers[0] is unused\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#SS\nsubtableParsers[1] = function parseLookup1() {\n    const start = this.offset + this.relativeOffset;\n    const substFormat = this.parseUShort();\n    if (substFormat === 1) {\n        return {\n            substFormat: 1,\n            coverage: this.parsePointer(Parser.coverage),\n            deltaGlyphId: this.parseUShort()\n        };\n    } else if (substFormat === 2) {\n        return {\n            substFormat: 2,\n            coverage: this.parsePointer(Parser.coverage),\n            substitute: this.parseOffset16List()\n        };\n    }\n    check.assert(false, '0x' + start.toString(16) + ': lookup type 1 format must be 1 or 2.');\n};\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#MS\nsubtableParsers[2] = function parseLookup2() {\n    const substFormat = this.parseUShort();\n    check.argument(substFormat === 1, 'GSUB Multiple Substitution Subtable identifier-format must be 1');\n    return {\n        substFormat: substFormat,\n        coverage: this.parsePointer(Parser.coverage),\n        sequences: this.parseListOfLists()\n    };\n};\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#AS\nsubtableParsers[3] = function parseLookup3() {\n    const substFormat = this.parseUShort();\n    check.argument(substFormat === 1, 'GSUB Alternate Substitution Subtable identifier-format must be 1');\n    return {\n        substFormat: substFormat,\n        coverage: this.parsePointer(Parser.coverage),\n        alternateSets: this.parseListOfLists()\n    };\n};\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#LS\nsubtableParsers[4] = function parseLookup4() {\n    const substFormat = this.parseUShort();\n    check.argument(substFormat === 1, 'GSUB ligature table identifier-format must be 1');\n    return {\n        substFormat: substFormat,\n        coverage: this.parsePointer(Parser.coverage),\n        ligatureSets: this.parseListOfLists(function() {\n            return {\n                ligGlyph: this.parseUShort(),\n                components: this.parseUShortList(this.parseUShort() - 1)\n            };\n        })\n    };\n};\n\nconst lookupRecordDesc = {\n    sequenceIndex: Parser.uShort,\n    lookupListIndex: Parser.uShort\n};\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#CSF\nsubtableParsers[5] = function parseLookup5() {\n    const start = this.offset + this.relativeOffset;\n    const substFormat = this.parseUShort();\n\n    if (substFormat === 1) {\n        return {\n            substFormat: substFormat,\n            coverage: this.parsePointer(Parser.coverage),\n            ruleSets: this.parseListOfLists(function() {\n                const glyphCount = this.parseUShort();\n                const substCount = this.parseUShort();\n                return {\n                    input: this.parseUShortList(glyphCount - 1),\n                    lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)\n                };\n            })\n        };\n    } else if (substFormat === 2) {\n        return {\n            substFormat: substFormat,\n            coverage: this.parsePointer(Parser.coverage),\n            classDef: this.parsePointer(Parser.classDef),\n            classSets: this.parseListOfLists(function() {\n                const glyphCount = this.parseUShort();\n                const substCount = this.parseUShort();\n                return {\n                    classes: this.parseUShortList(glyphCount - 1),\n                    lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)\n                };\n            })\n        };\n    } else if (substFormat === 3) {\n        const glyphCount = this.parseUShort();\n        const substCount = this.parseUShort();\n        return {\n            substFormat: substFormat,\n            coverages: this.parseList(glyphCount, Parser.pointer(Parser.coverage)),\n            lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)\n        };\n    }\n    check.assert(false, '0x' + start.toString(16) + ': lookup type 5 format must be 1, 2 or 3.');\n};\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#CC\nsubtableParsers[6] = function parseLookup6() {\n    const start = this.offset + this.relativeOffset;\n    const substFormat = this.parseUShort();\n    if (substFormat === 1) {\n        return {\n            substFormat: 1,\n            coverage: this.parsePointer(Parser.coverage),\n            chainRuleSets: this.parseListOfLists(function() {\n                return {\n                    backtrack: this.parseUShortList(),\n                    input: this.parseUShortList(this.parseShort() - 1),\n                    lookahead: this.parseUShortList(),\n                    lookupRecords: this.parseRecordList(lookupRecordDesc)\n                };\n            })\n        };\n    } else if (substFormat === 2) {\n        return {\n            substFormat: 2,\n            coverage: this.parsePointer(Parser.coverage),\n            backtrackClassDef: this.parsePointer(Parser.classDef),\n            inputClassDef: this.parsePointer(Parser.classDef),\n            lookaheadClassDef: this.parsePointer(Parser.classDef),\n            chainClassSet: this.parseListOfLists(function() {\n                return {\n                    backtrack: this.parseUShortList(),\n                    input: this.parseUShortList(this.parseShort() - 1),\n                    lookahead: this.parseUShortList(),\n                    lookupRecords: this.parseRecordList(lookupRecordDesc)\n                };\n            })\n        };\n    } else if (substFormat === 3) {\n        return {\n            substFormat: 3,\n            backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n            inputCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n            lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n            lookupRecords: this.parseRecordList(lookupRecordDesc)\n        };\n    }\n    check.assert(false, '0x' + start.toString(16) + ': lookup type 6 format must be 1, 2 or 3.');\n};\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#ES\nsubtableParsers[7] = function parseLookup7() {\n    // Extension Substitution subtable\n    const substFormat = this.parseUShort();\n    check.argument(substFormat === 1, 'GSUB Extension Substitution subtable identifier-format must be 1');\n    const extensionLookupType = this.parseUShort();\n    const extensionParser = new Parser(this.data, this.offset + this.parseULong());\n    return {\n        substFormat: 1,\n        lookupType: extensionLookupType,\n        extension: subtableParsers[extensionLookupType].call(extensionParser)\n    };\n};\n\n// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#RCCS\nsubtableParsers[8] = function parseLookup8() {\n    const substFormat = this.parseUShort();\n    check.argument(substFormat === 1, 'GSUB Reverse Chaining Contextual Single Substitution Subtable identifier-format must be 1');\n    return {\n        substFormat: substFormat,\n        coverage: this.parsePointer(Parser.coverage),\n        backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n        lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n        substitutes: this.parseUShortList()\n    };\n};\n\n// https://www.microsoft.com/typography/OTSPEC/gsub.htm\nfunction parseGsubTable(data, start) {\n    start = start || 0;\n    const p = new Parser(data, start);\n    const tableVersion = p.parseVersion();\n    check.argument(tableVersion === 1, 'Unsupported GSUB table version.');\n    return {\n        version: tableVersion,\n        scripts: p.parseScriptList(),\n        features: p.parseFeatureList(),\n        lookups: p.parseLookupList(subtableParsers)\n    };\n}\n\n// GSUB Writing //////////////////////////////////////////////\nconst subtableMakers = new Array(9);\n\nsubtableMakers[1] = function makeLookup1(subtable) {\n    if (subtable.substFormat === 1) {\n        return new table.Table('substitutionTable', [\n            {name: 'substFormat', type: 'USHORT', value: 1},\n            {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)},\n            {name: 'deltaGlyphID', type: 'USHORT', value: subtable.deltaGlyphId}\n        ]);\n    } else {\n        return new table.Table('substitutionTable', [\n            {name: 'substFormat', type: 'USHORT', value: 2},\n            {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)}\n        ].concat(table.ushortList('substitute', subtable.substitute)));\n    }\n    check.fail('Lookup type 1 substFormat must be 1 or 2.');\n};\n\nsubtableMakers[3] = function makeLookup3(subtable) {\n    check.assert(subtable.substFormat === 1, 'Lookup type 3 substFormat must be 1.');\n    return new table.Table('substitutionTable', [\n        {name: 'substFormat', type: 'USHORT', value: 1},\n        {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)}\n    ].concat(table.tableList('altSet', subtable.alternateSets, function(alternateSet) {\n        return new table.Table('alternateSetTable', table.ushortList('alternate', alternateSet));\n    })));\n};\n\nsubtableMakers[4] = function makeLookup4(subtable) {\n    check.assert(subtable.substFormat === 1, 'Lookup type 4 substFormat must be 1.');\n    return new table.Table('substitutionTable', [\n        {name: 'substFormat', type: 'USHORT', value: 1},\n        {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)}\n    ].concat(table.tableList('ligSet', subtable.ligatureSets, function(ligatureSet) {\n        return new table.Table('ligatureSetTable', table.tableList('ligature', ligatureSet, function(ligature) {\n            return new table.Table('ligatureTable',\n                [{name: 'ligGlyph', type: 'USHORT', value: ligature.ligGlyph}]\n                .concat(table.ushortList('component', ligature.components, ligature.components.length + 1))\n            );\n        }));\n    })));\n};\n\nfunction makeGsubTable(gsub) {\n    return new table.Table('GSUB', [\n        {name: 'version', type: 'ULONG', value: 0x10000},\n        {name: 'scripts', type: 'TABLE', value: new table.ScriptList(gsub.scripts)},\n        {name: 'features', type: 'TABLE', value: new table.FeatureList(gsub.features)},\n        {name: 'lookups', type: 'TABLE', value: new table.LookupList(gsub.lookups, subtableMakers)}\n    ]);\n}\n\nexport default { parse: parseGsubTable, make: makeGsubTable };\n"],"mappings":"AAAA;AACA;;AAEA,OAAOA,KAAK,MAAM,UAAU;AAC5B,SAASC,MAAM,QAAQ,UAAU;AACjC,OAAOC,KAAK,MAAM,UAAU;AAE5B,MAAMC,eAAe,GAAG,IAAIC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAS;;AAE9C;AACAD,eAAe,CAAC,CAAC,CAAC,GAAG,SAASE,YAAY,GAAG;EACzC,MAAMC,KAAK,GAAG,IAAI,CAACC,MAAM,GAAG,IAAI,CAACC,cAAc;EAC/C,MAAMC,WAAW,GAAG,IAAI,CAACC,WAAW,EAAE;EACtC,IAAID,WAAW,KAAK,CAAC,EAAE;IACnB,OAAO;MACHA,WAAW,EAAE,CAAC;MACdE,QAAQ,EAAE,IAAI,CAACC,YAAY,CAACX,MAAM,CAACU,QAAQ,CAAC;MAC5CE,YAAY,EAAE,IAAI,CAACH,WAAW;IAClC,CAAC;EACL,CAAC,MAAM,IAAID,WAAW,KAAK,CAAC,EAAE;IAC1B,OAAO;MACHA,WAAW,EAAE,CAAC;MACdE,QAAQ,EAAE,IAAI,CAACC,YAAY,CAACX,MAAM,CAACU,QAAQ,CAAC;MAC5CG,UAAU,EAAE,IAAI,CAACC,iBAAiB;IACtC,CAAC;EACL;EACAf,KAAK,CAACgB,MAAM,CAAC,KAAK,EAAE,IAAI,GAAGV,KAAK,CAACW,QAAQ,CAAC,EAAE,CAAC,GAAG,wCAAwC,CAAC;AAC7F,CAAC;;AAED;AACAd,eAAe,CAAC,CAAC,CAAC,GAAG,SAASe,YAAY,GAAG;EACzC,MAAMT,WAAW,GAAG,IAAI,CAACC,WAAW,EAAE;EACtCV,KAAK,CAACmB,QAAQ,CAACV,WAAW,KAAK,CAAC,EAAE,iEAAiE,CAAC;EACpG,OAAO;IACHA,WAAW,EAAEA,WAAW;IACxBE,QAAQ,EAAE,IAAI,CAACC,YAAY,CAACX,MAAM,CAACU,QAAQ,CAAC;IAC5CS,SAAS,EAAE,IAAI,CAACC,gBAAgB;EACpC,CAAC;AACL,CAAC;;AAED;AACAlB,eAAe,CAAC,CAAC,CAAC,GAAG,SAASmB,YAAY,GAAG;EACzC,MAAMb,WAAW,GAAG,IAAI,CAACC,WAAW,EAAE;EACtCV,KAAK,CAACmB,QAAQ,CAACV,WAAW,KAAK,CAAC,EAAE,kEAAkE,CAAC;EACrG,OAAO;IACHA,WAAW,EAAEA,WAAW;IACxBE,QAAQ,EAAE,IAAI,CAACC,YAAY,CAACX,MAAM,CAACU,QAAQ,CAAC;IAC5CY,aAAa,EAAE,IAAI,CAACF,gBAAgB;EACxC,CAAC;AACL,CAAC;;AAED;AACAlB,eAAe,CAAC,CAAC,CAAC,GAAG,SAASqB,YAAY,GAAG;EACzC,MAAMf,WAAW,GAAG,IAAI,CAACC,WAAW,EAAE;EACtCV,KAAK,CAACmB,QAAQ,CAACV,WAAW,KAAK,CAAC,EAAE,iDAAiD,CAAC;EACpF,OAAO;IACHA,WAAW,EAAEA,WAAW;IACxBE,QAAQ,EAAE,IAAI,CAACC,YAAY,CAACX,MAAM,CAACU,QAAQ,CAAC;IAC5Cc,YAAY,EAAE,IAAI,CAACJ,gBAAgB,CAAC,YAAW;MAC3C,OAAO;QACHK,QAAQ,EAAE,IAAI,CAAChB,WAAW,EAAE;QAC5BiB,UAAU,EAAE,IAAI,CAACC,eAAe,CAAC,IAAI,CAAClB,WAAW,EAAE,GAAG,CAAC;MAC3D,CAAC;IACL,CAAC;EACL,CAAC;AACL,CAAC;AAED,MAAMmB,gBAAgB,GAAG;EACrBC,aAAa,EAAE7B,MAAM,CAAC8B,MAAM;EAC5BC,eAAe,EAAE/B,MAAM,CAAC8B;AAC5B,CAAC;;AAED;AACA5B,eAAe,CAAC,CAAC,CAAC,GAAG,SAAS8B,YAAY,GAAG;EACzC,MAAM3B,KAAK,GAAG,IAAI,CAACC,MAAM,GAAG,IAAI,CAACC,cAAc;EAC/C,MAAMC,WAAW,GAAG,IAAI,CAACC,WAAW,EAAE;EAEtC,IAAID,WAAW,KAAK,CAAC,EAAE;IACnB,OAAO;MACHA,WAAW,EAAEA,WAAW;MACxBE,QAAQ,EAAE,IAAI,CAACC,YAAY,CAACX,MAAM,CAACU,QAAQ,CAAC;MAC5CuB,QAAQ,EAAE,IAAI,CAACb,gBAAgB,CAAC,YAAW;QACvC,MAAMc,UAAU,GAAG,IAAI,CAACzB,WAAW,EAAE;QACrC,MAAM0B,UAAU,GAAG,IAAI,CAAC1B,WAAW,EAAE;QACrC,OAAO;UACH2B,KAAK,EAAE,IAAI,CAACT,eAAe,CAACO,UAAU,GAAG,CAAC,CAAC;UAC3CG,aAAa,EAAE,IAAI,CAACC,eAAe,CAACH,UAAU,EAAEP,gBAAgB;QACpE,CAAC;MACL,CAAC;IACL,CAAC;EACL,CAAC,MAAM,IAAIpB,WAAW,KAAK,CAAC,EAAE;IAC1B,OAAO;MACHA,WAAW,EAAEA,WAAW;MACxBE,QAAQ,EAAE,IAAI,CAACC,YAAY,CAACX,MAAM,CAACU,QAAQ,CAAC;MAC5C6B,QAAQ,EAAE,IAAI,CAAC5B,YAAY,CAACX,MAAM,CAACuC,QAAQ,CAAC;MAC5CC,SAAS,EAAE,IAAI,CAACpB,gBAAgB,CAAC,YAAW;QACxC,MAAMc,UAAU,GAAG,IAAI,CAACzB,WAAW,EAAE;QACrC,MAAM0B,UAAU,GAAG,IAAI,CAAC1B,WAAW,EAAE;QACrC,OAAO;UACHgC,OAAO,EAAE,IAAI,CAACd,eAAe,CAACO,UAAU,GAAG,CAAC,CAAC;UAC7CG,aAAa,EAAE,IAAI,CAACC,eAAe,CAACH,UAAU,EAAEP,gBAAgB;QACpE,CAAC;MACL,CAAC;IACL,CAAC;EACL,CAAC,MAAM,IAAIpB,WAAW,KAAK,CAAC,EAAE;IAC1B,MAAM0B,UAAU,GAAG,IAAI,CAACzB,WAAW,EAAE;IACrC,MAAM0B,UAAU,GAAG,IAAI,CAAC1B,WAAW,EAAE;IACrC,OAAO;MACHD,WAAW,EAAEA,WAAW;MACxBkC,SAAS,EAAE,IAAI,CAACC,SAAS,CAACT,UAAU,EAAElC,MAAM,CAAC4C,OAAO,CAAC5C,MAAM,CAACU,QAAQ,CAAC,CAAC;MACtE2B,aAAa,EAAE,IAAI,CAACC,eAAe,CAACH,UAAU,EAAEP,gBAAgB;IACpE,CAAC;EACL;EACA7B,KAAK,CAACgB,MAAM,CAAC,KAAK,EAAE,IAAI,GAAGV,KAAK,CAACW,QAAQ,CAAC,EAAE,CAAC,GAAG,2CAA2C,CAAC;AAChG,CAAC;;AAED;AACAd,eAAe,CAAC,CAAC,CAAC,GAAG,SAAS2C,YAAY,GAAG;EACzC,MAAMxC,KAAK,GAAG,IAAI,CAACC,MAAM,GAAG,IAAI,CAACC,cAAc;EAC/C,MAAMC,WAAW,GAAG,IAAI,CAACC,WAAW,EAAE;EACtC,IAAID,WAAW,KAAK,CAAC,EAAE;IACnB,OAAO;MACHA,WAAW,EAAE,CAAC;MACdE,QAAQ,EAAE,IAAI,CAACC,YAAY,CAACX,MAAM,CAACU,QAAQ,CAAC;MAC5CoC,aAAa,EAAE,IAAI,CAAC1B,gBAAgB,CAAC,YAAW;QAC5C,OAAO;UACH2B,SAAS,EAAE,IAAI,CAACpB,eAAe,EAAE;UACjCS,KAAK,EAAE,IAAI,CAACT,eAAe,CAAC,IAAI,CAACqB,UAAU,EAAE,GAAG,CAAC,CAAC;UAClDC,SAAS,EAAE,IAAI,CAACtB,eAAe,EAAE;UACjCU,aAAa,EAAE,IAAI,CAACC,eAAe,CAACV,gBAAgB;QACxD,CAAC;MACL,CAAC;IACL,CAAC;EACL,CAAC,MAAM,IAAIpB,WAAW,KAAK,CAAC,EAAE;IAC1B,OAAO;MACHA,WAAW,EAAE,CAAC;MACdE,QAAQ,EAAE,IAAI,CAACC,YAAY,CAACX,MAAM,CAACU,QAAQ,CAAC;MAC5CwC,iBAAiB,EAAE,IAAI,CAACvC,YAAY,CAACX,MAAM,CAACuC,QAAQ,CAAC;MACrDY,aAAa,EAAE,IAAI,CAACxC,YAAY,CAACX,MAAM,CAACuC,QAAQ,CAAC;MACjDa,iBAAiB,EAAE,IAAI,CAACzC,YAAY,CAACX,MAAM,CAACuC,QAAQ,CAAC;MACrDc,aAAa,EAAE,IAAI,CAACjC,gBAAgB,CAAC,YAAW;QAC5C,OAAO;UACH2B,SAAS,EAAE,IAAI,CAACpB,eAAe,EAAE;UACjCS,KAAK,EAAE,IAAI,CAACT,eAAe,CAAC,IAAI,CAACqB,UAAU,EAAE,GAAG,CAAC,CAAC;UAClDC,SAAS,EAAE,IAAI,CAACtB,eAAe,EAAE;UACjCU,aAAa,EAAE,IAAI,CAACC,eAAe,CAACV,gBAAgB;QACxD,CAAC;MACL,CAAC;IACL,CAAC;EACL,CAAC,MAAM,IAAIpB,WAAW,KAAK,CAAC,EAAE;IAC1B,OAAO;MACHA,WAAW,EAAE,CAAC;MACd8C,iBAAiB,EAAE,IAAI,CAACX,SAAS,CAAC3C,MAAM,CAAC4C,OAAO,CAAC5C,MAAM,CAACU,QAAQ,CAAC,CAAC;MAClE6C,aAAa,EAAE,IAAI,CAACZ,SAAS,CAAC3C,MAAM,CAAC4C,OAAO,CAAC5C,MAAM,CAACU,QAAQ,CAAC,CAAC;MAC9D8C,iBAAiB,EAAE,IAAI,CAACb,SAAS,CAAC3C,MAAM,CAAC4C,OAAO,CAAC5C,MAAM,CAACU,QAAQ,CAAC,CAAC;MAClE2B,aAAa,EAAE,IAAI,CAACC,eAAe,CAACV,gBAAgB;IACxD,CAAC;EACL;EACA7B,KAAK,CAACgB,MAAM,CAAC,KAAK,EAAE,IAAI,GAAGV,KAAK,CAACW,QAAQ,CAAC,EAAE,CAAC,GAAG,2CAA2C,CAAC;AAChG,CAAC;;AAED;AACAd,eAAe,CAAC,CAAC,CAAC,GAAG,SAASuD,YAAY,GAAG;EACzC;EACA,MAAMjD,WAAW,GAAG,IAAI,CAACC,WAAW,EAAE;EACtCV,KAAK,CAACmB,QAAQ,CAACV,WAAW,KAAK,CAAC,EAAE,kEAAkE,CAAC;EACrG,MAAMkD,mBAAmB,GAAG,IAAI,CAACjD,WAAW,EAAE;EAC9C,MAAMkD,eAAe,GAAG,IAAI3D,MAAM,CAAC,IAAI,CAAC4D,IAAI,EAAE,IAAI,CAACtD,MAAM,GAAG,IAAI,CAACuD,UAAU,EAAE,CAAC;EAC9E,OAAO;IACHrD,WAAW,EAAE,CAAC;IACdsD,UAAU,EAAEJ,mBAAmB;IAC/BK,SAAS,EAAE7D,eAAe,CAACwD,mBAAmB,CAAC,CAACM,IAAI,CAACL,eAAe;EACxE,CAAC;AACL,CAAC;;AAED;AACAzD,eAAe,CAAC,CAAC,CAAC,GAAG,SAAS+D,YAAY,GAAG;EACzC,MAAMzD,WAAW,GAAG,IAAI,CAACC,WAAW,EAAE;EACtCV,KAAK,CAACmB,QAAQ,CAACV,WAAW,KAAK,CAAC,EAAE,2FAA2F,CAAC;EAC9H,OAAO;IACHA,WAAW,EAAEA,WAAW;IACxBE,QAAQ,EAAE,IAAI,CAACC,YAAY,CAACX,MAAM,CAACU,QAAQ,CAAC;IAC5C4C,iBAAiB,EAAE,IAAI,CAACX,SAAS,CAAC3C,MAAM,CAAC4C,OAAO,CAAC5C,MAAM,CAACU,QAAQ,CAAC,CAAC;IAClE8C,iBAAiB,EAAE,IAAI,CAACb,SAAS,CAAC3C,MAAM,CAAC4C,OAAO,CAAC5C,MAAM,CAACU,QAAQ,CAAC,CAAC;IAClEwD,WAAW,EAAE,IAAI,CAACvC,eAAe;EACrC,CAAC;AACL,CAAC;;AAED;AACA,SAASwC,cAAc,CAACP,IAAI,EAAEvD,KAAK,EAAE;EACjCA,KAAK,GAAGA,KAAK,IAAI,CAAC;EAClB,MAAM+D,CAAC,GAAG,IAAIpE,MAAM,CAAC4D,IAAI,EAAEvD,KAAK,CAAC;EACjC,MAAMgE,YAAY,GAAGD,CAAC,CAACE,YAAY,EAAE;EACrCvE,KAAK,CAACmB,QAAQ,CAACmD,YAAY,KAAK,CAAC,EAAE,iCAAiC,CAAC;EACrE,OAAO;IACHE,OAAO,EAAEF,YAAY;IACrBG,OAAO,EAAEJ,CAAC,CAACK,eAAe,EAAE;IAC5BC,QAAQ,EAAEN,CAAC,CAACO,gBAAgB,EAAE;IAC9BC,OAAO,EAAER,CAAC,CAACS,eAAe,CAAC3E,eAAe;EAC9C,CAAC;AACL;;AAEA;AACA,MAAM4E,cAAc,GAAG,IAAI3E,KAAK,CAAC,CAAC,CAAC;AAEnC2E,cAAc,CAAC,CAAC,CAAC,GAAG,SAASC,WAAW,CAACC,QAAQ,EAAE;EAC/C,IAAIA,QAAQ,CAACxE,WAAW,KAAK,CAAC,EAAE;IAC5B,OAAO,IAAIP,KAAK,CAACgF,KAAK,CAAC,mBAAmB,EAAE,CACxC;MAACC,IAAI,EAAE,aAAa;MAAEC,IAAI,EAAE,QAAQ;MAAEC,KAAK,EAAE;IAAC,CAAC,EAC/C;MAACF,IAAI,EAAE,UAAU;MAAEC,IAAI,EAAE,OAAO;MAAEC,KAAK,EAAE,IAAInF,KAAK,CAACoF,QAAQ,CAACL,QAAQ,CAACtE,QAAQ;IAAC,CAAC,EAC/E;MAACwE,IAAI,EAAE,cAAc;MAAEC,IAAI,EAAE,QAAQ;MAAEC,KAAK,EAAEJ,QAAQ,CAACpE;IAAY,CAAC,CACvE,CAAC;EACN,CAAC,MAAM;IACH,OAAO,IAAIX,KAAK,CAACgF,KAAK,CAAC,mBAAmB,EAAE,CACxC;MAACC,IAAI,EAAE,aAAa;MAAEC,IAAI,EAAE,QAAQ;MAAEC,KAAK,EAAE;IAAC,CAAC,EAC/C;MAACF,IAAI,EAAE,UAAU;MAAEC,IAAI,EAAE,OAAO;MAAEC,KAAK,EAAE,IAAInF,KAAK,CAACoF,QAAQ,CAACL,QAAQ,CAACtE,QAAQ;IAAC,CAAC,CAClF,CAAC4E,MAAM,CAACrF,KAAK,CAACsF,UAAU,CAAC,YAAY,EAAEP,QAAQ,CAACnE,UAAU,CAAC,CAAC,CAAC;EAClE;EACAd,KAAK,CAACyF,IAAI,CAAC,2CAA2C,CAAC;AAC3D,CAAC;AAEDV,cAAc,CAAC,CAAC,CAAC,GAAG,SAASW,WAAW,CAACT,QAAQ,EAAE;EAC/CjF,KAAK,CAACgB,MAAM,CAACiE,QAAQ,CAACxE,WAAW,KAAK,CAAC,EAAE,sCAAsC,CAAC;EAChF,OAAO,IAAIP,KAAK,CAACgF,KAAK,CAAC,mBAAmB,EAAE,CACxC;IAACC,IAAI,EAAE,aAAa;IAAEC,IAAI,EAAE,QAAQ;IAAEC,KAAK,EAAE;EAAC,CAAC,EAC/C;IAACF,IAAI,EAAE,UAAU;IAAEC,IAAI,EAAE,OAAO;IAAEC,KAAK,EAAE,IAAInF,KAAK,CAACoF,QAAQ,CAACL,QAAQ,CAACtE,QAAQ;EAAC,CAAC,CAClF,CAAC4E,MAAM,CAACrF,KAAK,CAACyF,SAAS,CAAC,QAAQ,EAAEV,QAAQ,CAAC1D,aAAa,EAAE,UAASqE,YAAY,EAAE;IAC9E,OAAO,IAAI1F,KAAK,CAACgF,KAAK,CAAC,mBAAmB,EAAEhF,KAAK,CAACsF,UAAU,CAAC,WAAW,EAAEI,YAAY,CAAC,CAAC;EAC5F,CAAC,CAAC,CAAC,CAAC;AACR,CAAC;AAEDb,cAAc,CAAC,CAAC,CAAC,GAAG,SAASc,WAAW,CAACZ,QAAQ,EAAE;EAC/CjF,KAAK,CAACgB,MAAM,CAACiE,QAAQ,CAACxE,WAAW,KAAK,CAAC,EAAE,sCAAsC,CAAC;EAChF,OAAO,IAAIP,KAAK,CAACgF,KAAK,CAAC,mBAAmB,EAAE,CACxC;IAACC,IAAI,EAAE,aAAa;IAAEC,IAAI,EAAE,QAAQ;IAAEC,KAAK,EAAE;EAAC,CAAC,EAC/C;IAACF,IAAI,EAAE,UAAU;IAAEC,IAAI,EAAE,OAAO;IAAEC,KAAK,EAAE,IAAInF,KAAK,CAACoF,QAAQ,CAACL,QAAQ,CAACtE,QAAQ;EAAC,CAAC,CAClF,CAAC4E,MAAM,CAACrF,KAAK,CAACyF,SAAS,CAAC,QAAQ,EAAEV,QAAQ,CAACxD,YAAY,EAAE,UAASqE,WAAW,EAAE;IAC5E,OAAO,IAAI5F,KAAK,CAACgF,KAAK,CAAC,kBAAkB,EAAEhF,KAAK,CAACyF,SAAS,CAAC,UAAU,EAAEG,WAAW,EAAE,UAASC,QAAQ,EAAE;MACnG,OAAO,IAAI7F,KAAK,CAACgF,KAAK,CAAC,eAAe,EAClC,CAAC;QAACC,IAAI,EAAE,UAAU;QAAEC,IAAI,EAAE,QAAQ;QAAEC,KAAK,EAAEU,QAAQ,CAACrE;MAAQ,CAAC,CAAC,CAC7D6D,MAAM,CAACrF,KAAK,CAACsF,UAAU,CAAC,WAAW,EAAEO,QAAQ,CAACpE,UAAU,EAAEoE,QAAQ,CAACpE,UAAU,CAACqE,MAAM,GAAG,CAAC,CAAC,CAAC,CAC9F;IACL,CAAC,CAAC,CAAC;EACP,CAAC,CAAC,CAAC,CAAC;AACR,CAAC;AAED,SAASC,aAAa,CAACC,IAAI,EAAE;EACzB,OAAO,IAAIhG,KAAK,CAACgF,KAAK,CAAC,MAAM,EAAE,CAC3B;IAACC,IAAI,EAAE,SAAS;IAAEC,IAAI,EAAE,OAAO;IAAEC,KAAK,EAAE;EAAO,CAAC,EAChD;IAACF,IAAI,EAAE,SAAS;IAAEC,IAAI,EAAE,OAAO;IAAEC,KAAK,EAAE,IAAInF,KAAK,CAACiG,UAAU,CAACD,IAAI,CAACzB,OAAO;EAAC,CAAC,EAC3E;IAACU,IAAI,EAAE,UAAU;IAAEC,IAAI,EAAE,OAAO;IAAEC,KAAK,EAAE,IAAInF,KAAK,CAACkG,WAAW,CAACF,IAAI,CAACvB,QAAQ;EAAC,CAAC,EAC9E;IAACQ,IAAI,EAAE,SAAS;IAAEC,IAAI,EAAE,OAAO;IAAEC,KAAK,EAAE,IAAInF,KAAK,CAACmG,UAAU,CAACH,IAAI,CAACrB,OAAO,EAAEE,cAAc;EAAC,CAAC,CAC9F,CAAC;AACN;AAEA,eAAe;EAAEuB,KAAK,EAAElC,cAAc;EAAEmC,IAAI,EAAEN;AAAc,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}