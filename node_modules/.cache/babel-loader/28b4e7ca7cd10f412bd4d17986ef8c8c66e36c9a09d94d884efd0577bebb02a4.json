{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"input_video\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_video_player = _resolveComponent(\"video-player\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\"在视频外面加一个容器\"), _createElementVNode(\"div\", _hoisted_1, [_createVNode(_component_video_player, {\n    class: \"video-player vjs-custom-skin\",\n    ref: \"videoPlayer\",\n    playsinline: true,\n    options: $data.playerOptions\n  }, null, 8 /* PROPS */, [\"options\"])])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */);\n}","map":{"version":3,"mappings":";;EAEOA,KAAK,EAAC;AAAa;;;6DADxBC,iCAAiB,EACjBC,oBAMM,OANNC,UAMM,GALJC,aAIgBC;IAJDL,KAAK,EAAC,8BAA8B;IACpCM,GAAG,EAAC,aAAa;IAChBC,WAAW,EAAE,IAAI;IACjBC,OAAO,EAAEC","names":["class","_createCommentVNode","_createElementVNode","_hoisted_1","_createVNode","_component_video_player","ref","playsinline","options","$data"],"sourceRoot":"","sources":["C:\\Users\\14486\\Desktop\\社区公益系统前端\\vue_community\\src\\NavigationBar\\test.vue"],"sourcesContent":["<template>\r\n  <!--在视频外面加一个容器-->\r\n  <div class=\"input_video\">\r\n    <video-player  class=\"video-player vjs-custom-skin\"\r\n                   ref=\"videoPlayer\"\r\n                   :playsinline=\"true\"\r\n                   :options=\"playerOptions\"\r\n    ></video-player>\r\n  </div>\r\n</template>\r\n<script>\r\nexport default {\r\n  name : 'BusImg',\r\n  data () {\r\n    return {\r\n      // 视频播放\r\n      playerOptions : {\r\n        playbackRates : [ 0.5, 1.0, 1.5, 2.0 ], //可选择的播放速度\r\n        autoplay : false, //如果true,浏览器准备好时开始回放。\r\n        muted : false, // 默认情况下将会消除任何音频。\r\n        loop : false, // 视频一结束就重新开始。\r\n        preload : 'auto', // 建议浏览器在<video>加载元素后是否应该开始下载视频数据。auto浏览器选择最佳行为,立即开始加载视频（如果浏览器支持）\r\n        language : 'zh-CN',\r\n        aspectRatio : '16:9', // 将播放器置于流畅模式，并在计算播放器的动态大小时使用该值。值应该代表一个比例 - 用冒号分隔的两个数字（例如\"16:9\"或\"4:3\"）\r\n        fluid : true, // 当true时，Video.js player将拥有流体大小。换句话说，它将按比例缩放以适应其容器。\r\n        sources : [ {\r\n          type : \"video/mp4\",\r\n          src : require('../assets/mp4/111.mp4')//url地址\r\n        } ],\r\n        poster : \"\", //你的封面地址\r\n        // width: document.documentElement.clientWidth,\r\n        notSupportedMessage : '此视频暂无法播放，请稍后再试', //允许覆盖Video.js无法播放媒体源时显示的默认信息。\r\n        controlBar : {\r\n          timeDivider : true,//当前时间和持续时间的分隔符\r\n          durationDisplay : true,//显示持续时间\r\n          remainingTimeDisplay : false,//是否显示剩余时间功能\r\n          fullscreenToggle : true  //全屏按钮\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.input_video{\r\n  width: 400px;\r\n  height: 400px;\r\n  margin: 0 auto;\r\n\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}