{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-41d2c40a\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"my_video\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_video_player = _resolveComponent(\"video-player\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_video_player, {\n    class: \"video-player vjs-custom-skin\",\n    ref: \"videoPlayer\",\n    playsinline: true,\n    options: $data.options,\n    onPlay: _cache[0] || (_cache[0] = $event => $options.onPlayerPlay($event)),\n    onPause: _cache[1] || (_cache[1] = $event => $options.onPlayerPause($event)),\n    onEnded: _cache[2] || (_cache[2] = $event => $options.onPlayerEnded($event)),\n    onWaiting: _cache[3] || (_cache[3] = $event => $options.onPlayerWaiting($event)),\n    onPlaying: _cache[4] || (_cache[4] = $event => $options.onPlayerPlaying($event)),\n    onLoadeddata: _cache[5] || (_cache[5] = $event => $options.onPlayerLoadeddata($event)),\n    onTimeupdate: _cache[6] || (_cache[6] = $event => $options.onPlayerTimeupdate($event)),\n    onCanplay: _cache[7] || (_cache[7] = $event => $options.onPlayerCanplay($event)),\n    onCanplaythrough: _cache[8] || (_cache[8] = $event => $options.onPlayerCanplaythrough($event)),\n    onStatechanged: _cache[9] || (_cache[9] = $event => $options.playerStateChanged($event)),\n    onReady: $options.playerReadied\n  }, null, 8 /* PROPS */, [\"options\", \"onReady\"])]);\n}","map":{"version":3,"mappings":";;;EACOA,KAAK,EAAC;AAAU;;;uBAArBC,oBAmBM,OAnBNC,UAmBM,GAlBJC,aAiBeC;IAhBXJ,KAAK,EAAC,8BAA8B;IACpCK,GAAG,EAAC,aAAa;IAChBC,WAAW,EAAE,IAAI;IACjBC,OAAO,EAAEC,aAAO;IAChBC,MAAI,sCAAEC,qBAAY,CAACC,MAAM;IACzBC,OAAK,sCAAEF,sBAAa,CAACC,MAAM;IAC3BE,OAAK,sCAAEH,sBAAa,CAACC,MAAM;IAC3BG,SAAO,sCAAEJ,wBAAe,CAACC,MAAM;IAC/BI,SAAO,sCAAEL,wBAAe,CAACC,MAAM;IAC/BK,YAAU,sCAAEN,2BAAkB,CAACC,MAAM;IACrCM,YAAU,sCAAEP,2BAAkB,CAACC,MAAM;IACrCO,SAAO,sCAAER,wBAAe,CAACC,MAAM;IAC/BQ,gBAAc,sCAAET,+BAAsB,CAACC,MAAM;IAC7CS,cAAY,sCAAEV,2BAAkB,CAACC,MAAM;IACvCU,OAAK,EAAEX","names":["class","_createElementBlock","_hoisted_1","_createVNode","_component_video_player","ref","playsinline","options","$data","onPlay","$options","$event","onPause","onEnded","onWaiting","onPlaying","onLoadeddata","onTimeupdate","onCanplay","onCanplaythrough","onStatechanged","onReady"],"sourceRoot":"","sources":["C:\\Users\\14486\\Desktop\\社区公益系统前端\\vue_community\\src\\NavigationBar\\test.vue"],"sourcesContent":["<template>\r\n  <div class=\"my_video\">\r\n    <video-player\r\n        class=\"video-player vjs-custom-skin\"\r\n        ref=\"videoPlayer\"\r\n        :playsinline=\"true\"\r\n        :options=\"options\"\r\n        @play=\"onPlayerPlay($event)\"\r\n        @pause=\"onPlayerPause($event)\"\r\n        @ended=\"onPlayerEnded($event)\"\r\n        @waiting=\"onPlayerWaiting($event)\"\r\n        @playing=\"onPlayerPlaying($event)\"\r\n        @loadeddata=\"onPlayerLoadeddata($event)\"\r\n        @timeupdate=\"onPlayerTimeupdate($event)\"\r\n        @canplay=\"onPlayerCanplay($event)\"\r\n        @canplaythrough=\"onPlayerCanplaythrough($event)\"\r\n        @statechanged=\"playerStateChanged($event)\"\r\n        @ready=\"playerReadied\"\r\n    >\r\n    </video-player>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Vue from \"vue\";\r\nimport VideoPlayer from \"vue-video-player\";\r\n// require('video.js/dist/video-js.css')  //按官网引会找不到然后报错\r\nrequire(\"vue-video-player/node_modules/video.js/dist/video-js.css\");\r\nrequire(\"vue-video-player/src/custom-theme.css\");\r\nVue.use(VideoPlayer);\r\nexport default {\r\n  name: \"my_video\",\r\n  props: {},\r\n  data() {\r\n    return {\r\n      options: {\r\n        playbackRates: [0.5, 1.0, 1.5, 2.0, 3.0], // 可选的播放速度\r\n        autoplay: true, // 是否自动播放\r\n        muted: false, // 是否静音\r\n        loop: true, // 是否开启循环播放\r\n        preload: \"auto\", // 自动预加载\r\n        language: \"zh-CN\", // 语言，'en', 'zh-cn', 'zh-tw'\r\n        aspectRatio: \"16:9\", // 播放器高宽占比（例如\"16:9\"或\"4:3\"）\r\n        fluid: true, // 当true时，Video.js player将拥有流体大小。换句话说，它将按比例缩放以适应其容器。\r\n        sources: [\r\n          {\r\n            type: \"video/mp4\", // 类型\r\n            src:\r\n                \"https://mp4i.vodfile.m1905.com/202011280727/c884af78f3467d3e7d65804b40c74771/video/2020/11/26/v20201126Z7OID3M29Z1FF6G3/v20201126Z7OID3M29Z1FF6G3.mp4\", // url地址\r\n          },\r\n        ],\r\n        poster:\r\n            \"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1606462956126&di=2d87964d4faf656af55d09d938640d97&imgtype=0&src=http%3A%2F%2Fattachments.gfan.com%2Fforum%2Fattachments2%2F201310%2F10%2F150326y7dzdd8d4kpjjdsd.jpg\", // 封面地址\r\n        notSupportedMessage: \"此视频暂无法播放，请稍后再试\", // 允许覆盖Video.js无法播放媒体源时显示的默认信息。\r\n        controlBar: {\r\n          timeDivider: true, // 是否显示当前时间和持续时间的分隔符，\"/\"\r\n          durationDisplay: true, // 是否显示持续时间\r\n          remainingTimeDisplay: false, // 是否显示剩余时间\r\n          fullscreenToggle: true, // 是否显示全屏按钮\r\n        },\r\n      },\r\n    };\r\n  },\r\n  methods: {\r\n    // 播放回调\r\n    onPlayerPlay($event) {\r\n      console.log(\"player play!\", $event);\r\n    },\r\n    // 暂停回调\r\n    onPlayerPause($event) {\r\n      console.log(\"player pause!\", $event);\r\n    },\r\n    // 视频播完回调\r\n    onPlayerEnded($event) {\r\n      console.log($event);\r\n    },\r\n    // DOM元素上的readyState更改导致播放停止\r\n    onPlayerWaiting($event) {\r\n      console.log($event);\r\n    },\r\n    // 已开始播放回调\r\n    onPlayerPlaying($event) {\r\n      console.log($event);\r\n    },\r\n    // 当播放器在当前播放位置下载数据时触发\r\n    onPlayerLoadeddata($event) {\r\n      console.log($event);\r\n    },\r\n    // 当前播放位置发生变化时触发。\r\n    onPlayerTimeupdate($event) {\r\n      console.log($event);\r\n    },\r\n    //媒体的readyState为HAVE_FUTURE_DATA或更高\r\n    onPlayerCanplay($event) {\r\n      // console.log('player Canplay!', player)\r\n    },\r\n    //媒体的readyState为HAVE_ENOUGH_DATA或更高。这意味着可以在不缓冲的情况下播放整个媒体文件。\r\n    onPlayerCanplaythrough($event) {\r\n      // console.log('player Canplaythrough!', player)\r\n    },\r\n    //播放状态改变回调\r\n    playerStateChanged($event) {\r\n      console.log(\"player current update state\", $event);\r\n    },\r\n    //将侦听器绑定到组件的就绪状态。与事件监听器的不同之处在于，如果ready事件已经发生，它将立即触发该函数。。\r\n    playerReadied() {\r\n      console.log(\"example player 1 readied\");\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.my_video {\r\n  width: 1000px;\r\n  height: 800px;\r\n  margin: 0 auto;\r\n  text-align: center;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}