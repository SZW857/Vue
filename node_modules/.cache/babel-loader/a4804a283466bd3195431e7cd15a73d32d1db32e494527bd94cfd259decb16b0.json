{"ast":null,"code":"// 首先先引入aixos\nimport axios from 'axios';\n// element引入文件\nimport { ElMessage } from 'element-plus';\n\n// 创建一个axios 实例\nconst api = axios.create({\n  baseURL: 'http://127.0.0.1:8083',\n  // 基准地址\n  timeout: 5000 // 超时时间\n});\n// 请求拦截\napi.interceptors.request.use(config => {\n  const token = window.localStorage.getItem('token');\n  // 判断是否存在token，如果存在的话，则每个http header都加上token\n  if (token) {\n    config.headers.Authorization = 'Bearer ' + token;\n  }\n  // 放行\n  return config;\n}, error => {\n  Promise.reject(error);\n});\n// 响应拦截\n/**\r\n 响应拦截也是一样，最基本的可以把返回出来的一些数据做简单处理，\r\n 比如把请求回来的提示信息解构出来，给予提示，这样就不用在每次请求完成后单独去写\r\n 这里用的是element-ui 里面的提示\r\n **/\napi.interceptors.response.use(res => {\n  return res ? res.data : res;\n}, err => {\n  console.log(err);\n  const {\n    data: result\n  } = res.data;\n  ElMessage({\n    message: \"发送成功\",\n    type: 'success'\n  });\n  return result;\n}, error => {\n  Promise.reject(error);\n});\n// 最后导出\nexport default api;","map":{"version":3,"names":["axios","ElMessage","api","create","baseURL","timeout","interceptors","request","use","config","token","window","localStorage","getItem","headers","Authorization","error","Promise","reject","response","res","data","err","console","log","result","message","type"],"sources":["C:/Users/14486/Desktop/社区公益系统前端/vue_community/src/request/index.js"],"sourcesContent":["// 首先先引入aixos\r\nimport axios from 'axios'\r\n// element引入文件\r\nimport { ElMessage } from 'element-plus'\r\n\r\n\r\n// 创建一个axios 实例\r\nconst api = axios.create({\r\n    baseURL: 'http://127.0.0.1:8083', // 基准地址\r\n    timeout: 5000 // 超时时间\r\n})\r\n// 请求拦截\r\napi.interceptors.request.use((config) => {\r\n    const token = window.localStorage.getItem('token');\r\n    // 判断是否存在token，如果存在的话，则每个http header都加上token\r\n    if (token) {\r\n        config.headers.Authorization = 'Bearer ' + token;\r\n    }\r\n    // 放行\r\n    return config;\r\n}, error => {\r\n    Promise.reject(error)\r\n})\r\n// 响应拦截\r\n/**\r\n 响应拦截也是一样，最基本的可以把返回出来的一些数据做简单处理，\r\n 比如把请求回来的提示信息解构出来，给予提示，这样就不用在每次请求完成后单独去写\r\n 这里用的是element-ui 里面的提示\r\n **/\r\napi.interceptors.response.use((res) => {\r\n    return res ? res.data : res;\r\n}, err => {\r\n    console.log(err);\r\n    \r\n    const { data: result, } = res.data\r\n    ElMessage({\r\n        message:\"发送成功\",\r\n        type: 'success',\r\n    })\r\n\r\n    return result\r\n}, error => {\r\n    Promise.reject(error)\r\n})\r\n// 最后导出\r\nexport default api;"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA,SAASC,SAAS,QAAQ,cAAc;;AAGxC;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACrBC,OAAO,EAAE,uBAAuB;EAAE;EAClCC,OAAO,EAAE,IAAI,CAAC;AAClB,CAAC,CAAC;AACF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACrC,MAAMC,KAAK,GAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAClD;EACA,IAAIH,KAAK,EAAE;IACPD,MAAM,CAACK,OAAO,CAACC,aAAa,GAAG,SAAS,GAAGL,KAAK;EACpD;EACA;EACA,OAAOD,MAAM;AACjB,CAAC,EAAEO,KAAK,IAAI;EACRC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AACzB,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACAd,GAAG,CAACI,YAAY,CAACa,QAAQ,CAACX,GAAG,CAAEY,GAAG,IAAK;EACnC,OAAOA,GAAG,GAAGA,GAAG,CAACC,IAAI,GAAGD,GAAG;AAC/B,CAAC,EAAEE,GAAG,IAAI;EACNC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;EAEhB,MAAM;IAAED,IAAI,EAAEI;EAAQ,CAAC,GAAGL,GAAG,CAACC,IAAI;EAClCpB,SAAS,CAAC;IACNyB,OAAO,EAAC,MAAM;IACdC,IAAI,EAAE;EACV,CAAC,CAAC;EAEF,OAAOF,MAAM;AACjB,CAAC,EAAET,KAAK,IAAI;EACRC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AACzB,CAAC,CAAC;AACF;AACA,eAAed,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}