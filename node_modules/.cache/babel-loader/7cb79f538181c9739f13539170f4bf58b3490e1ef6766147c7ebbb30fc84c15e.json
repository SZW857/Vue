{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// The Glyph object\n\nimport check from './check';\nimport draw from './draw';\nimport Path from './path';\nimport glyf from './tables/glyf';\nfunction getPathDefinition(glyph, path) {\n  let _path = path || {\n    commands: []\n  };\n  return {\n    configurable: true,\n    get: function () {\n      if (typeof _path === 'function') {\n        _path = _path();\n      }\n      return _path;\n    },\n    set: function (p) {\n      _path = p;\n    }\n  };\n}\n/**\n * @typedef GlyphOptions\n * @type Object\n * @property {string} [name] - The glyph name\n * @property {number} [unicode]\n * @property {Array} [unicodes]\n * @property {number} [xMin]\n * @property {number} [yMin]\n * @property {number} [xMax]\n * @property {number} [yMax]\n * @property {number} [advanceWidth]\n */\n\n// A Glyph is an individual mark that often corresponds to a character.\n// Some glyphs, such as ligatures, are a combination of many characters.\n// Glyphs are the basic building blocks of a font.\n//\n// The `Glyph` class contains utility methods for drawing the path and its points.\n/**\n * @exports opentype.Glyph\n * @class\n * @param {GlyphOptions}\n * @constructor\n */\nfunction Glyph(options) {\n  // By putting all the code on a prototype function (which is only declared once)\n  // we reduce the memory requirements for larger fonts by some 2%\n  this.bindConstructorValues(options);\n}\n\n/**\n * @param  {GlyphOptions}\n */\nGlyph.prototype.bindConstructorValues = function (options) {\n  this.index = options.index || 0;\n\n  // These three values cannot be deferred for memory optimization:\n  this.name = options.name || null;\n  this.unicode = options.unicode || undefined;\n  this.unicodes = options.unicodes || options.unicode !== undefined ? [options.unicode] : [];\n\n  // But by binding these values only when necessary, we reduce can\n  // the memory requirements by almost 3% for larger fonts.\n  if (options.xMin) {\n    this.xMin = options.xMin;\n  }\n  if (options.yMin) {\n    this.yMin = options.yMin;\n  }\n  if (options.xMax) {\n    this.xMax = options.xMax;\n  }\n  if (options.yMax) {\n    this.yMax = options.yMax;\n  }\n  if (options.advanceWidth) {\n    this.advanceWidth = options.advanceWidth;\n  }\n\n  // The path for a glyph is the most memory intensive, and is bound as a value\n  // with a getter/setter to ensure we actually do path parsing only once the\n  // path is actually needed by anything.\n  Object.defineProperty(this, 'path', getPathDefinition(this, options.path));\n};\n\n/**\n * @param {number}\n */\nGlyph.prototype.addUnicode = function (unicode) {\n  if (this.unicodes.length === 0) {\n    this.unicode = unicode;\n  }\n  this.unicodes.push(unicode);\n};\n\n/**\n * Calculate the minimum bounding box for this glyph.\n * @return {opentype.BoundingBox}\n */\nGlyph.prototype.getBoundingBox = function () {\n  return this.path.getBoundingBox();\n};\n\n/**\n * Convert the glyph to a Path we can draw on a drawing context.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {Object=} options - xScale, yScale to stretch the glyph.\n * @param  {opentype.Font} if hinting is to be used, the font\n * @return {opentype.Path}\n */\nGlyph.prototype.getPath = function (x, y, fontSize, options, font) {\n  x = x !== undefined ? x : 0;\n  y = y !== undefined ? y : 0;\n  fontSize = fontSize !== undefined ? fontSize : 72;\n  let commands;\n  let hPoints;\n  if (!options) options = {};\n  let xScale = options.xScale;\n  let yScale = options.yScale;\n  if (options.hinting && font && font.hinting) {\n    // in case of hinting, the hinting engine takes care\n    // of scaling the points (not the path) before hinting.\n    hPoints = this.path && font.hinting.exec(this, fontSize);\n    // in case the hinting engine failed hPoints is undefined\n    // and thus reverts to plain rending\n  }\n\n  if (hPoints) {\n    commands = glyf.getPath(hPoints).commands;\n    x = Math.round(x);\n    y = Math.round(y);\n    // TODO in case of hinting xyScaling is not yet supported\n    xScale = yScale = 1;\n  } else {\n    commands = this.path.commands;\n    const scale = 1 / this.path.unitsPerEm * fontSize;\n    if (xScale === undefined) xScale = scale;\n    if (yScale === undefined) yScale = scale;\n  }\n  const p = new Path();\n  for (let i = 0; i < commands.length; i += 1) {\n    const cmd = commands[i];\n    if (cmd.type === 'M') {\n      p.moveTo(x + cmd.x * xScale, y + -cmd.y * yScale);\n    } else if (cmd.type === 'L') {\n      p.lineTo(x + cmd.x * xScale, y + -cmd.y * yScale);\n    } else if (cmd.type === 'Q') {\n      p.quadraticCurveTo(x + cmd.x1 * xScale, y + -cmd.y1 * yScale, x + cmd.x * xScale, y + -cmd.y * yScale);\n    } else if (cmd.type === 'C') {\n      p.curveTo(x + cmd.x1 * xScale, y + -cmd.y1 * yScale, x + cmd.x2 * xScale, y + -cmd.y2 * yScale, x + cmd.x * xScale, y + -cmd.y * yScale);\n    } else if (cmd.type === 'Z') {\n      p.closePath();\n    }\n  }\n  return p;\n};\n\n/**\n * Split the glyph into contours.\n * This function is here for backwards compatibility, and to\n * provide raw access to the TrueType glyph outlines.\n * @return {Array}\n */\nGlyph.prototype.getContours = function () {\n  if (this.points === undefined) {\n    return [];\n  }\n  const contours = [];\n  let currentContour = [];\n  for (let i = 0; i < this.points.length; i += 1) {\n    const pt = this.points[i];\n    currentContour.push(pt);\n    if (pt.lastPointOfContour) {\n      contours.push(currentContour);\n      currentContour = [];\n    }\n  }\n  check.argument(currentContour.length === 0, 'There are still points left in the current contour.');\n  return contours;\n};\n\n/**\n * Calculate the xMin/yMin/xMax/yMax/lsb/rsb for a Glyph.\n * @return {Object}\n */\nGlyph.prototype.getMetrics = function () {\n  const commands = this.path.commands;\n  const xCoords = [];\n  const yCoords = [];\n  for (let i = 0; i < commands.length; i += 1) {\n    const cmd = commands[i];\n    if (cmd.type !== 'Z') {\n      xCoords.push(cmd.x);\n      yCoords.push(cmd.y);\n    }\n    if (cmd.type === 'Q' || cmd.type === 'C') {\n      xCoords.push(cmd.x1);\n      yCoords.push(cmd.y1);\n    }\n    if (cmd.type === 'C') {\n      xCoords.push(cmd.x2);\n      yCoords.push(cmd.y2);\n    }\n  }\n  const metrics = {\n    xMin: Math.min.apply(null, xCoords),\n    yMin: Math.min.apply(null, yCoords),\n    xMax: Math.max.apply(null, xCoords),\n    yMax: Math.max.apply(null, yCoords),\n    leftSideBearing: this.leftSideBearing\n  };\n  if (!isFinite(metrics.xMin)) {\n    metrics.xMin = 0;\n  }\n  if (!isFinite(metrics.xMax)) {\n    metrics.xMax = this.advanceWidth;\n  }\n  if (!isFinite(metrics.yMin)) {\n    metrics.yMin = 0;\n  }\n  if (!isFinite(metrics.yMax)) {\n    metrics.yMax = 0;\n  }\n  metrics.rightSideBearing = this.advanceWidth - metrics.leftSideBearing - (metrics.xMax - metrics.xMin);\n  return metrics;\n};\n\n/**\n * Draw the glyph on the given context.\n * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {Object=} options - xScale, yScale to stretch the glyph.\n */\nGlyph.prototype.draw = function (ctx, x, y, fontSize, options) {\n  this.getPath(x, y, fontSize, options).draw(ctx);\n};\n\n/**\n * Draw the points of the glyph.\n * On-curve points will be drawn in blue, off-curve points will be drawn in red.\n * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n */\nGlyph.prototype.drawPoints = function (ctx, x, y, fontSize) {\n  function drawCircles(l, x, y, scale) {\n    const PI_SQ = Math.PI * 2;\n    ctx.beginPath();\n    for (let j = 0; j < l.length; j += 1) {\n      ctx.moveTo(x + l[j].x * scale, y + l[j].y * scale);\n      ctx.arc(x + l[j].x * scale, y + l[j].y * scale, 2, 0, PI_SQ, false);\n    }\n    ctx.closePath();\n    ctx.fill();\n  }\n  x = x !== undefined ? x : 0;\n  y = y !== undefined ? y : 0;\n  fontSize = fontSize !== undefined ? fontSize : 24;\n  const scale = 1 / this.path.unitsPerEm * fontSize;\n  const blueCircles = [];\n  const redCircles = [];\n  const path = this.path;\n  for (let i = 0; i < path.commands.length; i += 1) {\n    const cmd = path.commands[i];\n    if (cmd.x !== undefined) {\n      blueCircles.push({\n        x: cmd.x,\n        y: -cmd.y\n      });\n    }\n    if (cmd.x1 !== undefined) {\n      redCircles.push({\n        x: cmd.x1,\n        y: -cmd.y1\n      });\n    }\n    if (cmd.x2 !== undefined) {\n      redCircles.push({\n        x: cmd.x2,\n        y: -cmd.y2\n      });\n    }\n  }\n  ctx.fillStyle = 'blue';\n  drawCircles(blueCircles, x, y, scale);\n  ctx.fillStyle = 'red';\n  drawCircles(redCircles, x, y, scale);\n};\n\n/**\n * Draw lines indicating important font measurements.\n * Black lines indicate the origin of the coordinate system (point 0,0).\n * Blue lines indicate the glyph bounding box.\n * Green line indicates the advance width of the glyph.\n * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n */\nGlyph.prototype.drawMetrics = function (ctx, x, y, fontSize) {\n  let scale;\n  x = x !== undefined ? x : 0;\n  y = y !== undefined ? y : 0;\n  fontSize = fontSize !== undefined ? fontSize : 24;\n  scale = 1 / this.path.unitsPerEm * fontSize;\n  ctx.lineWidth = 1;\n\n  // Draw the origin\n  ctx.strokeStyle = 'black';\n  draw.line(ctx, x, -10000, x, 10000);\n  draw.line(ctx, -10000, y, 10000, y);\n\n  // This code is here due to memory optimization: by not using\n  // defaults in the constructor, we save a notable amount of memory.\n  const xMin = this.xMin || 0;\n  let yMin = this.yMin || 0;\n  const xMax = this.xMax || 0;\n  let yMax = this.yMax || 0;\n  const advanceWidth = this.advanceWidth || 0;\n\n  // Draw the glyph box\n  ctx.strokeStyle = 'blue';\n  draw.line(ctx, x + xMin * scale, -10000, x + xMin * scale, 10000);\n  draw.line(ctx, x + xMax * scale, -10000, x + xMax * scale, 10000);\n  draw.line(ctx, -10000, y + -yMin * scale, 10000, y + -yMin * scale);\n  draw.line(ctx, -10000, y + -yMax * scale, 10000, y + -yMax * scale);\n\n  // Draw the advance width\n  ctx.strokeStyle = 'green';\n  draw.line(ctx, x + advanceWidth * scale, -10000, x + advanceWidth * scale, 10000);\n};\nexport default Glyph;","map":{"version":3,"names":["check","draw","Path","glyf","getPathDefinition","glyph","path","_path","commands","configurable","get","set","p","Glyph","options","bindConstructorValues","prototype","index","name","unicode","undefined","unicodes","xMin","yMin","xMax","yMax","advanceWidth","Object","defineProperty","addUnicode","length","push","getBoundingBox","getPath","x","y","fontSize","font","hPoints","xScale","yScale","hinting","exec","Math","round","scale","unitsPerEm","i","cmd","type","moveTo","lineTo","quadraticCurveTo","x1","y1","curveTo","x2","y2","closePath","getContours","points","contours","currentContour","pt","lastPointOfContour","argument","getMetrics","xCoords","yCoords","metrics","min","apply","max","leftSideBearing","isFinite","rightSideBearing","ctx","drawPoints","drawCircles","l","PI_SQ","PI","beginPath","j","arc","fill","blueCircles","redCircles","fillStyle","drawMetrics","lineWidth","strokeStyle","line"],"sources":["C:/Users/14486/Desktop/社区公益系统前端/vue_community/node_modules/_opentype.js@0.7.3@opentype.js/src/glyph.js"],"sourcesContent":["// The Glyph object\n\nimport check from './check';\nimport draw from './draw';\nimport Path from './path';\nimport glyf from './tables/glyf';\n\nfunction getPathDefinition(glyph, path) {\n    let _path = path || {commands: []};\n    return {\n        configurable: true,\n\n        get: function() {\n            if (typeof _path === 'function') {\n                _path = _path();\n            }\n\n            return _path;\n        },\n\n        set: function(p) {\n            _path = p;\n        }\n    };\n}\n/**\n * @typedef GlyphOptions\n * @type Object\n * @property {string} [name] - The glyph name\n * @property {number} [unicode]\n * @property {Array} [unicodes]\n * @property {number} [xMin]\n * @property {number} [yMin]\n * @property {number} [xMax]\n * @property {number} [yMax]\n * @property {number} [advanceWidth]\n */\n\n// A Glyph is an individual mark that often corresponds to a character.\n// Some glyphs, such as ligatures, are a combination of many characters.\n// Glyphs are the basic building blocks of a font.\n//\n// The `Glyph` class contains utility methods for drawing the path and its points.\n/**\n * @exports opentype.Glyph\n * @class\n * @param {GlyphOptions}\n * @constructor\n */\nfunction Glyph(options) {\n    // By putting all the code on a prototype function (which is only declared once)\n    // we reduce the memory requirements for larger fonts by some 2%\n    this.bindConstructorValues(options);\n}\n\n/**\n * @param  {GlyphOptions}\n */\nGlyph.prototype.bindConstructorValues = function(options) {\n    this.index = options.index || 0;\n\n    // These three values cannot be deferred for memory optimization:\n    this.name = options.name || null;\n    this.unicode = options.unicode || undefined;\n    this.unicodes = options.unicodes || options.unicode !== undefined ? [options.unicode] : [];\n\n    // But by binding these values only when necessary, we reduce can\n    // the memory requirements by almost 3% for larger fonts.\n    if (options.xMin) {\n        this.xMin = options.xMin;\n    }\n\n    if (options.yMin) {\n        this.yMin = options.yMin;\n    }\n\n    if (options.xMax) {\n        this.xMax = options.xMax;\n    }\n\n    if (options.yMax) {\n        this.yMax = options.yMax;\n    }\n\n    if (options.advanceWidth) {\n        this.advanceWidth = options.advanceWidth;\n    }\n\n    // The path for a glyph is the most memory intensive, and is bound as a value\n    // with a getter/setter to ensure we actually do path parsing only once the\n    // path is actually needed by anything.\n    Object.defineProperty(this, 'path', getPathDefinition(this, options.path));\n};\n\n/**\n * @param {number}\n */\nGlyph.prototype.addUnicode = function(unicode) {\n    if (this.unicodes.length === 0) {\n        this.unicode = unicode;\n    }\n\n    this.unicodes.push(unicode);\n};\n\n/**\n * Calculate the minimum bounding box for this glyph.\n * @return {opentype.BoundingBox}\n */\nGlyph.prototype.getBoundingBox = function() {\n    return this.path.getBoundingBox();\n};\n\n/**\n * Convert the glyph to a Path we can draw on a drawing context.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {Object=} options - xScale, yScale to stretch the glyph.\n * @param  {opentype.Font} if hinting is to be used, the font\n * @return {opentype.Path}\n */\nGlyph.prototype.getPath = function(x, y, fontSize, options, font) {\n    x = x !== undefined ? x : 0;\n    y = y !== undefined ? y : 0;\n    fontSize = fontSize !== undefined ? fontSize : 72;\n    let commands;\n    let hPoints;\n    if (!options) options = { };\n    let xScale = options.xScale;\n    let yScale = options.yScale;\n\n    if (options.hinting && font && font.hinting) {\n        // in case of hinting, the hinting engine takes care\n        // of scaling the points (not the path) before hinting.\n        hPoints = this.path && font.hinting.exec(this, fontSize);\n        // in case the hinting engine failed hPoints is undefined\n        // and thus reverts to plain rending\n    }\n\n    if (hPoints) {\n        commands = glyf.getPath(hPoints).commands;\n        x = Math.round(x);\n        y = Math.round(y);\n        // TODO in case of hinting xyScaling is not yet supported\n        xScale = yScale = 1;\n    } else {\n        commands = this.path.commands;\n        const scale = 1 / this.path.unitsPerEm * fontSize;\n        if (xScale === undefined) xScale = scale;\n        if (yScale === undefined) yScale = scale;\n    }\n\n    const p = new Path();\n    for (let i = 0; i < commands.length; i += 1) {\n        const cmd = commands[i];\n        if (cmd.type === 'M') {\n            p.moveTo(x + (cmd.x * xScale), y + (-cmd.y * yScale));\n        } else if (cmd.type === 'L') {\n            p.lineTo(x + (cmd.x * xScale), y + (-cmd.y * yScale));\n        } else if (cmd.type === 'Q') {\n            p.quadraticCurveTo(x + (cmd.x1 * xScale), y + (-cmd.y1 * yScale),\n                               x + (cmd.x * xScale), y + (-cmd.y * yScale));\n        } else if (cmd.type === 'C') {\n            p.curveTo(x + (cmd.x1 * xScale), y + (-cmd.y1 * yScale),\n                      x + (cmd.x2 * xScale), y + (-cmd.y2 * yScale),\n                      x + (cmd.x * xScale), y + (-cmd.y * yScale));\n        } else if (cmd.type === 'Z') {\n            p.closePath();\n        }\n    }\n\n    return p;\n};\n\n/**\n * Split the glyph into contours.\n * This function is here for backwards compatibility, and to\n * provide raw access to the TrueType glyph outlines.\n * @return {Array}\n */\nGlyph.prototype.getContours = function() {\n    if (this.points === undefined) {\n        return [];\n    }\n\n    const contours = [];\n    let currentContour = [];\n    for (let i = 0; i < this.points.length; i += 1) {\n        const pt = this.points[i];\n        currentContour.push(pt);\n        if (pt.lastPointOfContour) {\n            contours.push(currentContour);\n            currentContour = [];\n        }\n    }\n\n    check.argument(currentContour.length === 0, 'There are still points left in the current contour.');\n    return contours;\n};\n\n/**\n * Calculate the xMin/yMin/xMax/yMax/lsb/rsb for a Glyph.\n * @return {Object}\n */\nGlyph.prototype.getMetrics = function() {\n    const commands = this.path.commands;\n    const xCoords = [];\n    const yCoords = [];\n    for (let i = 0; i < commands.length; i += 1) {\n        const cmd = commands[i];\n        if (cmd.type !== 'Z') {\n            xCoords.push(cmd.x);\n            yCoords.push(cmd.y);\n        }\n\n        if (cmd.type === 'Q' || cmd.type === 'C') {\n            xCoords.push(cmd.x1);\n            yCoords.push(cmd.y1);\n        }\n\n        if (cmd.type === 'C') {\n            xCoords.push(cmd.x2);\n            yCoords.push(cmd.y2);\n        }\n    }\n\n    const metrics = {\n        xMin: Math.min.apply(null, xCoords),\n        yMin: Math.min.apply(null, yCoords),\n        xMax: Math.max.apply(null, xCoords),\n        yMax: Math.max.apply(null, yCoords),\n        leftSideBearing: this.leftSideBearing\n    };\n\n    if (!isFinite(metrics.xMin)) {\n        metrics.xMin = 0;\n    }\n\n    if (!isFinite(metrics.xMax)) {\n        metrics.xMax = this.advanceWidth;\n    }\n\n    if (!isFinite(metrics.yMin)) {\n        metrics.yMin = 0;\n    }\n\n    if (!isFinite(metrics.yMax)) {\n        metrics.yMax = 0;\n    }\n\n    metrics.rightSideBearing = this.advanceWidth - metrics.leftSideBearing - (metrics.xMax - metrics.xMin);\n    return metrics;\n};\n\n/**\n * Draw the glyph on the given context.\n * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n * @param  {Object=} options - xScale, yScale to stretch the glyph.\n */\nGlyph.prototype.draw = function(ctx, x, y, fontSize, options) {\n    this.getPath(x, y, fontSize, options).draw(ctx);\n};\n\n/**\n * Draw the points of the glyph.\n * On-curve points will be drawn in blue, off-curve points will be drawn in red.\n * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n */\nGlyph.prototype.drawPoints = function(ctx, x, y, fontSize) {\n    function drawCircles(l, x, y, scale) {\n        const PI_SQ = Math.PI * 2;\n        ctx.beginPath();\n        for (let j = 0; j < l.length; j += 1) {\n            ctx.moveTo(x + (l[j].x * scale), y + (l[j].y * scale));\n            ctx.arc(x + (l[j].x * scale), y + (l[j].y * scale), 2, 0, PI_SQ, false);\n        }\n\n        ctx.closePath();\n        ctx.fill();\n    }\n\n    x = x !== undefined ? x : 0;\n    y = y !== undefined ? y : 0;\n    fontSize = fontSize !== undefined ? fontSize : 24;\n    const scale = 1 / this.path.unitsPerEm * fontSize;\n\n    const blueCircles = [];\n    const redCircles = [];\n    const path = this.path;\n    for (let i = 0; i < path.commands.length; i += 1) {\n        const cmd = path.commands[i];\n        if (cmd.x !== undefined) {\n            blueCircles.push({x: cmd.x, y: -cmd.y});\n        }\n\n        if (cmd.x1 !== undefined) {\n            redCircles.push({x: cmd.x1, y: -cmd.y1});\n        }\n\n        if (cmd.x2 !== undefined) {\n            redCircles.push({x: cmd.x2, y: -cmd.y2});\n        }\n    }\n\n    ctx.fillStyle = 'blue';\n    drawCircles(blueCircles, x, y, scale);\n    ctx.fillStyle = 'red';\n    drawCircles(redCircles, x, y, scale);\n};\n\n/**\n * Draw lines indicating important font measurements.\n * Black lines indicate the origin of the coordinate system (point 0,0).\n * Blue lines indicate the glyph bounding box.\n * Green line indicates the advance width of the glyph.\n * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.\n * @param  {number} [x=0] - Horizontal position of the beginning of the text.\n * @param  {number} [y=0] - Vertical position of the *baseline* of the text.\n * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.\n */\nGlyph.prototype.drawMetrics = function(ctx, x, y, fontSize) {\n    let scale;\n    x = x !== undefined ? x : 0;\n    y = y !== undefined ? y : 0;\n    fontSize = fontSize !== undefined ? fontSize : 24;\n    scale = 1 / this.path.unitsPerEm * fontSize;\n    ctx.lineWidth = 1;\n\n    // Draw the origin\n    ctx.strokeStyle = 'black';\n    draw.line(ctx, x, -10000, x, 10000);\n    draw.line(ctx, -10000, y, 10000, y);\n\n    // This code is here due to memory optimization: by not using\n    // defaults in the constructor, we save a notable amount of memory.\n    const xMin = this.xMin || 0;\n    let yMin = this.yMin || 0;\n    const xMax = this.xMax || 0;\n    let yMax = this.yMax || 0;\n    const advanceWidth = this.advanceWidth || 0;\n\n    // Draw the glyph box\n    ctx.strokeStyle = 'blue';\n    draw.line(ctx, x + (xMin * scale), -10000, x + (xMin * scale), 10000);\n    draw.line(ctx, x + (xMax * scale), -10000, x + (xMax * scale), 10000);\n    draw.line(ctx, -10000, y + (-yMin * scale), 10000, y + (-yMin * scale));\n    draw.line(ctx, -10000, y + (-yMax * scale), 10000, y + (-yMax * scale));\n\n    // Draw the advance width\n    ctx.strokeStyle = 'green';\n    draw.line(ctx, x + (advanceWidth * scale), -10000, x + (advanceWidth * scale), 10000);\n};\n\nexport default Glyph;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}