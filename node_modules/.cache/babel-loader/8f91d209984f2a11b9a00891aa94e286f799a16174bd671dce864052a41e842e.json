{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar iconsVue = require('@element-plus/icons-vue');\nvar index = require('../../overlay/index.js');\nrequire('../../focus-trap/index.js');\nrequire('../../dialog/index.js');\nrequire('../../../utils/index.js');\nvar index$1 = require('../../icon/index.js');\nrequire('../../../hooks/index.js');\nvar drawer = require('./drawer.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar focusTrap = require('../../focus-trap/src/focus-trap.js');\nvar index$2 = require('../../../hooks/use-deprecated/index.js');\nvar index$3 = require('../../../hooks/use-namespace/index.js');\nvar index$4 = require('../../../hooks/use-locale/index.js');\nvar style = require('../../../utils/dom/style.js');\nvar useDialog = require('../../dialog/src/use-dialog.js');\nconst _sfc_main = vue.defineComponent({\n  name: \"ElDrawer\",\n  components: {\n    ElOverlay: index.ElOverlay,\n    ElFocusTrap: focusTrap[\"default\"],\n    ElIcon: index$1.ElIcon,\n    Close: iconsVue.Close\n  },\n  props: drawer.drawerProps,\n  emits: drawer.drawerEmits,\n  setup(props, {\n    slots\n  }) {\n    index$2.useDeprecated({\n      scope: \"el-drawer\",\n      from: \"the title slot\",\n      replacement: \"the header slot\",\n      version: \"3.0.0\",\n      ref: \"https://element-plus.org/en-US/component/drawer.html#slots\"\n    }, vue.computed(() => !!slots.title));\n    const drawerRef = vue.ref();\n    const focusStartRef = vue.ref();\n    const ns = index$3.useNamespace(\"drawer\");\n    const {\n      t\n    } = index$4.useLocale();\n    const isHorizontal = vue.computed(() => props.direction === \"rtl\" || props.direction === \"ltr\");\n    const drawerSize = vue.computed(() => style.addUnit(props.size));\n    return {\n      ...useDialog.useDialog(props, drawerRef),\n      drawerRef,\n      focusStartRef,\n      isHorizontal,\n      drawerSize,\n      ns,\n      t\n    };\n  }\n});\nconst _hoisted_1 = [\"aria-label\", \"aria-labelledby\", \"aria-describedby\"];\nconst _hoisted_2 = [\"id\"];\nconst _hoisted_3 = [\"aria-label\"];\nconst _hoisted_4 = [\"id\"];\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_close = vue.resolveComponent(\"close\");\n  const _component_el_icon = vue.resolveComponent(\"el-icon\");\n  const _component_el_focus_trap = vue.resolveComponent(\"el-focus-trap\");\n  const _component_el_overlay = vue.resolveComponent(\"el-overlay\");\n  return vue.openBlock(), vue.createBlock(vue.Teleport, {\n    to: \"body\",\n    disabled: !_ctx.appendToBody\n  }, [vue.createVNode(vue.Transition, {\n    name: _ctx.ns.b(\"fade\"),\n    onAfterEnter: _ctx.afterEnter,\n    onAfterLeave: _ctx.afterLeave,\n    onBeforeLeave: _ctx.beforeLeave,\n    persisted: \"\"\n  }, {\n    default: vue.withCtx(() => [vue.withDirectives(vue.createVNode(_component_el_overlay, {\n      mask: _ctx.modal,\n      \"overlay-class\": _ctx.modalClass,\n      \"z-index\": _ctx.zIndex,\n      onClick: _ctx.onModalClick\n    }, {\n      default: vue.withCtx(() => [vue.createVNode(_component_el_focus_trap, {\n        loop: \"\",\n        trapped: _ctx.visible,\n        \"focus-trap-el\": _ctx.drawerRef,\n        \"focus-start-el\": _ctx.focusStartRef,\n        onReleaseRequested: _ctx.onCloseRequested\n      }, {\n        default: vue.withCtx(() => [vue.createElementVNode(\"div\", {\n          ref: \"drawerRef\",\n          \"aria-modal\": \"true\",\n          \"aria-label\": _ctx.title || void 0,\n          \"aria-labelledby\": !_ctx.title ? _ctx.titleId : void 0,\n          \"aria-describedby\": _ctx.bodyId,\n          class: vue.normalizeClass([_ctx.ns.b(), _ctx.direction, _ctx.visible && \"open\", _ctx.customClass]),\n          style: vue.normalizeStyle(_ctx.isHorizontal ? \"width: \" + _ctx.drawerSize : \"height: \" + _ctx.drawerSize),\n          role: \"dialog\",\n          onClick: _cache[1] || (_cache[1] = vue.withModifiers(() => {}, [\"stop\"]))\n        }, [vue.createElementVNode(\"span\", {\n          ref: \"focusStartRef\",\n          class: vue.normalizeClass(_ctx.ns.e(\"sr-focus\")),\n          tabindex: \"-1\"\n        }, null, 2), _ctx.withHeader ? (vue.openBlock(), vue.createElementBlock(\"header\", {\n          key: 0,\n          class: vue.normalizeClass(_ctx.ns.e(\"header\"))\n        }, [!_ctx.$slots.title ? vue.renderSlot(_ctx.$slots, \"header\", {\n          key: 0,\n          close: _ctx.handleClose,\n          titleId: _ctx.titleId,\n          titleClass: _ctx.ns.e(\"title\")\n        }, () => [!_ctx.$slots.title ? (vue.openBlock(), vue.createElementBlock(\"span\", {\n          key: 0,\n          id: _ctx.titleId,\n          role: \"heading\",\n          class: vue.normalizeClass(_ctx.ns.e(\"title\"))\n        }, vue.toDisplayString(_ctx.title), 11, _hoisted_2)) : vue.createCommentVNode(\"v-if\", true)]) : vue.renderSlot(_ctx.$slots, \"title\", {\n          key: 1\n        }, () => [vue.createCommentVNode(\" DEPRECATED SLOT \")]), _ctx.showClose ? (vue.openBlock(), vue.createElementBlock(\"button\", {\n          key: 2,\n          \"aria-label\": _ctx.t(\"el.drawer.close\"),\n          class: vue.normalizeClass(_ctx.ns.e(\"close-btn\")),\n          type: \"button\",\n          onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleClose && _ctx.handleClose(...args))\n        }, [vue.createVNode(_component_el_icon, {\n          class: vue.normalizeClass(_ctx.ns.e(\"close\"))\n        }, {\n          default: vue.withCtx(() => [vue.createVNode(_component_close)]),\n          _: 1\n        }, 8, [\"class\"])], 10, _hoisted_3)) : vue.createCommentVNode(\"v-if\", true)], 2)) : vue.createCommentVNode(\"v-if\", true), _ctx.rendered ? (vue.openBlock(), vue.createElementBlock(\"div\", {\n          key: 1,\n          id: _ctx.bodyId,\n          class: vue.normalizeClass(_ctx.ns.e(\"body\"))\n        }, [vue.renderSlot(_ctx.$slots, \"default\")], 10, _hoisted_4)) : vue.createCommentVNode(\"v-if\", true), _ctx.$slots.footer ? (vue.openBlock(), vue.createElementBlock(\"div\", {\n          key: 2,\n          class: vue.normalizeClass(_ctx.ns.e(\"footer\"))\n        }, [vue.renderSlot(_ctx.$slots, \"footer\")], 2)) : vue.createCommentVNode(\"v-if\", true)], 14, _hoisted_1)]),\n        _: 3\n      }, 8, [\"trapped\", \"focus-trap-el\", \"focus-start-el\", \"onReleaseRequested\"])]),\n      _: 3\n    }, 8, [\"mask\", \"overlay-class\", \"z-index\", \"onClick\"]), [[vue.vShow, _ctx.visible]])]),\n    _: 3\n  }, 8, [\"name\", \"onAfterEnter\", \"onAfterLeave\", \"onBeforeLeave\"])], 8, [\"disabled\"]);\n}\nvar Drawer = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/drawer/src/drawer.vue\"]]);\nexports[\"default\"] = Drawer;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;AA6FA,MAAKA,YAAaC,mBAAa;EAC7BC,IAAM;EACNC,UAAY;IAAAC,WACVA;IAAAC,aACAA;IAAAC,QACAA;IAAAC,OACAA;EAAA,CACF;EACAC,KAAO;EACPC,KAAO;EAEPC,MAAMF,KAAO;IAAEG;EAAS;IAEpBC;MACEC,KAAO;MACPC,IAAM;MACNC,WAAa;MACbC,OAAS;MACTC,GAAK;IAAA,GAEPC,YAAS,OAAM,CAAC,CAACP,MAAMQ,KAAK,CAC9B;IAEA,MAAMC,YAAYH,OAAiB;IACnC,MAAMI,gBAAgBJ,OAAiB;IACjC,WAAKK,qBAAa,QAAQ;IAC1B;MAAEC;IAAA,IAAMC,iBAAU;IAElB,qBAAeN,aACnB,MAAMV,MAAMiB,cAAc,KAAS,UAAMA,cAAc,KACzD;IACA,MAAMC,aAAaR,YAAS,OAAMS,aAAQ,OAAMC,IAAI,CAAC;IAE9C;MACL,GAAGC,mBAAU,QAAOT,SAAS;MAC7BA;MACAC;MACAS;MACAJ;MACAK;MACAR;IAAA,CACF;EAAA;AAEJ,CAAC;;;;;;;;;;0BAvICS,eA6EW;IA7EDC,EAAG;IAAQC,UAAQ,CAAGC;EAAA,IAC9BC,eA2Ea;IA1EVlC,MAAMiC,QAAGE,CAAC;IACVC,YAAa;IACbC,YAAa;IACbC,aAAc;IAJjBC;EAAA;yBAME,MAoEa,oBApEbL,eAoEa;MAlEVM,IAAM;MACN,eAAe;MACf,SAAS;MACTC,OAAO;IAAA;2BAER,MA4DgB,CA5DhBP,eA4DgB;QA3DdQ;QACCC,OAAS;QACT,eAAe;QACf,gBAAgB;QAChBC,kBAAmB;MAAA;6BAEpB,MAoDM,CApDNC,sBAoDM;UAnDJ9B,GAAI;UACJ,YAAW;UACV,cAAYkB,IAAS;UACrB,mBAAe,CAAGA,aAAQA,IAAU;UACpC,kBAAkB;UAClBa,OAAKC,oBAAGd,IAAG,SAAKA,IAAW,4BAAO,QAAYA,IAAW;UACzDe,KAAK,qBAAiBf,IAAY,4BAAeA,kBAAU,UAAgB;UAG5EgB,IAAK;UACJR,SAAKS,MAAN,8CAAW;QAAA,IAEXL,sBAAoE;UAA9D9B,GAAI;UAAiB+B,OAAKC,kBAAE,SAAGI,CAAC;UAAcC,QAAS;QAAA,aAC/CnB,oCAAdoB,sBA6BS;UAAAC;UA7BkBR,KAAK,qBAAEb,QAAGkB,CAAC;QAAA,IAE3B,aAAOlC,QADhBsC,cAeO;UAAAD;UAZJE,KAAO;UACPC,OAAU;UACVC,YAAazB,QAAGkB,CAAC;QAAA,GALpB,MAeO,CAPI,aAAOlC,0BADhBoC,sBAOO;UAAAC;UALJK,EAAI;UACLV,IAAK;UACJH,OAAKC,kBAAE,SAAGI,CAAC;QAAA,uBAETlB,IAAK,iEAGZ,mBAEOA;UAAAqB;QAAA,GAFP,MAEO,CADLM,+CAGM3B,mCADRoB,sBAQS;UAAAC;UANN,cAAYrB,IAAC;UACba,OAAKC,kBAAE,SAAGI,CAAC;UACZU,IAAK;UACJpB,SAAKS,MAAE;QAAA,IAERhB,eAAmD;UAAzCY,OAAKC,kBAAE,SAAGI,CAAC;QAAA;+BAAW,MAAS,CAATjB,eAAS;;iIAG7BD,kCACdoB,sBAEM;UAAAC;UAFAK,EAAI;UAASb,OAAKC,kBAAE,SAAGI,CAAC;QAAA,IAC5BI,cAAQ,oFAGDtB,YAAO6B,2BAAlBT,sBAEM;UAAAC;UAFqBR,KAAK,qBAAEb,QAAGkB,CAAC;QAAA,IACpCI,cAAsB;;;;yEA/DpBtB,IAAO","names":["_sfc_main","defineComponent","name","components","ElOverlay","ElFocusTrap","ElIcon","Close","props","emits","setup","slots","useDeprecated","scope","from","replacement","version","ref","computed","title","drawerRef","focusStartRef","useNamespace","t","useLocale","direction","drawerSize","addUnit","size","useDialog","isHorizontal","ns","_createBlock","to","disabled","_ctx","_createVNode","b","onAfterEnter","onAfterLeave","onBeforeLeave","persisted","mask","onClick","loop","trapped","onReleaseRequested","_createElementVNode","class","_normalizeClass","style","role","_cache","e","tabindex","_createElementBlock","key","_renderSlot","close","titleId","titleClass","id","_createCommentVNode","type","footer"],"sources":["../../../../../../packages/components/drawer/src/drawer.vue"],"sourcesContent":["<template>\n  <teleport to=\"body\" :disabled=\"!appendToBody\">\n    <transition\n      :name=\"ns.b('fade')\"\n      @after-enter=\"afterEnter\"\n      @after-leave=\"afterLeave\"\n      @before-leave=\"beforeLeave\"\n    >\n      <el-overlay\n        v-show=\"visible\"\n        :mask=\"modal\"\n        :overlay-class=\"modalClass\"\n        :z-index=\"zIndex\"\n        @click=\"onModalClick\"\n      >\n        <el-focus-trap\n          loop\n          :trapped=\"visible\"\n          :focus-trap-el=\"drawerRef\"\n          :focus-start-el=\"focusStartRef\"\n          @release-requested=\"onCloseRequested\"\n        >\n          <div\n            ref=\"drawerRef\"\n            aria-modal=\"true\"\n            :aria-label=\"title || undefined\"\n            :aria-labelledby=\"!title ? titleId : undefined\"\n            :aria-describedby=\"bodyId\"\n            :class=\"[ns.b(), direction, visible && 'open', customClass]\"\n            :style=\"\n              isHorizontal ? 'width: ' + drawerSize : 'height: ' + drawerSize\n            \"\n            role=\"dialog\"\n            @click.stop\n          >\n            <span ref=\"focusStartRef\" :class=\"ns.e('sr-focus')\" tabindex=\"-1\" />\n            <header v-if=\"withHeader\" :class=\"ns.e('header')\">\n              <slot\n                v-if=\"!$slots.title\"\n                name=\"header\"\n                :close=\"handleClose\"\n                :title-id=\"titleId\"\n                :title-class=\"ns.e('title')\"\n              >\n                <span\n                  v-if=\"!$slots.title\"\n                  :id=\"titleId\"\n                  role=\"heading\"\n                  :class=\"ns.e('title')\"\n                >\n                  {{ title }}\n                </span>\n              </slot>\n              <slot v-else name=\"title\">\n                <!-- DEPRECATED SLOT -->\n              </slot>\n              <button\n                v-if=\"showClose\"\n                :aria-label=\"t('el.drawer.close')\"\n                :class=\"ns.e('close-btn')\"\n                type=\"button\"\n                @click=\"handleClose\"\n              >\n                <el-icon :class=\"ns.e('close')\"><close /></el-icon>\n              </button>\n            </header>\n            <template v-if=\"rendered\">\n              <div :id=\"bodyId\" :class=\"ns.e('body')\">\n                <slot />\n              </div>\n            </template>\n            <div v-if=\"$slots.footer\" :class=\"ns.e('footer')\">\n              <slot name=\"footer\" />\n            </div>\n          </div>\n        </el-focus-trap>\n      </el-overlay>\n    </transition>\n  </teleport>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, ref } from 'vue'\nimport { Close } from '@element-plus/icons-vue'\n\nimport { ElOverlay } from '@element-plus/components/overlay'\nimport ElFocusTrap from '@element-plus/components/focus-trap'\nimport { useDialog } from '@element-plus/components/dialog'\nimport { addUnit } from '@element-plus/utils'\nimport ElIcon from '@element-plus/components/icon'\nimport { useDeprecated, useLocale, useNamespace } from '@element-plus/hooks'\nimport { drawerEmits, drawerProps } from './drawer'\n\nexport default defineComponent({\n  name: 'ElDrawer',\n  components: {\n    ElOverlay,\n    ElFocusTrap,\n    ElIcon,\n    Close,\n  },\n  props: drawerProps,\n  emits: drawerEmits,\n\n  setup(props, { slots }) {\n    useDeprecated(\n      {\n        scope: 'el-drawer',\n        from: 'the title slot',\n        replacement: 'the header slot',\n        version: '3.0.0',\n        ref: 'https://element-plus.org/en-US/component/drawer.html#slots',\n      },\n      computed(() => !!slots.title)\n    )\n\n    const drawerRef = ref<HTMLElement>()\n    const focusStartRef = ref<HTMLElement>()\n    const ns = useNamespace('drawer')\n    const { t } = useLocale()\n\n    const isHorizontal = computed(\n      () => props.direction === 'rtl' || props.direction === 'ltr'\n    )\n    const drawerSize = computed(() => addUnit(props.size))\n\n    return {\n      ...useDialog(props, drawerRef),\n      drawerRef,\n      focusStartRef,\n      isHorizontal,\n      drawerSize,\n      ns,\n      t,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}