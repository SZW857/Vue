{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// The Substitution object provides utility methods to manipulate\n// the GSUB substitution table.\n\nimport check from './check';\nimport Layout from './layout';\n\n/**\n * @exports opentype.Substitution\n * @class\n * @extends opentype.Layout\n * @param {opentype.Font}\n * @constructor\n */\nfunction Substitution(font) {\n  Layout.call(this, font, 'gsub');\n}\n\n// Check if 2 arrays of primitives are equal.\nfunction arraysEqual(ar1, ar2) {\n  const n = ar1.length;\n  if (n !== ar2.length) {\n    return false;\n  }\n  for (let i = 0; i < n; i++) {\n    if (ar1[i] !== ar2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Find the first subtable of a lookup table in a particular format.\nfunction getSubstFormat(lookupTable, format, defaultSubtable) {\n  const subtables = lookupTable.subtables;\n  for (let i = 0; i < subtables.length; i++) {\n    const subtable = subtables[i];\n    if (subtable.substFormat === format) {\n      return subtable;\n    }\n  }\n  if (defaultSubtable) {\n    subtables.push(defaultSubtable);\n    return defaultSubtable;\n  }\n  return undefined;\n}\nSubstitution.prototype = Layout.prototype;\n\n/**\n * Create a default GSUB table.\n * @return {Object} gsub - The GSUB table.\n */\nSubstitution.prototype.createDefaultTable = function () {\n  // Generate a default empty GSUB table with just a DFLT script and dflt lang sys.\n  return {\n    version: 1,\n    scripts: [{\n      tag: 'DFLT',\n      script: {\n        defaultLangSys: {\n          reserved: 0,\n          reqFeatureIndex: 0xffff,\n          featureIndexes: []\n        },\n        langSysRecords: []\n      }\n    }],\n    features: [],\n    lookups: []\n  };\n};\n\n/**\n * List all single substitutions (lookup type 1) for a given script, language, and feature.\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n * @param {string} feature - 4-character feature name ('aalt', 'salt', 'ss01'...)\n * @return {Array} substitutions - The list of substitutions.\n */\nSubstitution.prototype.getSingle = function (feature, script, language) {\n  const substitutions = [];\n  const lookupTables = this.getLookupTables(script, language, feature, 1);\n  for (let idx = 0; idx < lookupTables.length; idx++) {\n    const subtables = lookupTables[idx].subtables;\n    for (let i = 0; i < subtables.length; i++) {\n      const subtable = subtables[i];\n      const glyphs = this.expandCoverage(subtable.coverage);\n      let j;\n      if (subtable.substFormat === 1) {\n        const delta = subtable.deltaGlyphId;\n        for (j = 0; j < glyphs.length; j++) {\n          const glyph = glyphs[j];\n          substitutions.push({\n            sub: glyph,\n            by: glyph + delta\n          });\n        }\n      } else {\n        const substitute = subtable.substitute;\n        for (j = 0; j < glyphs.length; j++) {\n          substitutions.push({\n            sub: glyphs[j],\n            by: substitute[j]\n          });\n        }\n      }\n    }\n  }\n  return substitutions;\n};\n\n/**\n * List all alternates (lookup type 3) for a given script, language, and feature.\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n * @param {string} feature - 4-character feature name ('aalt', 'salt'...)\n * @return {Array} alternates - The list of alternates\n */\nSubstitution.prototype.getAlternates = function (feature, script, language) {\n  const alternates = [];\n  const lookupTables = this.getLookupTables(script, language, feature, 3);\n  for (let idx = 0; idx < lookupTables.length; idx++) {\n    const subtables = lookupTables[idx].subtables;\n    for (let i = 0; i < subtables.length; i++) {\n      const subtable = subtables[i];\n      const glyphs = this.expandCoverage(subtable.coverage);\n      const alternateSets = subtable.alternateSets;\n      for (let j = 0; j < glyphs.length; j++) {\n        alternates.push({\n          sub: glyphs[j],\n          by: alternateSets[j]\n        });\n      }\n    }\n  }\n  return alternates;\n};\n\n/**\n * List all ligatures (lookup type 4) for a given script, language, and feature.\n * The result is an array of ligature objects like { sub: [ids], by: id }\n * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n * @return {Array} ligatures - The list of ligatures.\n */\nSubstitution.prototype.getLigatures = function (feature, script, language) {\n  const ligatures = [];\n  const lookupTables = this.getLookupTables(script, language, feature, 4);\n  for (let idx = 0; idx < lookupTables.length; idx++) {\n    const subtables = lookupTables[idx].subtables;\n    for (let i = 0; i < subtables.length; i++) {\n      const subtable = subtables[i];\n      const glyphs = this.expandCoverage(subtable.coverage);\n      const ligatureSets = subtable.ligatureSets;\n      for (let j = 0; j < glyphs.length; j++) {\n        const startGlyph = glyphs[j];\n        const ligSet = ligatureSets[j];\n        for (let k = 0; k < ligSet.length; k++) {\n          const lig = ligSet[k];\n          ligatures.push({\n            sub: [startGlyph].concat(lig.components),\n            by: lig.ligGlyph\n          });\n        }\n      }\n    }\n  }\n  return ligatures;\n};\n\n/**\n * Add or modify a single substitution (lookup type 1)\n * Format 2, more flexible, is always used.\n * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n * @param {Object} substitution - { sub: id, delta: number } for format 1 or { sub: id, by: id } for format 2.\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n */\nSubstitution.prototype.addSingle = function (feature, substitution, script, language) {\n  const lookupTable = this.getLookupTables(script, language, feature, 1, true)[0];\n  const subtable = getSubstFormat(lookupTable, 2, {\n    // lookup type 1 subtable, format 2, coverage format 1\n    substFormat: 2,\n    coverage: {\n      format: 1,\n      glyphs: []\n    },\n    substitute: []\n  });\n  check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);\n  const coverageGlyph = substitution.sub;\n  let pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n  if (pos < 0) {\n    pos = -1 - pos;\n    subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n    subtable.substitute.splice(pos, 0, 0);\n  }\n  subtable.substitute[pos] = substitution.by;\n};\n\n/**\n * Add or modify an alternate substitution (lookup type 1)\n * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n * @param {Object} substitution - { sub: id, by: [ids] }\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n */\nSubstitution.prototype.addAlternate = function (feature, substitution, script, language) {\n  const lookupTable = this.getLookupTables(script, language, feature, 3, true)[0];\n  const subtable = getSubstFormat(lookupTable, 1, {\n    // lookup type 3 subtable, format 1, coverage format 1\n    substFormat: 1,\n    coverage: {\n      format: 1,\n      glyphs: []\n    },\n    alternateSets: []\n  });\n  check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);\n  const coverageGlyph = substitution.sub;\n  let pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n  if (pos < 0) {\n    pos = -1 - pos;\n    subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n    subtable.alternateSets.splice(pos, 0, 0);\n  }\n  subtable.alternateSets[pos] = substitution.by;\n};\n\n/**\n * Add a ligature (lookup type 4)\n * Ligatures with more components must be stored ahead of those with fewer components in order to be found\n * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n * @param {Object} ligature - { sub: [ids], by: id }\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n */\nSubstitution.prototype.addLigature = function (feature, ligature, script, language) {\n  const lookupTable = this.getLookupTables(script, language, feature, 4, true)[0];\n  let subtable = lookupTable.subtables[0];\n  if (!subtable) {\n    subtable = {\n      // lookup type 4 subtable, format 1, coverage format 1\n      substFormat: 1,\n      coverage: {\n        format: 1,\n        glyphs: []\n      },\n      ligatureSets: []\n    };\n    lookupTable.subtables[0] = subtable;\n  }\n  check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);\n  const coverageGlyph = ligature.sub[0];\n  const ligComponents = ligature.sub.slice(1);\n  const ligatureTable = {\n    ligGlyph: ligature.by,\n    components: ligComponents\n  };\n  let pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n  if (pos >= 0) {\n    // ligatureSet already exists\n    const ligatureSet = subtable.ligatureSets[pos];\n    for (let i = 0; i < ligatureSet.length; i++) {\n      // If ligature already exists, return.\n      if (arraysEqual(ligatureSet[i].components, ligComponents)) {\n        return;\n      }\n    }\n    // ligature does not exist: add it.\n    ligatureSet.push(ligatureTable);\n  } else {\n    // Create a new ligatureSet and add coverage for the first glyph.\n    pos = -1 - pos;\n    subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n    subtable.ligatureSets.splice(pos, 0, [ligatureTable]);\n  }\n};\n\n/**\n * List all feature data for a given script and language.\n * @param {string} feature - 4-letter feature name\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n * @return {Array} substitutions - The list of substitutions.\n */\nSubstitution.prototype.getFeature = function (feature, script, language) {\n  if (/ss\\d\\d/.test(feature)) {\n    // ss01 - ss20\n    return this.getSingle(feature, script, language);\n  }\n  switch (feature) {\n    case 'aalt':\n    case 'salt':\n      return this.getSingle(feature, script, language).concat(this.getAlternates(feature, script, language));\n    case 'dlig':\n    case 'liga':\n    case 'rlig':\n      return this.getLigatures(feature, script, language);\n  }\n  return undefined;\n};\n\n/**\n * Add a substitution to a feature for a given script and language.\n * @param {string} feature - 4-letter feature name\n * @param {Object} sub - the substitution to add (an object like { sub: id or [ids], by: id or [ids] })\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n */\nSubstitution.prototype.add = function (feature, sub, script, language) {\n  if (/ss\\d\\d/.test(feature)) {\n    // ss01 - ss20\n    return this.addSingle(feature, sub, script, language);\n  }\n  switch (feature) {\n    case 'aalt':\n    case 'salt':\n      if (typeof sub.by === 'number') {\n        return this.addSingle(feature, sub, script, language);\n      }\n      return this.addAlternate(feature, sub, script, language);\n    case 'dlig':\n    case 'liga':\n    case 'rlig':\n      return this.addLigature(feature, sub, script, language);\n  }\n  return undefined;\n};\nexport default Substitution;","map":{"version":3,"names":["check","Layout","Substitution","font","call","arraysEqual","ar1","ar2","n","length","i","getSubstFormat","lookupTable","format","defaultSubtable","subtables","subtable","substFormat","push","undefined","prototype","createDefaultTable","version","scripts","tag","script","defaultLangSys","reserved","reqFeatureIndex","featureIndexes","langSysRecords","features","lookups","getSingle","feature","language","substitutions","lookupTables","getLookupTables","idx","glyphs","expandCoverage","coverage","j","delta","deltaGlyphId","glyph","sub","by","substitute","getAlternates","alternates","alternateSets","getLigatures","ligatures","ligatureSets","startGlyph","ligSet","k","lig","concat","components","ligGlyph","addSingle","substitution","assert","coverageGlyph","pos","binSearch","splice","addAlternate","addLigature","ligature","ligComponents","slice","ligatureTable","ligatureSet","getFeature","test","add"],"sources":["C:/Users/14486/Desktop/社区公益系统前端/vue_community/node_modules/_opentype.js@0.7.3@opentype.js/src/substitution.js"],"sourcesContent":["// The Substitution object provides utility methods to manipulate\n// the GSUB substitution table.\n\nimport check from './check';\nimport Layout from './layout';\n\n/**\n * @exports opentype.Substitution\n * @class\n * @extends opentype.Layout\n * @param {opentype.Font}\n * @constructor\n */\nfunction Substitution(font) {\n    Layout.call(this, font, 'gsub');\n}\n\n// Check if 2 arrays of primitives are equal.\nfunction arraysEqual(ar1, ar2) {\n    const n = ar1.length;\n    if (n !== ar2.length) { return false; }\n    for (let i = 0; i < n; i++) {\n        if (ar1[i] !== ar2[i]) { return false; }\n    }\n    return true;\n}\n\n// Find the first subtable of a lookup table in a particular format.\nfunction getSubstFormat(lookupTable, format, defaultSubtable) {\n    const subtables = lookupTable.subtables;\n    for (let i = 0; i < subtables.length; i++) {\n        const subtable = subtables[i];\n        if (subtable.substFormat === format) {\n            return subtable;\n        }\n    }\n    if (defaultSubtable) {\n        subtables.push(defaultSubtable);\n        return defaultSubtable;\n    }\n    return undefined;\n}\n\nSubstitution.prototype = Layout.prototype;\n\n/**\n * Create a default GSUB table.\n * @return {Object} gsub - The GSUB table.\n */\nSubstitution.prototype.createDefaultTable = function() {\n    // Generate a default empty GSUB table with just a DFLT script and dflt lang sys.\n    return {\n        version: 1,\n        scripts: [{\n            tag: 'DFLT',\n            script: {\n                defaultLangSys: { reserved: 0, reqFeatureIndex: 0xffff, featureIndexes: [] },\n                langSysRecords: []\n            }\n        }],\n        features: [],\n        lookups: []\n    };\n};\n\n/**\n * List all single substitutions (lookup type 1) for a given script, language, and feature.\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n * @param {string} feature - 4-character feature name ('aalt', 'salt', 'ss01'...)\n * @return {Array} substitutions - The list of substitutions.\n */\nSubstitution.prototype.getSingle = function(feature, script, language) {\n    const substitutions = [];\n    const lookupTables = this.getLookupTables(script, language, feature, 1);\n    for (let idx = 0; idx < lookupTables.length; idx++) {\n        const subtables = lookupTables[idx].subtables;\n        for (let i = 0; i < subtables.length; i++) {\n            const subtable = subtables[i];\n            const glyphs = this.expandCoverage(subtable.coverage);\n            let j;\n            if (subtable.substFormat === 1) {\n                const delta = subtable.deltaGlyphId;\n                for (j = 0; j < glyphs.length; j++) {\n                    const glyph = glyphs[j];\n                    substitutions.push({ sub: glyph, by: glyph + delta });\n                }\n            } else {\n                const substitute = subtable.substitute;\n                for (j = 0; j < glyphs.length; j++) {\n                    substitutions.push({ sub: glyphs[j], by: substitute[j] });\n                }\n            }\n        }\n    }\n    return substitutions;\n};\n\n/**\n * List all alternates (lookup type 3) for a given script, language, and feature.\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n * @param {string} feature - 4-character feature name ('aalt', 'salt'...)\n * @return {Array} alternates - The list of alternates\n */\nSubstitution.prototype.getAlternates = function(feature, script, language) {\n    const alternates = [];\n    const lookupTables = this.getLookupTables(script, language, feature, 3);\n    for (let idx = 0; idx < lookupTables.length; idx++) {\n        const subtables = lookupTables[idx].subtables;\n        for (let i = 0; i < subtables.length; i++) {\n            const subtable = subtables[i];\n            const glyphs = this.expandCoverage(subtable.coverage);\n            const alternateSets = subtable.alternateSets;\n            for (let j = 0; j < glyphs.length; j++) {\n                alternates.push({ sub: glyphs[j], by: alternateSets[j] });\n            }\n        }\n    }\n    return alternates;\n};\n\n/**\n * List all ligatures (lookup type 4) for a given script, language, and feature.\n * The result is an array of ligature objects like { sub: [ids], by: id }\n * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n * @return {Array} ligatures - The list of ligatures.\n */\nSubstitution.prototype.getLigatures = function(feature, script, language) {\n    const ligatures = [];\n    const lookupTables = this.getLookupTables(script, language, feature, 4);\n    for (let idx = 0; idx < lookupTables.length; idx++) {\n        const subtables = lookupTables[idx].subtables;\n        for (let i = 0; i < subtables.length; i++) {\n            const subtable = subtables[i];\n            const glyphs = this.expandCoverage(subtable.coverage);\n            const ligatureSets = subtable.ligatureSets;\n            for (let j = 0; j < glyphs.length; j++) {\n                const startGlyph = glyphs[j];\n                const ligSet = ligatureSets[j];\n                for (let k = 0; k < ligSet.length; k++) {\n                    const lig = ligSet[k];\n                    ligatures.push({\n                        sub: [startGlyph].concat(lig.components),\n                        by: lig.ligGlyph\n                    });\n                }\n            }\n        }\n    }\n    return ligatures;\n};\n\n/**\n * Add or modify a single substitution (lookup type 1)\n * Format 2, more flexible, is always used.\n * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n * @param {Object} substitution - { sub: id, delta: number } for format 1 or { sub: id, by: id } for format 2.\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n */\nSubstitution.prototype.addSingle = function(feature, substitution, script, language) {\n    const lookupTable = this.getLookupTables(script, language, feature, 1, true)[0];\n    const subtable = getSubstFormat(lookupTable, 2, {                // lookup type 1 subtable, format 2, coverage format 1\n        substFormat: 2,\n        coverage: {format: 1, glyphs: []},\n        substitute: []\n    });\n    check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);\n    const coverageGlyph = substitution.sub;\n    let pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n    if (pos < 0) {\n        pos = -1 - pos;\n        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n        subtable.substitute.splice(pos, 0, 0);\n    }\n    subtable.substitute[pos] = substitution.by;\n};\n\n/**\n * Add or modify an alternate substitution (lookup type 1)\n * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n * @param {Object} substitution - { sub: id, by: [ids] }\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n */\nSubstitution.prototype.addAlternate = function(feature, substitution, script, language) {\n    const lookupTable = this.getLookupTables(script, language, feature, 3, true)[0];\n    const subtable = getSubstFormat(lookupTable, 1, {                // lookup type 3 subtable, format 1, coverage format 1\n        substFormat: 1,\n        coverage: {format: 1, glyphs: []},\n        alternateSets: []\n    });\n    check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);\n    const coverageGlyph = substitution.sub;\n    let pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n    if (pos < 0) {\n        pos = -1 - pos;\n        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n        subtable.alternateSets.splice(pos, 0, 0);\n    }\n    subtable.alternateSets[pos] = substitution.by;\n};\n\n/**\n * Add a ligature (lookup type 4)\n * Ligatures with more components must be stored ahead of those with fewer components in order to be found\n * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)\n * @param {Object} ligature - { sub: [ids], by: id }\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n */\nSubstitution.prototype.addLigature = function(feature, ligature, script, language) {\n    const lookupTable = this.getLookupTables(script, language, feature, 4, true)[0];\n    let subtable = lookupTable.subtables[0];\n    if (!subtable) {\n        subtable = {                // lookup type 4 subtable, format 1, coverage format 1\n            substFormat: 1,\n            coverage: { format: 1, glyphs: [] },\n            ligatureSets: []\n        };\n        lookupTable.subtables[0] = subtable;\n    }\n    check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);\n    const coverageGlyph = ligature.sub[0];\n    const ligComponents = ligature.sub.slice(1);\n    const ligatureTable = {\n        ligGlyph: ligature.by,\n        components: ligComponents\n    };\n    let pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n    if (pos >= 0) {\n        // ligatureSet already exists\n        const ligatureSet = subtable.ligatureSets[pos];\n        for (let i = 0; i < ligatureSet.length; i++) {\n            // If ligature already exists, return.\n            if (arraysEqual(ligatureSet[i].components, ligComponents)) {\n                return;\n            }\n        }\n        // ligature does not exist: add it.\n        ligatureSet.push(ligatureTable);\n    } else {\n        // Create a new ligatureSet and add coverage for the first glyph.\n        pos = -1 - pos;\n        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n        subtable.ligatureSets.splice(pos, 0, [ligatureTable]);\n    }\n};\n\n/**\n * List all feature data for a given script and language.\n * @param {string} feature - 4-letter feature name\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n * @return {Array} substitutions - The list of substitutions.\n */\nSubstitution.prototype.getFeature = function(feature, script, language) {\n    if (/ss\\d\\d/.test(feature)) {               // ss01 - ss20\n        return this.getSingle(feature, script, language);\n    }\n    switch (feature) {\n        case 'aalt':\n        case 'salt':\n            return this.getSingle(feature, script, language)\n                    .concat(this.getAlternates(feature, script, language));\n        case 'dlig':\n        case 'liga':\n        case 'rlig': return this.getLigatures(feature, script, language);\n    }\n    return undefined;\n};\n\n/**\n * Add a substitution to a feature for a given script and language.\n * @param {string} feature - 4-letter feature name\n * @param {Object} sub - the substitution to add (an object like { sub: id or [ids], by: id or [ids] })\n * @param {string} [script='DFLT']\n * @param {string} [language='dflt']\n */\nSubstitution.prototype.add = function(feature, sub, script, language) {\n    if (/ss\\d\\d/.test(feature)) {               // ss01 - ss20\n        return this.addSingle(feature, sub, script, language);\n    }\n    switch (feature) {\n        case 'aalt':\n        case 'salt':\n            if (typeof sub.by === 'number') {\n                return this.addSingle(feature, sub, script, language);\n            }\n            return this.addAlternate(feature, sub, script, language);\n        case 'dlig':\n        case 'liga':\n        case 'rlig':\n            return this.addLigature(feature, sub, script, language);\n    }\n    return undefined;\n};\n\nexport default Substitution;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}