{"ast":null,"code":"'use strict';\n\nconst assert = require('assert');\nfunction rndPathCmd(cmd) {\n  const r = Math.random() * 0.2 - 0.1;\n  switch (cmd.type) {\n    case 'M':\n    case 'L':\n      cmd.x += r;\n      cmd.y += r;\n      break;\n    case 'Q':\n    case 'C':\n      cmd.x += r;\n      cmd.y += r;\n      cmd.x1 += r;\n      cmd.y1 += r;\n      break;\n    default:\n      // Close path cmd\n      break;\n  }\n  return cmd;\n}\nmodule.exports = function (text, opts) {\n  const ch = text[0];\n  assert(ch, 'expect a string');\n  const fontSize = opts.fontSize;\n  const fontScale = fontSize / opts.font.unitsPerEm;\n  const glyph = opts.font.charToGlyph(ch);\n  const width = glyph.advanceWidth ? glyph.advanceWidth * fontScale : 0;\n  const left = opts.x - width / 2;\n  const height = (opts.ascender + opts.descender) * fontScale;\n  const top = opts.y + height / 2;\n  const path = glyph.getPath(left, top, fontSize);\n  // Randomize path commands\n  path.commands.forEach(rndPathCmd);\n  const pathData = path.toPathData();\n  return pathData;\n};","map":{"version":3,"names":["assert","require","rndPathCmd","cmd","r","Math","random","type","x","y","x1","y1","module","exports","text","opts","ch","fontSize","fontScale","font","unitsPerEm","glyph","charToGlyph","width","advanceWidth","left","height","ascender","descender","top","path","getPath","commands","forEach","pathData","toPathData"],"sources":["C:/Users/14486/Desktop/社区公益系统前端/vue_community/node_modules/svg-captcha/lib/ch-to-path.js"],"sourcesContent":["'use strict';\r\nconst assert = require('assert');\r\n\r\nfunction rndPathCmd(cmd) {\r\n\tconst r = (Math.random() * 0.2) - 0.1;\r\n\r\n\tswitch (cmd.type) {\r\n\t\tcase 'M': case 'L':\r\n\t\t\tcmd.x += r;\r\n\t\t\tcmd.y += r;\r\n\t\t\tbreak;\r\n\t\tcase 'Q': case 'C':\r\n\t\t\tcmd.x += r;\r\n\t\t\tcmd.y += r;\r\n\t\t\tcmd.x1 += r;\r\n\t\t\tcmd.y1 += r;\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\t// Close path cmd\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\treturn cmd;\r\n}\r\n\r\nmodule.exports = function (text, opts) {\r\n\tconst ch = text[0];\r\n\tassert(ch, 'expect a string');\r\n\r\n\tconst fontSize = opts.fontSize;\r\n\tconst fontScale = fontSize / opts.font.unitsPerEm;\r\n\r\n\tconst glyph = opts.font.charToGlyph(ch);\r\n\tconst width = glyph.advanceWidth ? glyph.advanceWidth * fontScale : 0;\r\n\tconst left = opts.x - (width / 2);\r\n\r\n\tconst height = (opts.ascender + opts.descender) * fontScale;\r\n\tconst top = opts.y + (height / 2);\r\n\tconst path = glyph.getPath(left, top, fontSize);\r\n\t// Randomize path commands\r\n\tpath.commands.forEach(rndPathCmd);\r\n\r\n\tconst pathData = path.toPathData();\r\n\r\n\treturn pathData;\r\n};\r\n"],"mappings":"AAAA,YAAY;;AACZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAEhC,SAASC,UAAU,CAACC,GAAG,EAAE;EACxB,MAAMC,CAAC,GAAIC,IAAI,CAACC,MAAM,EAAE,GAAG,GAAG,GAAI,GAAG;EAErC,QAAQH,GAAG,CAACI,IAAI;IACf,KAAK,GAAG;IAAE,KAAK,GAAG;MACjBJ,GAAG,CAACK,CAAC,IAAIJ,CAAC;MACVD,GAAG,CAACM,CAAC,IAAIL,CAAC;MACV;IACD,KAAK,GAAG;IAAE,KAAK,GAAG;MACjBD,GAAG,CAACK,CAAC,IAAIJ,CAAC;MACVD,GAAG,CAACM,CAAC,IAAIL,CAAC;MACVD,GAAG,CAACO,EAAE,IAAIN,CAAC;MACXD,GAAG,CAACQ,EAAE,IAAIP,CAAC;MACX;IACD;MACC;MACA;EAAM;EAGR,OAAOD,GAAG;AACX;AAEAS,MAAM,CAACC,OAAO,GAAG,UAAUC,IAAI,EAAEC,IAAI,EAAE;EACtC,MAAMC,EAAE,GAAGF,IAAI,CAAC,CAAC,CAAC;EAClBd,MAAM,CAACgB,EAAE,EAAE,iBAAiB,CAAC;EAE7B,MAAMC,QAAQ,GAAGF,IAAI,CAACE,QAAQ;EAC9B,MAAMC,SAAS,GAAGD,QAAQ,GAAGF,IAAI,CAACI,IAAI,CAACC,UAAU;EAEjD,MAAMC,KAAK,GAAGN,IAAI,CAACI,IAAI,CAACG,WAAW,CAACN,EAAE,CAAC;EACvC,MAAMO,KAAK,GAAGF,KAAK,CAACG,YAAY,GAAGH,KAAK,CAACG,YAAY,GAAGN,SAAS,GAAG,CAAC;EACrE,MAAMO,IAAI,GAAGV,IAAI,CAACP,CAAC,GAAIe,KAAK,GAAG,CAAE;EAEjC,MAAMG,MAAM,GAAG,CAACX,IAAI,CAACY,QAAQ,GAAGZ,IAAI,CAACa,SAAS,IAAIV,SAAS;EAC3D,MAAMW,GAAG,GAAGd,IAAI,CAACN,CAAC,GAAIiB,MAAM,GAAG,CAAE;EACjC,MAAMI,IAAI,GAAGT,KAAK,CAACU,OAAO,CAACN,IAAI,EAAEI,GAAG,EAAEZ,QAAQ,CAAC;EAC/C;EACAa,IAAI,CAACE,QAAQ,CAACC,OAAO,CAAC/B,UAAU,CAAC;EAEjC,MAAMgC,QAAQ,GAAGJ,IAAI,CAACK,UAAU,EAAE;EAElC,OAAOD,QAAQ;AAChB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}