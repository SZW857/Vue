{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar lodashUnified = require('lodash-unified');\nvar index$6 = require('../../button/index.js');\nvar index$8 = require('../../icon/index.js');\nrequire('../../../directives/index.js');\nrequire('../../../hooks/index.js');\nvar index$4 = require('../../tooltip/index.js');\nvar index$5 = require('../../input/index.js');\nrequire('../../../constants/index.js');\nrequire('../../../utils/index.js');\nvar iconsVue = require('@element-plus/icons-vue');\nvar alphaSlider = require('./components/alpha-slider.js');\nvar hueSlider = require('./components/hue-slider.js');\nvar predefine = require('./components/predefine.js');\nvar svPanel = require('./components/sv-panel.js');\nvar color = require('./utils/color.js');\nvar colorPicker = require('./color-picker.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar index = require('../../../hooks/use-locale/index.js');\nvar index$1 = require('../../../hooks/use-namespace/index.js');\nvar index$2 = require('../../../hooks/use-form-item/index.js');\nvar index$3 = require('../../../hooks/use-common-props/index.js');\nvar event = require('../../../constants/event.js');\nvar error = require('../../../utils/error.js');\nvar index$7 = require('../../../directives/click-outside/index.js');\nconst _hoisted_1 = [\"id\", \"aria-label\", \"aria-labelledby\", \"aria-description\", \"tabindex\", \"onKeydown\"];\nconst __default__ = vue.defineComponent({\n  name: \"ElColorPicker\"\n});\nconst _sfc_main = /* @__PURE__ */vue.defineComponent({\n  ...__default__,\n  props: colorPicker.colorPickerProps,\n  emits: colorPicker.colorPickerEmits,\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const {\n      t\n    } = index.useLocale();\n    const ns = index$1.useNamespace(\"color\");\n    const {\n      formItem\n    } = index$2.useFormItem();\n    const colorSize = index$3.useSize();\n    const colorDisabled = index$3.useDisabled();\n    const {\n      inputId: buttonId,\n      isLabeledByFormItem\n    } = index$2.useFormItemInputId(props, {\n      formItemContext: formItem\n    });\n    const hue = vue.ref();\n    const sv = vue.ref();\n    const alpha = vue.ref();\n    const popper = vue.ref();\n    let shouldActiveChange = true;\n    const color$1 = vue.reactive(new color[\"default\"]({\n      enableAlpha: props.showAlpha,\n      format: props.colorFormat || \"\",\n      value: props.modelValue\n    }));\n    const showPicker = vue.ref(false);\n    const showPanelColor = vue.ref(false);\n    const customInput = vue.ref(\"\");\n    const displayedColor = vue.computed(() => {\n      if (!props.modelValue && !showPanelColor.value) {\n        return \"transparent\";\n      }\n      return displayedRgb(color$1, props.showAlpha);\n    });\n    const currentColor = vue.computed(() => {\n      return !props.modelValue && !showPanelColor.value ? \"\" : color$1.value;\n    });\n    const buttonAriaLabel = vue.computed(() => {\n      return !isLabeledByFormItem.value ? props.label || t(\"el.colorpicker.defaultLabel\") : void 0;\n    });\n    const buttonAriaLabelledby = vue.computed(() => {\n      return isLabeledByFormItem.value ? formItem == null ? void 0 : formItem.labelId : void 0;\n    });\n    function displayedRgb(color2, showAlpha) {\n      if (!(color2 instanceof color[\"default\"])) {\n        throw new TypeError(\"color should be instance of _color Class\");\n      }\n      const {\n        r,\n        g,\n        b\n      } = color2.toRgb();\n      return showAlpha ? `rgba(${r}, ${g}, ${b}, ${color2.get(\"alpha\") / 100})` : `rgb(${r}, ${g}, ${b})`;\n    }\n    function setShowPicker(value) {\n      showPicker.value = value;\n    }\n    const debounceSetShowPicker = lodashUnified.debounce(setShowPicker, 100);\n    function hide() {\n      debounceSetShowPicker(false);\n      resetColor();\n    }\n    function resetColor() {\n      vue.nextTick(() => {\n        if (props.modelValue) {\n          color$1.fromString(props.modelValue);\n        } else {\n          color$1.value = \"\";\n          vue.nextTick(() => {\n            showPanelColor.value = false;\n          });\n        }\n      });\n    }\n    function handleTrigger() {\n      if (colorDisabled.value) return;\n      debounceSetShowPicker(!showPicker.value);\n    }\n    function handleConfirm() {\n      color$1.fromString(customInput.value);\n    }\n    function confirmValue() {\n      const value = color$1.value;\n      emit(event.UPDATE_MODEL_EVENT, value);\n      emit(\"change\", value);\n      if (props.validateEvent) {\n        formItem == null ? void 0 : formItem.validate(\"change\").catch(err => error.debugWarn(err));\n      }\n      debounceSetShowPicker(false);\n      vue.nextTick(() => {\n        const newColor = new color[\"default\"]({\n          enableAlpha: props.showAlpha,\n          format: props.colorFormat || \"\",\n          value: props.modelValue\n        });\n        if (!color$1.compare(newColor)) {\n          resetColor();\n        }\n      });\n    }\n    function clear() {\n      debounceSetShowPicker(false);\n      emit(event.UPDATE_MODEL_EVENT, null);\n      emit(\"change\", null);\n      if (props.modelValue !== null && props.validateEvent) {\n        formItem == null ? void 0 : formItem.validate(\"change\").catch(err => error.debugWarn(err));\n      }\n      resetColor();\n    }\n    vue.onMounted(() => {\n      if (props.modelValue) {\n        customInput.value = currentColor.value;\n      }\n    });\n    vue.watch(() => props.modelValue, newVal => {\n      if (!newVal) {\n        showPanelColor.value = false;\n      } else if (newVal && newVal !== color$1.value) {\n        shouldActiveChange = false;\n        color$1.fromString(newVal);\n      }\n    });\n    vue.watch(() => currentColor.value, val => {\n      customInput.value = val;\n      shouldActiveChange && emit(\"activeChange\", val);\n      shouldActiveChange = true;\n    });\n    vue.watch(() => color$1.value, () => {\n      if (!props.modelValue && !showPanelColor.value) {\n        showPanelColor.value = true;\n      }\n    });\n    vue.watch(() => showPicker.value, () => {\n      vue.nextTick(() => {\n        var _a, _b, _c;\n        (_a = hue.value) == null ? void 0 : _a.update();\n        (_b = sv.value) == null ? void 0 : _b.update();\n        (_c = alpha.value) == null ? void 0 : _c.update();\n      });\n    });\n    vue.provide(colorPicker.colorPickerContextKey, {\n      currentColor\n    });\n    expose({\n      color: color$1\n    });\n    return (_ctx, _cache) => {\n      return vue.openBlock(), vue.createBlock(vue.unref(index$4.ElTooltip), {\n        ref_key: \"popper\",\n        ref: popper,\n        visible: showPicker.value,\n        \"show-arrow\": false,\n        \"fallback-placements\": [\"bottom\", \"top\", \"right\", \"left\"],\n        offset: 0,\n        \"gpu-acceleration\": false,\n        \"popper-class\": [vue.unref(ns).be(\"picker\", \"panel\"), vue.unref(ns).b(\"dropdown\"), _ctx.popperClass],\n        \"stop-popper-mouse-event\": false,\n        effect: \"light\",\n        trigger: \"click\",\n        transition: `${vue.unref(ns).namespace.value}-zoom-in-top`,\n        persistent: \"\"\n      }, {\n        content: vue.withCtx(() => [vue.withDirectives((vue.openBlock(), vue.createElementBlock(\"div\", null, [vue.createElementVNode(\"div\", {\n          class: vue.normalizeClass(vue.unref(ns).be(\"dropdown\", \"main-wrapper\"))\n        }, [vue.createVNode(hueSlider[\"default\"], {\n          ref_key: \"hue\",\n          ref: hue,\n          class: \"hue-slider\",\n          color: vue.unref(color$1),\n          vertical: \"\"\n        }, null, 8, [\"color\"]), vue.createVNode(svPanel[\"default\"], {\n          ref: \"svPanel\",\n          color: vue.unref(color$1)\n        }, null, 8, [\"color\"])], 2), _ctx.showAlpha ? (vue.openBlock(), vue.createBlock(alphaSlider[\"default\"], {\n          key: 0,\n          ref_key: \"alpha\",\n          ref: alpha,\n          color: vue.unref(color$1)\n        }, null, 8, [\"color\"])) : vue.createCommentVNode(\"v-if\", true), _ctx.predefine ? (vue.openBlock(), vue.createBlock(predefine[\"default\"], {\n          key: 1,\n          ref: \"predefine\",\n          color: vue.unref(color$1),\n          colors: _ctx.predefine\n        }, null, 8, [\"color\", \"colors\"])) : vue.createCommentVNode(\"v-if\", true), vue.createElementVNode(\"div\", {\n          class: vue.normalizeClass(vue.unref(ns).be(\"dropdown\", \"btns\"))\n        }, [vue.createElementVNode(\"span\", {\n          class: vue.normalizeClass(vue.unref(ns).be(\"dropdown\", \"value\"))\n        }, [vue.createVNode(vue.unref(index$5.ElInput), {\n          modelValue: customInput.value,\n          \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => customInput.value = $event),\n          \"validate-event\": false,\n          size: \"small\",\n          onKeyup: vue.withKeys(handleConfirm, [\"enter\"]),\n          onBlur: handleConfirm\n        }, null, 8, [\"modelValue\", \"onKeyup\"])], 2), vue.createVNode(vue.unref(index$6.ElButton), {\n          class: vue.normalizeClass(vue.unref(ns).be(\"dropdown\", \"link-btn\")),\n          text: \"\",\n          size: \"small\",\n          onClick: clear\n        }, {\n          default: vue.withCtx(() => [vue.createTextVNode(vue.toDisplayString(vue.unref(t)(\"el.colorpicker.clear\")), 1)]),\n          _: 1\n        }, 8, [\"class\"]), vue.createVNode(vue.unref(index$6.ElButton), {\n          plain: \"\",\n          size: \"small\",\n          class: vue.normalizeClass(vue.unref(ns).be(\"dropdown\", \"btn\")),\n          onClick: confirmValue\n        }, {\n          default: vue.withCtx(() => [vue.createTextVNode(vue.toDisplayString(vue.unref(t)(\"el.colorpicker.confirm\")), 1)]),\n          _: 1\n        }, 8, [\"class\"])], 2)])), [[vue.unref(index$7[\"default\"]), hide]])]),\n        default: vue.withCtx(() => [vue.createElementVNode(\"div\", {\n          id: vue.unref(buttonId),\n          class: vue.normalizeClass([vue.unref(ns).b(\"picker\"), vue.unref(ns).is(\"disabled\", vue.unref(colorDisabled)), vue.unref(ns).bm(\"picker\", vue.unref(colorSize))]),\n          role: \"button\",\n          \"aria-label\": vue.unref(buttonAriaLabel),\n          \"aria-labelledby\": vue.unref(buttonAriaLabelledby),\n          \"aria-description\": vue.unref(t)(\"el.colorpicker.description\", {\n            color: _ctx.modelValue || \"\"\n          }),\n          tabindex: _ctx.tabindex,\n          onKeydown: vue.withKeys(handleTrigger, [\"enter\"])\n        }, [vue.unref(colorDisabled) ? (vue.openBlock(), vue.createElementBlock(\"div\", {\n          key: 0,\n          class: vue.normalizeClass(vue.unref(ns).be(\"picker\", \"mask\"))\n        }, null, 2)) : vue.createCommentVNode(\"v-if\", true), vue.createElementVNode(\"div\", {\n          class: vue.normalizeClass(vue.unref(ns).be(\"picker\", \"trigger\")),\n          onClick: handleTrigger\n        }, [vue.createElementVNode(\"span\", {\n          class: vue.normalizeClass([vue.unref(ns).be(\"picker\", \"color\"), vue.unref(ns).is(\"alpha\", _ctx.showAlpha)])\n        }, [vue.createElementVNode(\"span\", {\n          class: vue.normalizeClass(vue.unref(ns).be(\"picker\", \"color-inner\")),\n          style: vue.normalizeStyle({\n            backgroundColor: vue.unref(displayedColor)\n          })\n        }, [vue.withDirectives(vue.createVNode(vue.unref(index$8.ElIcon), {\n          class: vue.normalizeClass([vue.unref(ns).be(\"picker\", \"icon\"), vue.unref(ns).is(\"icon-arrow-down\")])\n        }, {\n          default: vue.withCtx(() => [vue.createVNode(vue.unref(iconsVue.ArrowDown))]),\n          _: 1\n        }, 8, [\"class\"]), [[vue.vShow, _ctx.modelValue || showPanelColor.value]]), !_ctx.modelValue && !showPanelColor.value ? (vue.openBlock(), vue.createBlock(vue.unref(index$8.ElIcon), {\n          key: 0,\n          class: vue.normalizeClass([vue.unref(ns).be(\"picker\", \"empty\"), vue.unref(ns).is(\"icon-close\")])\n        }, {\n          default: vue.withCtx(() => [vue.createVNode(vue.unref(iconsVue.Close))]),\n          _: 1\n        }, 8, [\"class\"])) : vue.createCommentVNode(\"v-if\", true)], 6)], 2)], 2)], 42, _hoisted_1)]),\n        _: 1\n      }, 8, [\"visible\", \"popper-class\", \"transition\"]);\n    };\n  }\n});\nvar ColorPicker = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/color-picker/src/color-picker.vue\"]]);\nexports[\"default\"] = ColorPicker;","map":{"version":3,"mappings":"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","names":["name","t","useLocale","useNamespace","formItem","useFormItem","colorSize","useSize","colorDisabled","useDisabled","inputId","buttonId","isLabeledByFormItem","useFormItemInputId","props","formItemContext","hue","ref","sv","alpha","popper","shouldActiveChange","reactive","Color","enableAlpha","format","colorFormat","value","computed","modelValue","showPanelColor","color","showAlpha","label","color2","TypeError","r","g","b","toRgb","get","showPicker","debounce","debounceSetShowPicker","resetColor","nextTick","customInput","emit","UPDATE_MODEL_EVENT","validateEvent","validate","compare","onMounted","currentColor","watch","newVal","fromString","val","_a","_c","provide","expose"],"sources":["../../../../../../packages/components/color-picker/src/color-picker.vue"],"sourcesContent":["<template>\n  <el-tooltip\n    ref=\"popper\"\n    :visible=\"showPicker\"\n    :show-arrow=\"false\"\n    :fallback-placements=\"['bottom', 'top', 'right', 'left']\"\n    :offset=\"0\"\n    :gpu-acceleration=\"false\"\n    :popper-class=\"[ns.be('picker', 'panel'), ns.b('dropdown'), popperClass]\"\n    :stop-popper-mouse-event=\"false\"\n    effect=\"light\"\n    trigger=\"click\"\n    :transition=\"`${ns.namespace.value}-zoom-in-top`\"\n    persistent\n  >\n    <template #content>\n      <div v-click-outside=\"hide\">\n        <div :class=\"ns.be('dropdown', 'main-wrapper')\">\n          <hue-slider ref=\"hue\" class=\"hue-slider\" :color=\"color\" vertical />\n          <sv-panel ref=\"svPanel\" :color=\"color\" />\n        </div>\n        <alpha-slider v-if=\"showAlpha\" ref=\"alpha\" :color=\"color\" />\n        <predefine\n          v-if=\"predefine\"\n          ref=\"predefine\"\n          :color=\"color\"\n          :colors=\"predefine\"\n        />\n        <div :class=\"ns.be('dropdown', 'btns')\">\n          <span :class=\"ns.be('dropdown', 'value')\">\n            <el-input\n              v-model=\"customInput\"\n              :validate-event=\"false\"\n              size=\"small\"\n              @keyup.enter=\"handleConfirm\"\n              @blur=\"handleConfirm\"\n            />\n          </span>\n          <el-button\n            :class=\"ns.be('dropdown', 'link-btn')\"\n            text\n            size=\"small\"\n            @click=\"clear\"\n          >\n            {{ t('el.colorpicker.clear') }}\n          </el-button>\n          <el-button\n            plain\n            size=\"small\"\n            :class=\"ns.be('dropdown', 'btn')\"\n            @click=\"confirmValue\"\n          >\n            {{ t('el.colorpicker.confirm') }}\n          </el-button>\n        </div>\n      </div>\n    </template>\n    <template #default>\n      <div\n        :id=\"buttonId\"\n        :class=\"[\n          ns.b('picker'),\n          ns.is('disabled', colorDisabled),\n          ns.bm('picker', colorSize),\n        ]\"\n        role=\"button\"\n        :aria-label=\"buttonAriaLabel\"\n        :aria-labelledby=\"buttonAriaLabelledby\"\n        :aria-description=\"\n          t('el.colorpicker.description', { color: modelValue || '' })\n        \"\n        :tabindex=\"tabindex\"\n        @keydown.enter=\"handleTrigger\"\n      >\n        <div v-if=\"colorDisabled\" :class=\"ns.be('picker', 'mask')\" />\n        <div :class=\"ns.be('picker', 'trigger')\" @click=\"handleTrigger\">\n          <span :class=\"[ns.be('picker', 'color'), ns.is('alpha', showAlpha)]\">\n            <span\n              :class=\"ns.be('picker', 'color-inner')\"\n              :style=\"{\n                backgroundColor: displayedColor,\n              }\"\n            >\n              <el-icon\n                v-show=\"modelValue || showPanelColor\"\n                :class=\"[ns.be('picker', 'icon'), ns.is('icon-arrow-down')]\"\n              >\n                <arrow-down />\n              </el-icon>\n              <el-icon\n                v-if=\"!modelValue && !showPanelColor\"\n                :class=\"[ns.be('picker', 'empty'), ns.is('icon-close')]\"\n              >\n                <close />\n              </el-icon>\n            </span>\n          </span>\n        </div>\n      </div>\n    </template>\n  </el-tooltip>\n</template>\n\n<script lang=\"ts\" setup>\nimport {\n  computed,\n  nextTick,\n  onMounted,\n  provide,\n  reactive,\n  ref,\n  watch,\n} from 'vue'\nimport { debounce } from 'lodash-unified'\nimport { ElButton } from '@element-plus/components/button'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { ClickOutside as vClickOutside } from '@element-plus/directives'\nimport {\n  useDisabled,\n  useFormItem,\n  useFormItemInputId,\n  useLocale,\n  useNamespace,\n  useSize,\n} from '@element-plus/hooks'\nimport { ElTooltip } from '@element-plus/components/tooltip'\nimport { ElInput } from '@element-plus/components/input'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { debugWarn } from '@element-plus/utils'\nimport { ArrowDown, Close } from '@element-plus/icons-vue'\nimport AlphaSlider from './components/alpha-slider.vue'\nimport HueSlider from './components/hue-slider.vue'\nimport Predefine from './components/predefine.vue'\nimport SvPanel from './components/sv-panel.vue'\nimport Color from './utils/color'\nimport {\n  colorPickerContextKey,\n  colorPickerEmits,\n  colorPickerProps,\n} from './color-picker'\nimport type { TooltipInstance } from '@element-plus/components/tooltip'\n\ndefineOptions({\n  name: 'ElColorPicker',\n})\nconst props = defineProps(colorPickerProps)\nconst emit = defineEmits(colorPickerEmits)\n\nconst { t } = useLocale()\nconst ns = useNamespace('color')\nconst { formItem } = useFormItem()\nconst colorSize = useSize()\nconst colorDisabled = useDisabled()\n\nconst { inputId: buttonId, isLabeledByFormItem } = useFormItemInputId(props, {\n  formItemContext: formItem,\n})\n\nconst hue = ref<InstanceType<typeof HueSlider>>()\nconst sv = ref<InstanceType<typeof SvPanel>>()\nconst alpha = ref<InstanceType<typeof AlphaSlider>>()\nconst popper = ref<TooltipInstance>()\n\n// active-change is used to prevent modelValue changes from triggering.\nlet shouldActiveChange = true\n\nconst color = reactive(\n  new Color({\n    enableAlpha: props.showAlpha,\n    format: props.colorFormat || '',\n    value: props.modelValue,\n  })\n) as Color\n\nconst showPicker = ref(false)\nconst showPanelColor = ref(false)\nconst customInput = ref('')\n\nconst displayedColor = computed(() => {\n  if (!props.modelValue && !showPanelColor.value) {\n    return 'transparent'\n  }\n  return displayedRgb(color, props.showAlpha)\n})\n\nconst currentColor = computed(() => {\n  return !props.modelValue && !showPanelColor.value ? '' : color.value\n})\n\nconst buttonAriaLabel = computed<string | undefined>(() => {\n  return !isLabeledByFormItem.value\n    ? props.label || t('el.colorpicker.defaultLabel')\n    : undefined\n})\n\nconst buttonAriaLabelledby = computed<string | undefined>(() => {\n  return isLabeledByFormItem.value ? formItem?.labelId : undefined\n})\n\nfunction displayedRgb(color: Color, showAlpha: boolean) {\n  if (!(color instanceof Color)) {\n    throw new TypeError('color should be instance of _color Class')\n  }\n\n  const { r, g, b } = color.toRgb()\n  return showAlpha\n    ? `rgba(${r}, ${g}, ${b}, ${color.get('alpha') / 100})`\n    : `rgb(${r}, ${g}, ${b})`\n}\n\nfunction setShowPicker(value: boolean) {\n  showPicker.value = value\n}\n\nconst debounceSetShowPicker = debounce(setShowPicker, 100)\n\nfunction hide() {\n  debounceSetShowPicker(false)\n  resetColor()\n}\n\nfunction resetColor() {\n  nextTick(() => {\n    if (props.modelValue) {\n      color.fromString(props.modelValue)\n    } else {\n      color.value = ''\n      nextTick(() => {\n        showPanelColor.value = false\n      })\n    }\n  })\n}\n\nfunction handleTrigger() {\n  if (colorDisabled.value) return\n  debounceSetShowPicker(!showPicker.value)\n}\n\nfunction handleConfirm() {\n  color.fromString(customInput.value)\n}\n\nfunction confirmValue() {\n  const value = color.value\n  emit(UPDATE_MODEL_EVENT, value)\n  emit('change', value)\n  if (props.validateEvent) {\n    formItem?.validate('change').catch((err) => debugWarn(err))\n  }\n  debounceSetShowPicker(false)\n  // check if modelValue change, if not change, then reset color.\n  nextTick(() => {\n    const newColor = new Color({\n      enableAlpha: props.showAlpha,\n      format: props.colorFormat || '',\n      value: props.modelValue,\n    })\n    if (!color.compare(newColor)) {\n      resetColor()\n    }\n  })\n}\n\nfunction clear() {\n  debounceSetShowPicker(false)\n  emit(UPDATE_MODEL_EVENT, null)\n  emit('change', null)\n  if (props.modelValue !== null && props.validateEvent) {\n    formItem?.validate('change').catch((err) => debugWarn(err))\n  }\n  resetColor()\n}\n\nonMounted(() => {\n  if (props.modelValue) {\n    customInput.value = currentColor.value\n  }\n})\n\nwatch(\n  () => props.modelValue,\n  (newVal) => {\n    if (!newVal) {\n      showPanelColor.value = false\n    } else if (newVal && newVal !== color.value) {\n      shouldActiveChange = false\n      color.fromString(newVal)\n    }\n  }\n)\n\nwatch(\n  () => currentColor.value,\n  (val) => {\n    customInput.value = val\n    shouldActiveChange && emit('activeChange', val)\n    shouldActiveChange = true\n  }\n)\n\nwatch(\n  () => color.value,\n  () => {\n    if (!props.modelValue && !showPanelColor.value) {\n      showPanelColor.value = true\n    }\n  }\n)\n\nwatch(\n  () => showPicker.value,\n  () => {\n    nextTick(() => {\n      hue.value?.update()\n      sv.value?.update()\n      alpha.value?.update()\n    })\n  }\n)\n\nprovide(colorPickerContextKey, {\n  currentColor,\n})\n\ndefineExpose({\n  color,\n})\n</script>\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}