{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.array.push.js\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar AsyncValidator = require('async-validator');\nvar lodashUnified = require('lodash-unified');\nvar core = require('@vueuse/core');\nrequire('../../../utils/index.js');\nrequire('../../../tokens/index.js');\nrequire('../../../hooks/index.js');\nvar formItem = require('./form-item.js');\nvar formLabelWrap = require('./form-label-wrap.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar form = require('../../../tokens/form.js');\nvar index = require('../../../hooks/use-common-props/index.js');\nvar index$1 = require('../../../hooks/use-namespace/index.js');\nvar index$2 = require('../../../hooks/use-id/index.js');\nvar style = require('../../../utils/dom/style.js');\nvar shared = require('@vue/shared');\nvar objects = require('../../../utils/objects.js');\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\nvar AsyncValidator__default = /*#__PURE__*/_interopDefaultLegacy(AsyncValidator);\nconst _hoisted_1 = [\"role\", \"aria-labelledby\"];\nconst __default__ = vue.defineComponent({\n  name: \"ElFormItem\"\n});\nconst _sfc_main = /* @__PURE__ */vue.defineComponent({\n  ...__default__,\n  props: formItem.formItemProps,\n  setup(__props, {\n    expose\n  }) {\n    const props = __props;\n    const slots = vue.useSlots();\n    const formContext = vue.inject(form.formContextKey, void 0);\n    const parentFormItemContext = vue.inject(form.formItemContextKey, void 0);\n    const _size = index.useSize(void 0, {\n      formItem: false\n    });\n    const ns = index$1.useNamespace(\"form-item\");\n    const labelId = index$2.useId().value;\n    const inputIds = vue.ref([]);\n    const validateState = vue.ref(\"\");\n    const validateStateDebounced = core.refDebounced(validateState, 100);\n    const validateMessage = vue.ref(\"\");\n    const formItemRef = vue.ref();\n    let initialValue = void 0;\n    let isResettingField = false;\n    const labelStyle = vue.computed(() => {\n      if ((formContext == null ? void 0 : formContext.labelPosition) === \"top\") {\n        return {};\n      }\n      const labelWidth = style.addUnit(props.labelWidth || (formContext == null ? void 0 : formContext.labelWidth) || \"\");\n      if (labelWidth) return {\n        width: labelWidth\n      };\n      return {};\n    });\n    const contentStyle = vue.computed(() => {\n      if ((formContext == null ? void 0 : formContext.labelPosition) === \"top\" || (formContext == null ? void 0 : formContext.inline)) {\n        return {};\n      }\n      if (!props.label && !props.labelWidth && isNested) {\n        return {};\n      }\n      const labelWidth = style.addUnit(props.labelWidth || (formContext == null ? void 0 : formContext.labelWidth) || \"\");\n      if (!props.label && !slots.label) {\n        return {\n          marginLeft: labelWidth\n        };\n      }\n      return {};\n    });\n    const formItemClasses = vue.computed(() => [ns.b(), ns.m(_size.value), ns.is(\"error\", validateState.value === \"error\"), ns.is(\"validating\", validateState.value === \"validating\"), ns.is(\"success\", validateState.value === \"success\"), ns.is(\"required\", isRequired.value || props.required), ns.is(\"no-asterisk\", formContext == null ? void 0 : formContext.hideRequiredAsterisk), (formContext == null ? void 0 : formContext.requireAsteriskPosition) === \"right\" ? \"asterisk-right\" : \"asterisk-left\", {\n      [ns.m(\"feedback\")]: formContext == null ? void 0 : formContext.statusIcon\n    }]);\n    const _inlineMessage = vue.computed(() => core.isBoolean(props.inlineMessage) ? props.inlineMessage : (formContext == null ? void 0 : formContext.inlineMessage) || false);\n    const validateClasses = vue.computed(() => [ns.e(\"error\"), {\n      [ns.em(\"error\", \"inline\")]: _inlineMessage.value\n    }]);\n    const propString = vue.computed(() => {\n      if (!props.prop) return \"\";\n      return shared.isString(props.prop) ? props.prop : props.prop.join(\".\");\n    });\n    const hasLabel = vue.computed(() => {\n      return !!(props.label || slots.label);\n    });\n    const labelFor = vue.computed(() => {\n      return props.for || inputIds.value.length === 1 ? inputIds.value[0] : void 0;\n    });\n    const isGroup = vue.computed(() => {\n      return !labelFor.value && hasLabel.value;\n    });\n    const isNested = !!parentFormItemContext;\n    const fieldValue = vue.computed(() => {\n      const model = formContext == null ? void 0 : formContext.model;\n      if (!model || !props.prop) {\n        return;\n      }\n      return objects.getProp(model, props.prop).value;\n    });\n    const normalizedRules = vue.computed(() => {\n      const {\n        required\n      } = props;\n      const rules = [];\n      if (props.rules) {\n        rules.push(...lodashUnified.castArray(props.rules));\n      }\n      const formRules = formContext == null ? void 0 : formContext.rules;\n      if (formRules && props.prop) {\n        const _rules = objects.getProp(formRules, props.prop).value;\n        if (_rules) {\n          rules.push(...lodashUnified.castArray(_rules));\n        }\n      }\n      if (required !== void 0) {\n        const requiredRules = rules.map((rule, i) => [rule, i]).filter(([rule]) => Object.keys(rule).includes(\"required\"));\n        if (requiredRules.length > 0) {\n          for (const [rule, i] of requiredRules) {\n            if (rule.required === required) continue;\n            rules[i] = {\n              ...rule,\n              required\n            };\n          }\n        } else {\n          rules.push({\n            required\n          });\n        }\n      }\n      return rules;\n    });\n    const validateEnabled = vue.computed(() => normalizedRules.value.length > 0);\n    const getFilteredRule = trigger => {\n      const rules = normalizedRules.value;\n      return rules.filter(rule => {\n        if (!rule.trigger || !trigger) return true;\n        if (Array.isArray(rule.trigger)) {\n          return rule.trigger.includes(trigger);\n        } else {\n          return rule.trigger === trigger;\n        }\n      }).map(({\n        trigger: trigger2,\n        ...rule\n      }) => rule);\n    };\n    const isRequired = vue.computed(() => normalizedRules.value.some(rule => rule.required));\n    const shouldShowError = vue.computed(() => {\n      var _a;\n      return validateStateDebounced.value === \"error\" && props.showMessage && ((_a = formContext == null ? void 0 : formContext.showMessage) != null ? _a : true);\n    });\n    const currentLabel = vue.computed(() => `${props.label || \"\"}${(formContext == null ? void 0 : formContext.labelSuffix) || \"\"}`);\n    const setValidationState = state => {\n      validateState.value = state;\n    };\n    const onValidationFailed = error => {\n      var _a, _b;\n      const {\n        errors,\n        fields\n      } = error;\n      if (!errors || !fields) {\n        console.error(error);\n      }\n      setValidationState(\"error\");\n      validateMessage.value = errors ? (_b = (_a = errors == null ? void 0 : errors[0]) == null ? void 0 : _a.message) != null ? _b : `${props.prop} is required` : \"\";\n      formContext == null ? void 0 : formContext.emit(\"validate\", props.prop, false, validateMessage.value);\n    };\n    const onValidationSucceeded = () => {\n      setValidationState(\"success\");\n      formContext == null ? void 0 : formContext.emit(\"validate\", props.prop, true, \"\");\n    };\n    const doValidate = async rules => {\n      const modelName = propString.value;\n      const validator = new AsyncValidator__default[\"default\"]({\n        [modelName]: rules\n      });\n      return validator.validate({\n        [modelName]: fieldValue.value\n      }, {\n        firstFields: true\n      }).then(() => {\n        onValidationSucceeded();\n        return true;\n      }).catch(err => {\n        onValidationFailed(err);\n        return Promise.reject(err);\n      });\n    };\n    const validate = async (trigger, callback) => {\n      if (isResettingField || !props.prop) {\n        return false;\n      }\n      const hasCallback = shared.isFunction(callback);\n      if (!validateEnabled.value) {\n        callback == null ? void 0 : callback(false);\n        return false;\n      }\n      const rules = getFilteredRule(trigger);\n      if (rules.length === 0) {\n        callback == null ? void 0 : callback(true);\n        return true;\n      }\n      setValidationState(\"validating\");\n      return doValidate(rules).then(() => {\n        callback == null ? void 0 : callback(true);\n        return true;\n      }).catch(err => {\n        const {\n          fields\n        } = err;\n        callback == null ? void 0 : callback(false, fields);\n        return hasCallback ? false : Promise.reject(fields);\n      });\n    };\n    const clearValidate = () => {\n      setValidationState(\"\");\n      validateMessage.value = \"\";\n      isResettingField = false;\n    };\n    const resetField = async () => {\n      const model = formContext == null ? void 0 : formContext.model;\n      if (!model || !props.prop) return;\n      const computedValue = objects.getProp(model, props.prop);\n      isResettingField = true;\n      computedValue.value = lodashUnified.clone(initialValue);\n      await vue.nextTick();\n      clearValidate();\n      isResettingField = false;\n    };\n    const addInputId = id => {\n      if (!inputIds.value.includes(id)) {\n        inputIds.value.push(id);\n      }\n    };\n    const removeInputId = id => {\n      inputIds.value = inputIds.value.filter(listId => listId !== id);\n    };\n    vue.watch(() => props.error, val => {\n      validateMessage.value = val || \"\";\n      setValidationState(val ? \"error\" : \"\");\n    }, {\n      immediate: true\n    });\n    vue.watch(() => props.validateStatus, val => setValidationState(val || \"\"));\n    const context = vue.reactive({\n      ...vue.toRefs(props),\n      $el: formItemRef,\n      size: _size,\n      validateState,\n      labelId,\n      inputIds,\n      isGroup,\n      hasLabel,\n      addInputId,\n      removeInputId,\n      resetField,\n      clearValidate,\n      validate\n    });\n    vue.provide(form.formItemContextKey, context);\n    vue.onMounted(() => {\n      if (props.prop) {\n        formContext == null ? void 0 : formContext.addField(context);\n        initialValue = lodashUnified.clone(fieldValue.value);\n      }\n    });\n    vue.onBeforeUnmount(() => {\n      formContext == null ? void 0 : formContext.removeField(context);\n    });\n    expose({\n      size: _size,\n      validateMessage,\n      validateState,\n      validate,\n      clearValidate,\n      resetField\n    });\n    return (_ctx, _cache) => {\n      var _a;\n      return vue.openBlock(), vue.createElementBlock(\"div\", {\n        ref_key: \"formItemRef\",\n        ref: formItemRef,\n        class: vue.normalizeClass(vue.unref(formItemClasses)),\n        role: vue.unref(isGroup) ? \"group\" : void 0,\n        \"aria-labelledby\": vue.unref(isGroup) ? vue.unref(labelId) : void 0\n      }, [vue.createVNode(vue.unref(formLabelWrap[\"default\"]), {\n        \"is-auto-width\": vue.unref(labelStyle).width === \"auto\",\n        \"update-all\": ((_a = vue.unref(formContext)) == null ? void 0 : _a.labelWidth) === \"auto\"\n      }, {\n        default: vue.withCtx(() => [vue.unref(hasLabel) ? (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(vue.unref(labelFor) ? \"label\" : \"div\"), {\n          key: 0,\n          id: vue.unref(labelId),\n          for: vue.unref(labelFor),\n          class: vue.normalizeClass(vue.unref(ns).e(\"label\")),\n          style: vue.normalizeStyle(vue.unref(labelStyle))\n        }, {\n          default: vue.withCtx(() => [vue.renderSlot(_ctx.$slots, \"label\", {\n            label: vue.unref(currentLabel)\n          }, () => [vue.createTextVNode(vue.toDisplayString(vue.unref(currentLabel)), 1)])]),\n          _: 3\n        }, 8, [\"id\", \"for\", \"class\", \"style\"])) : vue.createCommentVNode(\"v-if\", true)]),\n        _: 3\n      }, 8, [\"is-auto-width\", \"update-all\"]), vue.createElementVNode(\"div\", {\n        class: vue.normalizeClass(vue.unref(ns).e(\"content\")),\n        style: vue.normalizeStyle(vue.unref(contentStyle))\n      }, [vue.renderSlot(_ctx.$slots, \"default\"), vue.createVNode(vue.Transition, {\n        name: `${vue.unref(ns).namespace.value}-zoom-in-top`\n      }, {\n        default: vue.withCtx(() => [vue.unref(shouldShowError) ? vue.renderSlot(_ctx.$slots, \"error\", {\n          key: 0,\n          error: validateMessage.value\n        }, () => [vue.createElementVNode(\"div\", {\n          class: vue.normalizeClass(vue.unref(validateClasses))\n        }, vue.toDisplayString(validateMessage.value), 3)]) : vue.createCommentVNode(\"v-if\", true)]),\n        _: 3\n      }, 8, [\"name\"])], 6)], 10, _hoisted_1);\n    };\n  }\n});\nvar FormItem = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/form/src/form-item.vue\"]]);\nexports[\"default\"] = FormItem;","map":{"version":3,"mappings":"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","names":["name","slots","useSlots","inject","_size","useSize","formItem","useNamespace","useId","ref","refDebounced","formItemRef","initialValue","isResettingField","computed","formContext","labelWidth","addUnit","width","props","isNested","label","marginLeft","ns","b","m","value","is","isRequired","required","isBoolean","inlineMessage","e","_inlineMessage","prop","for","inputIds","length","labelFor","hasLabel","parentFormItemContext","model","getProp","rules","push","ensureArray","formRules","_rules","map","rule","i","filter","keys","includes","requiredRules","validateEnabled","normalizedRules","trigger","Array","some","state","validateState","errors","fields","console","setValidationState","validateMessage","doValidate","firstFields","onValidationSucceeded","onValidationFailed","err","callback","computedValue","clearValidate","watch","error","immediate","$el","size","labelId","isGroup","addInputId","removeInputId","resetField","validate","provide","onMounted","onBeforeUnmount","expose"],"sources":["../../../../../../packages/components/form/src/form-item.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"formItemRef\"\n    :class=\"formItemClasses\"\n    :role=\"isGroup ? 'group' : undefined\"\n    :aria-labelledby=\"isGroup ? labelId : undefined\"\n  >\n    <form-label-wrap\n      :is-auto-width=\"labelStyle.width === 'auto'\"\n      :update-all=\"formContext?.labelWidth === 'auto'\"\n    >\n      <component\n        :is=\"labelFor ? 'label' : 'div'\"\n        v-if=\"hasLabel\"\n        :id=\"labelId\"\n        :for=\"labelFor\"\n        :class=\"ns.e('label')\"\n        :style=\"labelStyle\"\n      >\n        <slot name=\"label\" :label=\"currentLabel\">\n          {{ currentLabel }}\n        </slot>\n      </component>\n    </form-label-wrap>\n\n    <div :class=\"ns.e('content')\" :style=\"contentStyle\">\n      <slot />\n      <transition :name=\"`${ns.namespace.value}-zoom-in-top`\">\n        <slot v-if=\"shouldShowError\" name=\"error\" :error=\"validateMessage\">\n          <div :class=\"validateClasses\">\n            {{ validateMessage }}\n          </div>\n        </slot>\n      </transition>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport {\n  computed,\n  inject,\n  nextTick,\n  onBeforeUnmount,\n  onMounted,\n  provide,\n  reactive,\n  ref,\n  toRefs,\n  useSlots,\n  watch,\n} from 'vue'\nimport AsyncValidator from 'async-validator'\nimport { clone } from 'lodash-unified'\nimport { refDebounced } from '@vueuse/core'\nimport {\n  addUnit,\n  ensureArray,\n  getProp,\n  isBoolean,\n  isFunction,\n  isString,\n} from '@element-plus/utils'\nimport { formContextKey, formItemContextKey } from '@element-plus/tokens'\nimport { useId, useNamespace, useSize } from '@element-plus/hooks'\nimport { formItemProps } from './form-item'\nimport FormLabelWrap from './form-label-wrap'\n\nimport type { CSSProperties } from 'vue'\nimport type { RuleItem } from 'async-validator'\nimport type {\n  FormItemContext,\n  FormItemRule,\n  FormValidateFailure,\n} from '@element-plus/tokens'\nimport type { Arrayable } from '@element-plus/utils'\nimport type { FormItemValidateState } from './form-item'\n\ndefineOptions({\n  name: 'ElFormItem',\n})\nconst props = defineProps(formItemProps)\nconst slots = useSlots()\n\nconst formContext = inject(formContextKey, undefined)\nconst parentFormItemContext = inject(formItemContextKey, undefined)\n\nconst _size = useSize(undefined, { formItem: false })\nconst ns = useNamespace('form-item')\n\nconst labelId = useId().value\nconst inputIds = ref<string[]>([])\n\nconst validateState = ref<FormItemValidateState>('')\nconst validateStateDebounced = refDebounced(validateState, 100)\nconst validateMessage = ref('')\nconst formItemRef = ref<HTMLDivElement>()\n// special inline value.\nlet initialValue: any = undefined\nlet isResettingField = false\n\nconst labelStyle = computed<CSSProperties>(() => {\n  if (formContext?.labelPosition === 'top') {\n    return {}\n  }\n\n  const labelWidth = addUnit(props.labelWidth || formContext?.labelWidth || '')\n  if (labelWidth) return { width: labelWidth }\n  return {}\n})\n\nconst contentStyle = computed<CSSProperties>(() => {\n  if (formContext?.labelPosition === 'top' || formContext?.inline) {\n    return {}\n  }\n  if (!props.label && !props.labelWidth && isNested) {\n    return {}\n  }\n  const labelWidth = addUnit(props.labelWidth || formContext?.labelWidth || '')\n  if (!props.label && !slots.label) {\n    return { marginLeft: labelWidth }\n  }\n  return {}\n})\n\nconst formItemClasses = computed(() => [\n  ns.b(),\n  ns.m(_size.value),\n  ns.is('error', validateState.value === 'error'),\n  ns.is('validating', validateState.value === 'validating'),\n  ns.is('success', validateState.value === 'success'),\n  ns.is('required', isRequired.value || props.required),\n  ns.is('no-asterisk', formContext?.hideRequiredAsterisk),\n  formContext?.requireAsteriskPosition === 'right'\n    ? 'asterisk-right'\n    : 'asterisk-left',\n  { [ns.m('feedback')]: formContext?.statusIcon },\n])\n\nconst _inlineMessage = computed(() =>\n  isBoolean(props.inlineMessage)\n    ? props.inlineMessage\n    : formContext?.inlineMessage || false\n)\n\nconst validateClasses = computed(() => [\n  ns.e('error'),\n  { [ns.em('error', 'inline')]: _inlineMessage.value },\n])\n\nconst propString = computed(() => {\n  if (!props.prop) return ''\n  return isString(props.prop) ? props.prop : props.prop.join('.')\n})\n\nconst hasLabel = computed<boolean>(() => {\n  return !!(props.label || slots.label)\n})\n\nconst labelFor = computed<string | undefined>(() => {\n  return props.for || inputIds.value.length === 1\n    ? inputIds.value[0]\n    : undefined\n})\n\nconst isGroup = computed<boolean>(() => {\n  return !labelFor.value && hasLabel.value\n})\n\nconst isNested = !!parentFormItemContext\n\nconst fieldValue = computed(() => {\n  const model = formContext?.model\n  if (!model || !props.prop) {\n    return\n  }\n  return getProp(model, props.prop).value\n})\n\nconst normalizedRules = computed(() => {\n  const { required } = props\n\n  const rules: FormItemRule[] = []\n\n  if (props.rules) {\n    rules.push(...ensureArray(props.rules))\n  }\n\n  const formRules = formContext?.rules\n  if (formRules && props.prop) {\n    const _rules = getProp<Arrayable<FormItemRule> | undefined>(\n      formRules,\n      props.prop\n    ).value\n    if (_rules) {\n      rules.push(...ensureArray(_rules))\n    }\n  }\n\n  if (required !== undefined) {\n    const requiredRules = rules\n      .map((rule, i) => [rule, i] as const)\n      .filter(([rule]) => Object.keys(rule).includes('required'))\n\n    if (requiredRules.length > 0) {\n      for (const [rule, i] of requiredRules) {\n        if (rule.required === required) continue\n        rules[i] = { ...rule, required }\n      }\n    } else {\n      rules.push({ required })\n    }\n  }\n\n  return rules\n})\n\nconst validateEnabled = computed(() => normalizedRules.value.length > 0)\n\nconst getFilteredRule = (trigger: string) => {\n  const rules = normalizedRules.value\n  return (\n    rules\n      .filter((rule) => {\n        if (!rule.trigger || !trigger) return true\n        if (Array.isArray(rule.trigger)) {\n          return rule.trigger.includes(trigger)\n        } else {\n          return rule.trigger === trigger\n        }\n      })\n      // exclude trigger\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      .map(({ trigger, ...rule }): RuleItem => rule)\n  )\n}\n\nconst isRequired = computed(() =>\n  normalizedRules.value.some((rule) => rule.required)\n)\n\nconst shouldShowError = computed(\n  () =>\n    validateStateDebounced.value === 'error' &&\n    props.showMessage &&\n    (formContext?.showMessage ?? true)\n)\n\nconst currentLabel = computed(\n  () => `${props.label || ''}${formContext?.labelSuffix || ''}`\n)\n\nconst setValidationState = (state: FormItemValidateState) => {\n  validateState.value = state\n}\n\nconst onValidationFailed = (error: FormValidateFailure) => {\n  const { errors, fields } = error\n  if (!errors || !fields) {\n    console.error(error)\n  }\n\n  setValidationState('error')\n  validateMessage.value = errors\n    ? errors?.[0]?.message ?? `${props.prop} is required`\n    : ''\n\n  formContext?.emit('validate', props.prop!, false, validateMessage.value)\n}\n\nconst onValidationSucceeded = () => {\n  setValidationState('success')\n  formContext?.emit('validate', props.prop!, true, '')\n}\n\nconst doValidate = async (rules: RuleItem[]): Promise<true> => {\n  const modelName = propString.value\n  const validator = new AsyncValidator({\n    [modelName]: rules,\n  })\n  return validator\n    .validate({ [modelName]: fieldValue.value }, { firstFields: true })\n    .then(() => {\n      onValidationSucceeded()\n      return true as const\n    })\n    .catch((err: FormValidateFailure) => {\n      onValidationFailed(err as FormValidateFailure)\n      return Promise.reject(err)\n    })\n}\n\nconst validate: FormItemContext['validate'] = async (trigger, callback) => {\n  // skip validation if its resetting\n  if (isResettingField || !props.prop) {\n    return false\n  }\n\n  const hasCallback = isFunction(callback)\n  if (!validateEnabled.value) {\n    callback?.(false)\n    return false\n  }\n\n  const rules = getFilteredRule(trigger)\n  if (rules.length === 0) {\n    callback?.(true)\n    return true\n  }\n\n  setValidationState('validating')\n\n  return doValidate(rules)\n    .then(() => {\n      callback?.(true)\n      return true as const\n    })\n    .catch((err: FormValidateFailure) => {\n      const { fields } = err\n      callback?.(false, fields)\n      return hasCallback ? false : Promise.reject(fields)\n    })\n}\n\nconst clearValidate: FormItemContext['clearValidate'] = () => {\n  setValidationState('')\n  validateMessage.value = ''\n  isResettingField = false\n}\n\nconst resetField: FormItemContext['resetField'] = async () => {\n  const model = formContext?.model\n  if (!model || !props.prop) return\n\n  const computedValue = getProp(model, props.prop)\n\n  // prevent validation from being triggered\n  isResettingField = true\n\n  computedValue.value = clone(initialValue)\n\n  await nextTick()\n  clearValidate()\n\n  isResettingField = false\n}\n\nconst addInputId: FormItemContext['addInputId'] = (id: string) => {\n  if (!inputIds.value.includes(id)) {\n    inputIds.value.push(id)\n  }\n}\n\nconst removeInputId: FormItemContext['removeInputId'] = (id: string) => {\n  inputIds.value = inputIds.value.filter((listId) => listId !== id)\n}\n\nwatch(\n  () => props.error,\n  (val) => {\n    validateMessage.value = val || ''\n    setValidationState(val ? 'error' : '')\n  },\n  { immediate: true }\n)\n\nwatch(\n  () => props.validateStatus,\n  (val) => setValidationState(val || '')\n)\n\nconst context: FormItemContext = reactive({\n  ...toRefs(props),\n  $el: formItemRef,\n  size: _size,\n  validateState,\n  labelId,\n  inputIds,\n  isGroup,\n  hasLabel,\n  addInputId,\n  removeInputId,\n  resetField,\n  clearValidate,\n  validate,\n})\n\nprovide(formItemContextKey, context)\n\nonMounted(() => {\n  if (props.prop) {\n    formContext?.addField(context)\n    initialValue = clone(fieldValue.value)\n  }\n})\n\nonBeforeUnmount(() => {\n  formContext?.removeField(context)\n})\n\ndefineExpose({\n  /** @description form item size */\n  size: _size,\n  /** @description validation message */\n  validateMessage,\n  /** @description validation state */\n  validateState,\n  /** @description validate form item */\n  validate,\n  /** @description clear validation status */\n  clearValidate,\n  /** @description reset field value */\n  resetField,\n})\n</script>\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}