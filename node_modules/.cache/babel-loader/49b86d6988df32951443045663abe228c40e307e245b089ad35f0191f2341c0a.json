{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// The `loca` table stores the offsets to the locations of the glyphs in the font.\n// https://www.microsoft.com/typography/OTSPEC/loca.htm\n\nimport parse from '../parse';\n\n// Parse the `loca` table. This table stores the offsets to the locations of the glyphs in the font,\n// relative to the beginning of the glyphData table.\n// The number of glyphs stored in the `loca` table is specified in the `maxp` table (under numGlyphs)\n// The loca table has two versions: a short version where offsets are stored as uShorts, and a long\n// version where offsets are stored as uLongs. The `head` table specifies which version to use\n// (under indexToLocFormat).\nfunction parseLocaTable(data, start, numGlyphs, shortVersion) {\n  const p = new parse.Parser(data, start);\n  const parseFn = shortVersion ? p.parseUShort : p.parseULong;\n  // There is an extra entry after the last index element to compute the length of the last glyph.\n  // That's why we use numGlyphs + 1.\n  const glyphOffsets = [];\n  for (let i = 0; i < numGlyphs + 1; i += 1) {\n    let glyphOffset = parseFn.call(p);\n    if (shortVersion) {\n      // The short table version stores the actual offset divided by 2.\n      glyphOffset *= 2;\n    }\n    glyphOffsets.push(glyphOffset);\n  }\n  return glyphOffsets;\n}\nexport default {\n  parse: parseLocaTable\n};","map":{"version":3,"names":["parse","parseLocaTable","data","start","numGlyphs","shortVersion","p","Parser","parseFn","parseUShort","parseULong","glyphOffsets","i","glyphOffset","call","push"],"sources":["C:/Users/14486/Desktop/社区公益系统前端/vue_community/node_modules/_opentype.js@0.7.3@opentype.js/src/tables/loca.js"],"sourcesContent":["// The `loca` table stores the offsets to the locations of the glyphs in the font.\n// https://www.microsoft.com/typography/OTSPEC/loca.htm\n\nimport parse from '../parse';\n\n// Parse the `loca` table. This table stores the offsets to the locations of the glyphs in the font,\n// relative to the beginning of the glyphData table.\n// The number of glyphs stored in the `loca` table is specified in the `maxp` table (under numGlyphs)\n// The loca table has two versions: a short version where offsets are stored as uShorts, and a long\n// version where offsets are stored as uLongs. The `head` table specifies which version to use\n// (under indexToLocFormat).\nfunction parseLocaTable(data, start, numGlyphs, shortVersion) {\n    const p = new parse.Parser(data, start);\n    const parseFn = shortVersion ? p.parseUShort : p.parseULong;\n    // There is an extra entry after the last index element to compute the length of the last glyph.\n    // That's why we use numGlyphs + 1.\n    const glyphOffsets = [];\n    for (let i = 0; i < numGlyphs + 1; i += 1) {\n        let glyphOffset = parseFn.call(p);\n        if (shortVersion) {\n            // The short table version stores the actual offset divided by 2.\n            glyphOffset *= 2;\n        }\n\n        glyphOffsets.push(glyphOffset);\n    }\n\n    return glyphOffsets;\n}\n\nexport default { parse: parseLocaTable };\n"],"mappings":";AAAA;AACA;;AAEA,OAAOA,KAAK,MAAM,UAAU;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,cAAc,CAACC,IAAI,EAAEC,KAAK,EAAEC,SAAS,EAAEC,YAAY,EAAE;EAC1D,MAAMC,CAAC,GAAG,IAAIN,KAAK,CAACO,MAAM,CAACL,IAAI,EAAEC,KAAK,CAAC;EACvC,MAAMK,OAAO,GAAGH,YAAY,GAAGC,CAAC,CAACG,WAAW,GAAGH,CAAC,CAACI,UAAU;EAC3D;EACA;EACA,MAAMC,YAAY,GAAG,EAAE;EACvB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,SAAS,GAAG,CAAC,EAAEQ,CAAC,IAAI,CAAC,EAAE;IACvC,IAAIC,WAAW,GAAGL,OAAO,CAACM,IAAI,CAACR,CAAC,CAAC;IACjC,IAAID,YAAY,EAAE;MACd;MACAQ,WAAW,IAAI,CAAC;IACpB;IAEAF,YAAY,CAACI,IAAI,CAACF,WAAW,CAAC;EAClC;EAEA,OAAOF,YAAY;AACvB;AAEA,eAAe;EAAEX,KAAK,EAAEC;AAAe,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}