{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.array.push.js\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nfunction useNodeExpandEventBroadcast(props) {\n  const parentNodeMap = vue.inject(\"TreeNodeMap\", null);\n  const currentNodeMap = {\n    treeNodeExpand: node => {\n      if (props.node !== node) {\n        props.node.collapse();\n      }\n    },\n    children: []\n  };\n  if (parentNodeMap) {\n    parentNodeMap.children.push(currentNodeMap);\n  }\n  vue.provide(\"TreeNodeMap\", currentNodeMap);\n  return {\n    broadcastExpanded: node => {\n      if (!props.accordion) return;\n      for (const childNode of currentNodeMap.children) {\n        childNode.treeNodeExpand(node);\n      }\n    }\n  };\n}\nexports.useNodeExpandEventBroadcast = useNodeExpandEventBroadcast;","map":{"version":3,"mappings":";;;;;;;AACO,SAASA,2BAA2B,CAACC,KAAK,EAAE;EACjD,MAAMC,aAAa,GAAGC,UAAM,CAAC,aAAa,EAAE,IAAI,CAAC;EACjD,MAAMC,cAAc,GAAG;IACrBC,cAAc,EAAGC,IAAI,IAAK;MACxB,IAAIL,KAAK,CAACK,IAAI,KAAKA,IAAI,EAAE;QACvBL,KAAK,CAACK,IAAI,CAACC,QAAQ,EAAE;MAC7B;IACA,CAAK;IACDC,QAAQ,EAAE;EACd,CAAG;EACD,IAAIN,aAAa,EAAE;IACjBA,aAAa,CAACM,QAAQ,CAACC,IAAI,CAACL,cAAc,CAAC;EAC/C;EACEM,WAAO,CAAC,aAAa,EAAEN,cAAc,CAAC;EACtC,OAAO;IACLO,iBAAiB,EAAGL,IAAI,IAAK;MAC3B,IAAI,CAACL,KAAK,CAACW,SAAS,EAClB;MACF,KAAK,MAAMC,SAAS,IAAIT,cAAc,CAACI,QAAQ,EAAE;QAC/CK,SAAS,CAACR,cAAc,CAACC,IAAI,CAAC;MACtC;IACA;EACA,CAAG;AACH","names":["useNodeExpandEventBroadcast","props","parentNodeMap","inject","currentNodeMap","treeNodeExpand","node","collapse","children","push","provide","broadcastExpanded","accordion","childNode"],"sources":["../../../../../../../packages/components/tree/src/model/useNodeExpandEventBroadcast.ts"],"sourcesContent":["// @ts-nocheck\nimport { inject, provide } from 'vue'\nimport type Node from '../model/node'\n\ninterface NodeMap {\n  treeNodeExpand(node: Node): void\n  children: NodeMap[]\n}\n\nexport function useNodeExpandEventBroadcast(props) {\n  const parentNodeMap = inject<NodeMap>('TreeNodeMap', null)\n  const currentNodeMap: NodeMap = {\n    treeNodeExpand: (node) => {\n      if (props.node !== node) {\n        props.node.collapse()\n      }\n    },\n    children: [],\n  }\n\n  if (parentNodeMap) {\n    parentNodeMap.children.push(currentNodeMap)\n  }\n\n  provide('TreeNodeMap', currentNodeMap)\n\n  return {\n    broadcastExpanded: (node: Node): void => {\n      if (!props.accordion) return\n      for (const childNode of currentNodeMap.children) {\n        childNode.treeNodeExpand(node)\n      }\n    },\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}