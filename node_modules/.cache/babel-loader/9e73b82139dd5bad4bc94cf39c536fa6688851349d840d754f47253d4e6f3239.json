{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.array.push.js\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar dayjs = require('dayjs');\nvar customParseFormat = require('dayjs/plugin/customParseFormat.js');\nvar index = require('../../select/index.js');\nvar index$3 = require('../../icon/index.js');\nrequire('../../../hooks/index.js');\nvar timeSelect = require('./time-select.js');\nvar utils = require('./utils.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar index$1 = require('../../../hooks/use-namespace/index.js');\nvar index$2 = require('../../../hooks/use-common-props/index.js');\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\nvar dayjs__default = /*#__PURE__*/_interopDefaultLegacy(dayjs);\nvar customParseFormat__default = /*#__PURE__*/_interopDefaultLegacy(customParseFormat);\nconst __default__ = vue.defineComponent({\n  name: \"ElTimeSelect\"\n});\nconst _sfc_main = /* @__PURE__ */vue.defineComponent({\n  ...__default__,\n  props: timeSelect.timeSelectProps,\n  emits: [\"change\", \"blur\", \"focus\", \"update:modelValue\"],\n  setup(__props, {\n    expose\n  }) {\n    const props = __props;\n    dayjs__default[\"default\"].extend(customParseFormat__default[\"default\"]);\n    const {\n      Option: ElOption\n    } = index.ElSelect;\n    const nsInput = index$1.useNamespace(\"input\");\n    const select = vue.ref();\n    const _disabled = index$2.useDisabled();\n    const value = vue.computed(() => props.modelValue);\n    const start = vue.computed(() => {\n      const time = utils.parseTime(props.start);\n      return time ? utils.formatTime(time) : null;\n    });\n    const end = vue.computed(() => {\n      const time = utils.parseTime(props.end);\n      return time ? utils.formatTime(time) : null;\n    });\n    const step = vue.computed(() => {\n      const time = utils.parseTime(props.step);\n      return time ? utils.formatTime(time) : null;\n    });\n    const minTime = vue.computed(() => {\n      const time = utils.parseTime(props.minTime || \"\");\n      return time ? utils.formatTime(time) : null;\n    });\n    const maxTime = vue.computed(() => {\n      const time = utils.parseTime(props.maxTime || \"\");\n      return time ? utils.formatTime(time) : null;\n    });\n    const items = vue.computed(() => {\n      const result = [];\n      if (props.start && props.end && props.step) {\n        let current = start.value;\n        let currentTime;\n        while (current && end.value && utils.compareTime(current, end.value) <= 0) {\n          currentTime = dayjs__default[\"default\"](current, \"HH:mm\").format(props.format);\n          result.push({\n            value: currentTime,\n            disabled: utils.compareTime(current, minTime.value || \"-1:-1\") <= 0 || utils.compareTime(current, maxTime.value || \"100:100\") >= 0\n          });\n          current = utils.nextTime(current, step.value);\n        }\n      }\n      return result;\n    });\n    const blur = () => {\n      var _a, _b;\n      (_b = (_a = select.value) == null ? void 0 : _a.blur) == null ? void 0 : _b.call(_a);\n    };\n    const focus = () => {\n      var _a, _b;\n      (_b = (_a = select.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a);\n    };\n    expose({\n      blur,\n      focus\n    });\n    return (_ctx, _cache) => {\n      return vue.openBlock(), vue.createBlock(vue.unref(index.ElSelect), {\n        ref_key: \"select\",\n        ref: select,\n        \"model-value\": vue.unref(value),\n        disabled: vue.unref(_disabled),\n        clearable: _ctx.clearable,\n        \"clear-icon\": _ctx.clearIcon,\n        size: _ctx.size,\n        effect: _ctx.effect,\n        placeholder: _ctx.placeholder,\n        \"default-first-option\": \"\",\n        filterable: _ctx.editable,\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = event => _ctx.$emit(\"update:modelValue\", event)),\n        onChange: _cache[1] || (_cache[1] = event => _ctx.$emit(\"change\", event)),\n        onBlur: _cache[2] || (_cache[2] = event => _ctx.$emit(\"blur\", event)),\n        onFocus: _cache[3] || (_cache[3] = event => _ctx.$emit(\"focus\", event))\n      }, {\n        prefix: vue.withCtx(() => [_ctx.prefixIcon ? (vue.openBlock(), vue.createBlock(vue.unref(index$3.ElIcon), {\n          key: 0,\n          class: vue.normalizeClass(vue.unref(nsInput).e(\"prefix-icon\"))\n        }, {\n          default: vue.withCtx(() => [(vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.prefixIcon)))]),\n          _: 1\n        }, 8, [\"class\"])) : vue.createCommentVNode(\"v-if\", true)]),\n        default: vue.withCtx(() => [(vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(vue.unref(items), item => {\n          return vue.openBlock(), vue.createBlock(vue.unref(ElOption), {\n            key: item.value,\n            label: item.value,\n            value: item.value,\n            disabled: item.disabled\n          }, null, 8, [\"label\", \"value\", \"disabled\"]);\n        }), 128))]),\n        _: 1\n      }, 8, [\"model-value\", \"disabled\", \"clearable\", \"clear-icon\", \"size\", \"effect\", \"placeholder\", \"filterable\"]);\n    };\n  }\n});\nvar TimeSelect = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/time-select/src/time-select.vue\"]]);\nexports[\"default\"] = TimeSelect;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;uCA8Cc;EACZA,IAAM;AACR;;;;;;;;;IANAC,0BAAMC,OAAOC,qCAAiB;IAExB;MAAEC,QAAQC;IAAa;IAUvB,gBAAUC,qBAAa,OAAO;IACpC,MAAMC,SAASC,OAAqB;IAEpC,MAAMC,YAAYC,mBAAY;IAE9B,MAAMC,KAAQ,gBAAS,MAAMC,MAAMC,UAAU;IACvC,cAAQC,aAAS,MAAM;MACrB,aAAOC,eAAU,OAAMC,KAAK;MAC3B,cAAOC,gBAAW,KAAI,CAAI;IAAA,CAClC;IAEK,YAAMH,aAAS,MAAM;MACnB,aAAOC,eAAU,OAAMG,GAAG;MACzB,cAAOD,gBAAW,KAAI,CAAI;IAAA,CAClC;IAEK,aAAOH,aAAS,MAAM;MACpB,aAAOC,eAAU,OAAMI,IAAI;MAC1B,cAAOF,gBAAW,KAAI,CAAI;IAAA,CAClC;IAEK,gBAAUH,aAAS,MAAM;MAC7B,MAAMM,IAAO,mBAAUR,KAAM,YAAW,EAAE;MACnC,cAAOK,gBAAW,KAAI,CAAI;IAAA,CAClC;IAEK,gBAAUH,aAAS,MAAM;MAC7B,MAAMM,IAAO,mBAAUR,KAAM,YAAW,EAAE;MACnC,cAAOK,gBAAW,KAAI,CAAI;IAAA,CAClC;IAEK,cAAQH,aAAS,MAAM;MAC3B,MAAMO,SAAiD,EAAC;MACxD,IAAIT,KAAM,UAASA,KAAM,QAAOA,MAAMO,IAAM;QAC1C,IAAIG,UAAUN,KAAM;QAChB;QACG,kBAAWE,IAAIP,KAAS,sBAAYW,SAASJ,GAAI,MAAK,KAAK,CAAG;UACnEK,cAActB,0BAAMqB,OAAS,SAAO,CAAE,QAAOV,MAAMY,MAAM;UACzDH,OAAOI,IAAK;YACVd,KAAO;YACPe,QACE,oBAAYJ,OAAS,UAAQX,KAAS,WAAO,CAAK,SAClDgB,iBAAY,UAASC,OAAQ,UAAS,SAAS,CAAK;UAAA,CACvD;UACSN,yBAASA,OAAS,OAAKX,KAAM;QAAA;MACzC;MAEK;IAAA,CACR;IAED,MAAMkB,OAAO,MAAM;MACjB;MACF;IAEA;IACE,oBAAsB;MACxB;MAEa;IAAA,CACX;IACAC;MACDD","names":["name","dayjs","extend","customParseFormat","Option","ElOption","useNamespace","select","ref","_disabled","useDisabled","value","props","modelValue","computed","parseTime","start","formatTime","end","step","time","result","current","currentTime","format","push","disabled","compareTime","maxTime","blur","expose"],"sources":["../../../../../../packages/components/time-select/src/time-select.vue"],"sourcesContent":["<template>\n  <el-select\n    ref=\"select\"\n    :model-value=\"value\"\n    :disabled=\"_disabled\"\n    :clearable=\"clearable\"\n    :clear-icon=\"clearIcon\"\n    :size=\"size\"\n    :effect=\"effect\"\n    :placeholder=\"placeholder\"\n    default-first-option\n    :filterable=\"editable\"\n    @update:model-value=\"(event) => $emit('update:modelValue', event)\"\n    @change=\"(event) => $emit('change', event)\"\n    @blur=\"(event) => $emit('blur', event)\"\n    @focus=\"(event) => $emit('focus', event)\"\n  >\n    <el-option\n      v-for=\"item in items\"\n      :key=\"item.value\"\n      :label=\"item.value\"\n      :value=\"item.value\"\n      :disabled=\"item.disabled\"\n    />\n    <template #prefix>\n      <el-icon v-if=\"prefixIcon\" :class=\"nsInput.e('prefix-icon')\">\n        <component :is=\"prefixIcon\" />\n      </el-icon>\n    </template>\n  </el-select>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, ref } from 'vue'\nimport dayjs from 'dayjs'\nimport customParseFormat from 'dayjs/plugin/customParseFormat.js'\nimport ElSelect from '@element-plus/components/select'\nimport ElIcon from '@element-plus/components/icon'\nimport { useDisabled, useNamespace } from '@element-plus/hooks'\nimport { timeSelectProps } from './time-select'\nimport { compareTime, formatTime, nextTime, parseTime } from './utils'\n\ndayjs.extend(customParseFormat)\n\nconst { Option: ElOption } = ElSelect\n\ndefineOptions({\n  name: 'ElTimeSelect',\n})\n\ndefineEmits(['change', 'blur', 'focus', 'update:modelValue'])\n\nconst props = defineProps(timeSelectProps)\n\nconst nsInput = useNamespace('input')\nconst select = ref<typeof ElSelect>()\n\nconst _disabled = useDisabled()\n\nconst value = computed(() => props.modelValue)\nconst start = computed(() => {\n  const time = parseTime(props.start)\n  return time ? formatTime(time) : null\n})\n\nconst end = computed(() => {\n  const time = parseTime(props.end)\n  return time ? formatTime(time) : null\n})\n\nconst step = computed(() => {\n  const time = parseTime(props.step)\n  return time ? formatTime(time) : null\n})\n\nconst minTime = computed(() => {\n  const time = parseTime(props.minTime || '')\n  return time ? formatTime(time) : null\n})\n\nconst maxTime = computed(() => {\n  const time = parseTime(props.maxTime || '')\n  return time ? formatTime(time) : null\n})\n\nconst items = computed(() => {\n  const result: { value: string; disabled: boolean }[] = []\n  if (props.start && props.end && props.step) {\n    let current = start.value\n    let currentTime: string\n    while (current && end.value && compareTime(current, end.value) <= 0) {\n      currentTime = dayjs(current, 'HH:mm').format(props.format)\n      result.push({\n        value: currentTime,\n        disabled:\n          compareTime(current, minTime.value || '-1:-1') <= 0 ||\n          compareTime(current, maxTime.value || '100:100') >= 0,\n      })\n      current = nextTime(current, step.value!)\n    }\n  }\n  return result\n})\n\nconst blur = () => {\n  select.value?.blur?.()\n}\n\nconst focus = () => {\n  select.value?.focus?.()\n}\n\ndefineExpose({\n  blur,\n  focus,\n})\n</script>\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}