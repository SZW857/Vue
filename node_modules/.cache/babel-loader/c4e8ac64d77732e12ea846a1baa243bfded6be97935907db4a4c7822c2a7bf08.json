{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nrequire('../../../hooks/index.js');\nvar index$1 = require('../../icon/index.js');\nvar iconsVue = require('@element-plus/icons-vue');\nvar item = require('./item.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar index = require('../../../hooks/use-namespace/index.js');\nconst __default__ = vue.defineComponent({\n  name: \"ElStep\"\n});\nconst _sfc_main = vue.defineComponent({\n  ...__default__,\n  props: item.stepProps,\n  setup(__props) {\n    const props = __props;\n    const ns = index.useNamespace(\"step\");\n    const index$2 = vue.ref(-1);\n    const lineStyle = vue.ref({});\n    const internalStatus = vue.ref(\"\");\n    const parent = vue.inject(\"ElSteps\");\n    const currentInstance = vue.getCurrentInstance();\n    vue.onMounted(() => {\n      vue.watch([() => parent.props.active, () => parent.props.processStatus, () => parent.props.finishStatus], ([active]) => {\n        updateStatus(active);\n      }, {\n        immediate: true\n      });\n    });\n    vue.onBeforeUnmount(() => {\n      parent.steps.value = parent.steps.value.filter(instance => instance.uid !== (currentInstance == null ? void 0 : currentInstance.uid));\n    });\n    const currentStatus = vue.computed(() => {\n      return props.status || internalStatus.value;\n    });\n    const prevStatus = vue.computed(() => {\n      const prevStep = parent.steps.value[index$2.value - 1];\n      return prevStep ? prevStep.currentStatus : \"wait\";\n    });\n    const isCenter = vue.computed(() => {\n      return parent.props.alignCenter;\n    });\n    const isVertical = vue.computed(() => {\n      return parent.props.direction === \"vertical\";\n    });\n    const isSimple = vue.computed(() => {\n      return parent.props.simple;\n    });\n    const stepsCount = vue.computed(() => {\n      return parent.steps.value.length;\n    });\n    const isLast = vue.computed(() => {\n      var _a;\n      return ((_a = parent.steps.value[stepsCount.value - 1]) == null ? void 0 : _a.uid) === (currentInstance == null ? void 0 : currentInstance.uid);\n    });\n    const space = vue.computed(() => {\n      return isSimple.value ? \"\" : parent.props.space;\n    });\n    const style = vue.computed(() => {\n      const style2 = {\n        flexBasis: typeof space.value === \"number\" ? `${space.value}px` : space.value ? space.value : `${100 / (stepsCount.value - (isCenter.value ? 0 : 1))}%`\n      };\n      if (isVertical.value) return style2;\n      if (isLast.value) {\n        style2.maxWidth = `${100 / stepsCount.value}%`;\n      }\n      return style2;\n    });\n    const setIndex = val => {\n      index$2.value = val;\n    };\n    const calcProgress = status => {\n      let step = 100;\n      const style2 = {};\n      style2.transitionDelay = `${150 * index$2.value}ms`;\n      if (status === parent.props.processStatus) {\n        step = 0;\n      } else if (status === \"wait\") {\n        step = 0;\n        style2.transitionDelay = `${-150 * index$2.value}ms`;\n      }\n      style2.borderWidth = step && !isSimple.value ? \"1px\" : 0;\n      style2[parent.props.direction === \"vertical\" ? \"height\" : \"width\"] = `${step}%`;\n      lineStyle.value = style2;\n    };\n    const updateStatus = activeIndex => {\n      if (activeIndex > index$2.value) {\n        internalStatus.value = parent.props.finishStatus;\n      } else if (activeIndex === index$2.value && prevStatus.value !== \"error\") {\n        internalStatus.value = parent.props.processStatus;\n      } else {\n        internalStatus.value = \"wait\";\n      }\n      const prevChild = parent.steps.value[index$2.value - 1];\n      if (prevChild) prevChild.calcProgress(internalStatus.value);\n    };\n    const stepItemState = vue.reactive({\n      uid: vue.computed(() => currentInstance == null ? void 0 : currentInstance.uid),\n      currentStatus,\n      setIndex,\n      calcProgress\n    });\n    parent.steps.value = [...parent.steps.value, stepItemState];\n    return (_ctx, _cache) => {\n      return vue.openBlock(), vue.createElementBlock(\"div\", {\n        style: vue.normalizeStyle(vue.unref(style)),\n        class: vue.normalizeClass([vue.unref(ns).b(), vue.unref(ns).is(vue.unref(isSimple) ? \"simple\" : vue.unref(parent).props.direction), vue.unref(ns).is(\"flex\", vue.unref(isLast) && !vue.unref(space) && !vue.unref(isCenter)), vue.unref(ns).is(\"center\", vue.unref(isCenter) && !vue.unref(isVertical) && !vue.unref(isSimple))])\n      }, [vue.createCommentVNode(\" icon & line \"), vue.createElementVNode(\"div\", {\n        class: vue.normalizeClass([vue.unref(ns).e(\"head\"), vue.unref(ns).is(vue.unref(currentStatus))])\n      }, [!vue.unref(isSimple) ? (vue.openBlock(), vue.createElementBlock(\"div\", {\n        key: 0,\n        class: vue.normalizeClass(vue.unref(ns).e(\"line\"))\n      }, [vue.createElementVNode(\"i\", {\n        class: vue.normalizeClass(vue.unref(ns).e(\"line-inner\")),\n        style: vue.normalizeStyle(lineStyle.value)\n      }, null, 6)], 2)) : vue.createCommentVNode(\"v-if\", true), vue.createElementVNode(\"div\", {\n        class: vue.normalizeClass([vue.unref(ns).e(\"icon\"), vue.unref(ns).is(_ctx.icon || _ctx.$slots.icon ? \"icon\" : \"text\")])\n      }, [vue.renderSlot(_ctx.$slots, \"icon\", {}, () => [_ctx.icon ? (vue.openBlock(), vue.createBlock(vue.unref(index$1.ElIcon), {\n        key: 0,\n        class: vue.normalizeClass(vue.unref(ns).e(\"icon-inner\"))\n      }, {\n        default: vue.withCtx(() => [(vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.icon)))]),\n        _: 1\n      }, 8, [\"class\"])) : vue.unref(currentStatus) === \"success\" ? (vue.openBlock(), vue.createBlock(vue.unref(index$1.ElIcon), {\n        key: 1,\n        class: vue.normalizeClass([vue.unref(ns).e(\"icon-inner\"), vue.unref(ns).is(\"status\")])\n      }, {\n        default: vue.withCtx(() => [vue.createVNode(vue.unref(iconsVue.Check))]),\n        _: 1\n      }, 8, [\"class\"])) : vue.unref(currentStatus) === \"error\" ? (vue.openBlock(), vue.createBlock(vue.unref(index$1.ElIcon), {\n        key: 2,\n        class: vue.normalizeClass([vue.unref(ns).e(\"icon-inner\"), vue.unref(ns).is(\"status\")])\n      }, {\n        default: vue.withCtx(() => [vue.createVNode(vue.unref(iconsVue.Close))]),\n        _: 1\n      }, 8, [\"class\"])) : !vue.unref(isSimple) ? (vue.openBlock(), vue.createElementBlock(\"div\", {\n        key: 3,\n        class: vue.normalizeClass(vue.unref(ns).e(\"icon-inner\"))\n      }, vue.toDisplayString(index$2.value + 1), 3)) : vue.createCommentVNode(\"v-if\", true)])], 2)], 2), vue.createCommentVNode(\" title & description \"), vue.createElementVNode(\"div\", {\n        class: vue.normalizeClass(vue.unref(ns).e(\"main\"))\n      }, [vue.createElementVNode(\"div\", {\n        class: vue.normalizeClass([vue.unref(ns).e(\"title\"), vue.unref(ns).is(vue.unref(currentStatus))])\n      }, [vue.renderSlot(_ctx.$slots, \"title\", {}, () => [vue.createTextVNode(vue.toDisplayString(_ctx.title), 1)])], 2), vue.unref(isSimple) ? (vue.openBlock(), vue.createElementBlock(\"div\", {\n        key: 0,\n        class: vue.normalizeClass(vue.unref(ns).e(\"arrow\"))\n      }, null, 2)) : (vue.openBlock(), vue.createElementBlock(\"div\", {\n        key: 1,\n        class: vue.normalizeClass([vue.unref(ns).e(\"description\"), vue.unref(ns).is(vue.unref(currentStatus))])\n      }, [vue.renderSlot(_ctx.$slots, \"description\", {}, () => [vue.createTextVNode(vue.toDisplayString(_ctx.description), 1)])], 2))], 2)], 6);\n    };\n  }\n});\nvar Step = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/steps/src/item.vue\"]]);\nexports[\"default\"] = Step;","map":{"version":3,"mappings":";;;;;;;;;;;;uCA8Fc;EACZA,IAAM;AACR;;;;;;IAGM,WAAKC,mBAAa,MAAM;IACxB,gBAAQC,QAAI,CAAE;IACd,kBAAYA,OAAI,GAAE;IAClB,uBAAiBA,QAAI,EAAE;IACvB,eAASC,WAAO,SAAS;IAC/B,MAAMC,kBAAkBC,sBAAmB;IAE3CC,cAAU,MAAM;MAEZC,WACE,MAAMC,OAAOC,KAAM,SACnB,MAAMD,OAAOC,KAAM,gBACnB,MAAMD,OAAOC,KAAM,cACrB,EACA,CAAC,CAACC,MAAY;QACZC,aAAaD,MAAM;MAAA,CAErB;QAAEE,SAAW;MAAA,CACf;IAAA,CACD;IAEDC,oBAAgB,MAAM;MACbL,aAAMM,KAAQ,UAAOC,KAAM,OAAMC,MACtC,CAACC,QAAa,aAASC,GAAQ,yBACjC;IAAA,CACD;IAEK,sBAAgBC,aAAS,MAAM;MAC5B,aAAMC,UAAUC,cAAe;IAAA,CACvC;IAEK,mBAAaF,aAAS,MAAM;MAChC,MAAMG,QAAW,UAAOP,KAAM,OAAMQ,QAAMT,KAAQ;MAC3C,kBAAWQ,SAASE,aAAgB;IAAA,CAC5C;IAEK,iBAAWL,aAAS,MAAM;MAC9B,OAAOX,OAAOC,KAAM;IAAA,CACrB;IAEK,mBAAaU,aAAS,MAAM;MACzB,cAAOV,MAAMgB,SAAc;IAAA,CACnC;IAEK,iBAAWN,aAAS,MAAM;MAC9B,OAAOX,OAAOC,KAAM;IAAA,CACrB;IAEK,mBAAaU,aAAS,MAAM;MACzB,cAAOJ,MAAMD,KAAM;IAAA,CAC3B;IAEK,eAASK,aAAS,MAAM;MAC5B;MACD;IAED,CAAM;IACJ,WAAgB,sBAAa;MAC9B;IAED,CAAM;IACJ,WAA6B;MAAA,eAElB;QAKXO;MACA;MAA6B,sBAC7B,aAAkB;MACV;QACRC;MACA;MACD;IAED,CAAM;IACJ,cAAc;MAChBJ;IAEA,CAAM;IACJ,MAAIK,YAAO;MACX;MACM;MACFD,sBAAkB,MAAM,GAAe;MAClC;QACTE;MACE,CAAO;QACDA;QACRF;MACA;MACAA,OAAMG,WAAa,oBAA2B;MAC9CH,aAAkB;MACpBI;IAEA,CAAM;IACA,gCAA2B;MACd;QAAqBV,cACX,qBAAe;MACxC,CAAe,iCAAe,CAAMP;QAC/BO;MACL;QACFA;MACA;MACI;MAAqB,eAC3BW;IAEA;IAA+B,MACxBC,aAAe;MACpBf;MACAM;MACAU;MACDN;IAED","names":["name","useNamespace","ref","inject","currentInstance","getCurrentInstance","onMounted","watch","parent","props","active","updateStatus","immediate","onBeforeUnmount","value","steps","filter","instance","uid","computed","status","internalStatus","prevStep","index","currentStatus","direction","flexBasis","style2","calcProgress","step","borderWidth","lineStyle","prevChild","stepItemState","setIndex"],"sources":["../../../../../../packages/components/steps/src/item.vue"],"sourcesContent":["<template>\n  <div\n    :style=\"style\"\n    :class=\"[\n      ns.b(),\n      ns.is(isSimple ? 'simple' : parent.props.direction),\n      ns.is('flex', isLast && !space && !isCenter),\n      ns.is('center', isCenter && !isVertical && !isSimple),\n    ]\"\n  >\n    <!-- icon & line -->\n    <div :class=\"[ns.e('head'), ns.is(currentStatus)]\">\n      <div v-if=\"!isSimple\" :class=\"ns.e('line')\">\n        <i :class=\"ns.e('line-inner')\" :style=\"lineStyle\" />\n      </div>\n\n      <div\n        :class=\"[ns.e('icon'), ns.is(icon || $slots.icon ? 'icon' : 'text')]\"\n      >\n        <slot name=\"icon\">\n          <el-icon v-if=\"icon\" :class=\"ns.e('icon-inner')\">\n            <component :is=\"icon\" />\n          </el-icon>\n          <el-icon\n            v-else-if=\"currentStatus === 'success'\"\n            :class=\"[ns.e('icon-inner'), ns.is('status')]\"\n          >\n            <Check />\n          </el-icon>\n          <el-icon\n            v-else-if=\"currentStatus === 'error'\"\n            :class=\"[ns.e('icon-inner'), ns.is('status')]\"\n          >\n            <Close />\n          </el-icon>\n          <div v-else-if=\"!isSimple\" :class=\"ns.e('icon-inner')\">\n            {{ index + 1 }}\n          </div>\n        </slot>\n      </div>\n    </div>\n    <!-- title & description -->\n    <div :class=\"ns.e('main')\">\n      <div :class=\"[ns.e('title'), ns.is(currentStatus)]\">\n        <slot name=\"title\">{{ title }}</slot>\n      </div>\n      <div v-if=\"isSimple\" :class=\"ns.e('arrow')\" />\n      <div v-else :class=\"[ns.e('description'), ns.is(currentStatus)]\">\n        <slot name=\"description\">{{ description }}</slot>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport {\n  computed,\n  getCurrentInstance,\n  inject,\n  onBeforeUnmount,\n  onMounted,\n  reactive,\n  ref,\n  watch,\n} from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { Check, Close } from '@element-plus/icons-vue'\nimport { stepProps } from './item'\n\nimport type { CSSProperties, Ref } from 'vue'\n\nexport interface IStepsProps {\n  space: number | string\n  active: number\n  direction: string\n  alignCenter: boolean\n  simple: boolean\n  finishStatus: string\n  processStatus: string\n}\n\nexport interface StepItemState {\n  uid: number | undefined\n  currentStatus: string\n  setIndex: (val: number) => void\n  calcProgress: (status: string) => void\n}\n\nexport interface IStepsInject {\n  props: IStepsProps\n  steps: Ref<StepItemState[]>\n}\n\ndefineOptions({\n  name: 'ElStep',\n})\n\nconst props = defineProps(stepProps)\nconst ns = useNamespace('step')\nconst index = ref(-1)\nconst lineStyle = ref({})\nconst internalStatus = ref('')\nconst parent = inject('ElSteps') as IStepsInject\nconst currentInstance = getCurrentInstance()\n\nonMounted(() => {\n  watch(\n    [\n      () => parent.props.active,\n      () => parent.props.processStatus,\n      () => parent.props.finishStatus,\n    ],\n    ([active]) => {\n      updateStatus(active)\n    },\n    { immediate: true }\n  )\n})\n\nonBeforeUnmount(() => {\n  parent.steps.value = parent.steps.value.filter(\n    (instance) => instance.uid !== currentInstance?.uid\n  )\n})\n\nconst currentStatus = computed(() => {\n  return props.status || internalStatus.value\n})\n\nconst prevStatus = computed(() => {\n  const prevStep = parent.steps.value[index.value - 1]\n  return prevStep ? prevStep.currentStatus : 'wait'\n})\n\nconst isCenter = computed(() => {\n  return parent.props.alignCenter\n})\n\nconst isVertical = computed(() => {\n  return parent.props.direction === 'vertical'\n})\n\nconst isSimple = computed(() => {\n  return parent.props.simple\n})\n\nconst stepsCount = computed(() => {\n  return parent.steps.value.length\n})\n\nconst isLast = computed(() => {\n  return parent.steps.value[stepsCount.value - 1]?.uid === currentInstance?.uid\n})\n\nconst space = computed(() => {\n  return isSimple.value ? '' : parent.props.space\n})\n\nconst style = computed(() => {\n  const style: CSSProperties = {\n    flexBasis:\n      typeof space.value === 'number'\n        ? `${space.value}px`\n        : space.value\n        ? space.value\n        : `${100 / (stepsCount.value - (isCenter.value ? 0 : 1))}%`,\n  }\n  if (isVertical.value) return style\n  if (isLast.value) {\n    style.maxWidth = `${100 / stepsCount.value}%`\n  }\n  return style\n})\n\nconst setIndex = (val: number) => {\n  index.value = val\n}\n\nconst calcProgress = (status: string) => {\n  let step = 100\n  const style: CSSProperties = {}\n  style.transitionDelay = `${150 * index.value}ms`\n  if (status === parent.props.processStatus) {\n    step = 0\n  } else if (status === 'wait') {\n    step = 0\n    style.transitionDelay = `${-150 * index.value}ms`\n  }\n  style.borderWidth = step && !isSimple.value ? '1px' : 0\n  style[parent.props.direction === 'vertical' ? 'height' : 'width'] = `${step}%`\n  lineStyle.value = style\n}\n\nconst updateStatus = (activeIndex: number) => {\n  if (activeIndex > index.value) {\n    internalStatus.value = parent.props.finishStatus\n  } else if (activeIndex === index.value && prevStatus.value !== 'error') {\n    internalStatus.value = parent.props.processStatus\n  } else {\n    internalStatus.value = 'wait'\n  }\n  const prevChild = parent.steps.value[index.value - 1]\n  if (prevChild) prevChild.calcProgress(internalStatus.value)\n}\n\nconst stepItemState = reactive({\n  uid: computed(() => currentInstance?.uid),\n  currentStatus,\n  setIndex,\n  calcProgress,\n})\n\nparent.steps.value = [...parent.steps.value, stepItemState]\n</script>\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}