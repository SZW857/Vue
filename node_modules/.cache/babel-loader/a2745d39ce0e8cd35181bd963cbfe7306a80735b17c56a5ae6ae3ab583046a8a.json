{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar index$1 = require('../../icon/index.js');\nrequire('../../../hooks/index.js');\nvar link = require('./link.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar index = require('../../../hooks/use-namespace/index.js');\nconst _hoisted_1 = [\"href\"];\nconst __default__ = vue.defineComponent({\n  name: \"ElLink\"\n});\nconst _sfc_main = /* @__PURE__ */vue.defineComponent({\n  ...__default__,\n  props: link.linkProps,\n  emits: link.linkEmits,\n  setup(__props, {\n    emit\n  }) {\n    const props = __props;\n    const ns = index.useNamespace(\"link\");\n    function handleClick(event) {\n      if (!props.disabled) emit(\"click\", event);\n    }\n    return (_ctx, _cache) => {\n      return vue.openBlock(), vue.createElementBlock(\"a\", {\n        class: vue.normalizeClass([vue.unref(ns).b(), vue.unref(ns).m(_ctx.type), vue.unref(ns).is(\"disabled\", _ctx.disabled), vue.unref(ns).is(\"underline\", _ctx.underline && !_ctx.disabled)]),\n        href: _ctx.disabled || !_ctx.href ? void 0 : _ctx.href,\n        onClick: handleClick\n      }, [_ctx.icon ? (vue.openBlock(), vue.createBlock(vue.unref(index$1.ElIcon), {\n        key: 0\n      }, {\n        default: vue.withCtx(() => [(vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.icon)))]),\n        _: 1\n      })) : vue.createCommentVNode(\"v-if\", true), _ctx.$slots.default ? (vue.openBlock(), vue.createElementBlock(\"span\", {\n        key: 1,\n        class: vue.normalizeClass(vue.unref(ns).e(\"inner\"))\n      }, [vue.renderSlot(_ctx.$slots, \"default\")], 2)) : vue.createCommentVNode(\"v-if\", true), _ctx.$slots.icon ? vue.renderSlot(_ctx.$slots, \"icon\", {\n        key: 2\n      }) : vue.createCommentVNode(\"v-if\", true)], 10, _hoisted_1);\n    };\n  }\n});\nvar Link = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/link/src/link.vue\"]]);\nexports[\"default\"] = Link;","map":{"version":3,"mappings":";;;;;;;;;;;;uCAyBc;EACZA,IAAM;AACR;;;;;;;;;IAIM,WAAKC,mBAAa,MAAM;IAE9B,qBAAqBC,KAAmB;MACtC,IAAI,CAACC,KAAM,WAAUC,KAAK,SAASF,KAAK;IAAA","names":["name","useNamespace","event","props","emit"],"sources":["../../../../../../packages/components/link/src/link.vue"],"sourcesContent":["<template>\n  <a\n    :class=\"[\n      ns.b(),\n      ns.m(type),\n      ns.is('disabled', disabled),\n      ns.is('underline', underline && !disabled),\n    ]\"\n    :href=\"disabled || !href ? undefined : href\"\n    @click=\"handleClick\"\n  >\n    <el-icon v-if=\"icon\"><component :is=\"icon\" /></el-icon>\n    <span v-if=\"$slots.default\" :class=\"ns.e('inner')\">\n      <slot />\n    </span>\n\n    <slot v-if=\"$slots.icon\" name=\"icon\" />\n  </a>\n</template>\n\n<script lang=\"ts\" setup>\nimport { ElIcon } from '@element-plus/components/icon'\nimport { useNamespace } from '@element-plus/hooks'\nimport { linkEmits, linkProps } from './link'\n\ndefineOptions({\n  name: 'ElLink',\n})\nconst props = defineProps(linkProps)\nconst emit = defineEmits(linkEmits)\n\nconst ns = useNamespace('link')\n\nfunction handleClick(event: MouseEvent) {\n  if (!props.disabled) emit('click', event)\n}\n</script>\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}