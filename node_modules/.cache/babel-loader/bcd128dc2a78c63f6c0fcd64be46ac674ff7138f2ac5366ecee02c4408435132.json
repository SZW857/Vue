{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar shared = require('@vue/shared');\nvar core = require('@vueuse/core');\nrequire('../../utils/index.js');\nvar globalNode = require('../../utils/vue/global-node.js');\nconst useTeleport = (contentRenderer, appendToBody) => {\n  const isTeleportVisible = vue.ref(false);\n  if (!core.isClient) {\n    return {\n      isTeleportVisible,\n      showTeleport: shared.NOOP,\n      hideTeleport: shared.NOOP,\n      renderTeleport: shared.NOOP\n    };\n  }\n  let $el = null;\n  const showTeleport = () => {\n    isTeleportVisible.value = true;\n    if ($el !== null) return;\n    $el = globalNode.createGlobalNode();\n  };\n  const hideTeleport = () => {\n    isTeleportVisible.value = false;\n    if ($el !== null) {\n      globalNode.removeGlobalNode($el);\n      $el = null;\n    }\n  };\n  const renderTeleport = () => {\n    return appendToBody.value !== true ? contentRenderer() : isTeleportVisible.value ? [vue.h(vue.Teleport, {\n      to: $el\n    }, contentRenderer())] : void 0;\n  };\n  vue.onUnmounted(hideTeleport);\n  return {\n    isTeleportVisible,\n    showTeleport,\n    hideTeleport,\n    renderTeleport\n  };\n};\nexports.useTeleport = useTeleport;","map":{"version":3,"mappings":";;;;;;;;;;AAIY,MAACA,WAAW,GAAG,CAACC,eAAe,EAAEC,YAAY,KAAK;EAC5D,MAAMC,iBAAiB,GAAGC,OAAG,CAAC,KAAK,CAAC;EACpC,IAAI,CAACC,aAAQ,EAAE;IACb,OAAO;MACLF,iBAAiB;MACjBG,YAAY,EAAEC,WAAI;MAClBC,YAAY,EAAED,WAAI;MAClBE,cAAc,EAAEF;IACtB,CAAK;EACL;EACE,IAAIG,GAAG,GAAG,IAAI;EACd,MAAMJ,YAAY,GAAG,MAAM;IACzBH,iBAAiB,CAACQ,KAAK,GAAG,IAAI;IAC9B,IAAID,GAAG,KAAK,IAAI,EACd;IACFA,GAAG,GAAGE,2BAAgB,EAAE;EAC5B,CAAG;EACD,MAAMJ,YAAY,GAAG,MAAM;IACzBL,iBAAiB,CAACQ,KAAK,GAAG,KAAK;IAC/B,IAAID,GAAG,KAAK,IAAI,EAAE;MAChBG,2BAAgB,CAACH,GAAG,CAAC;MACrBA,GAAG,GAAG,IAAI;IAChB;EACA,CAAG;EACD,MAAMD,cAAc,GAAG,MAAM;IAC3B,OAAOP,YAAY,CAACS,KAAK,KAAK,IAAI,GAAGV,eAAe,EAAE,GAAGE,iBAAiB,CAACQ,KAAK,GAAG,CAACG,KAAC,CAACC,YAAQ,EAAE;MAAEC,EAAE,EAAEN;IAAG,CAAE,EAAET,eAAe,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC;EAC7I,CAAG;EACDgB,eAAW,CAACT,YAAY,CAAC;EACzB,OAAO;IACLL,iBAAiB;IACjBG,YAAY;IACZE,YAAY;IACZC;EACJ,CAAG;AACH","names":["useTeleport","contentRenderer","appendToBody","isTeleportVisible","ref","isClient","showTeleport","NOOP","hideTeleport","renderTeleport","$el","value","createGlobalNode","removeGlobalNode","h","Teleport","to","onUnmounted"],"sources":["../../../../../packages/hooks/use-teleport/index.ts"],"sourcesContent":["import { Teleport, h, onUnmounted, ref } from 'vue'\nimport { NOOP } from '@vue/shared'\nimport { isClient } from '@vueuse/core'\nimport { createGlobalNode, removeGlobalNode } from '@element-plus/utils'\n\nimport type { Ref, VNode } from 'vue'\n\nexport const useTeleport = (\n  contentRenderer: () => VNode,\n  appendToBody: Ref<boolean>\n) => {\n  const isTeleportVisible = ref(false)\n\n  if (!isClient) {\n    return {\n      isTeleportVisible,\n      showTeleport: NOOP,\n      hideTeleport: NOOP,\n      renderTeleport: NOOP,\n    }\n  }\n\n  let $el: HTMLElement | null = null\n\n  const showTeleport = () => {\n    isTeleportVisible.value = true\n    // this allows the delayed showing strategy since the the content itself could be enterable\n    // e.g. el-popper\n    if ($el !== null) return\n\n    $el = createGlobalNode()\n  }\n\n  const hideTeleport = () => {\n    isTeleportVisible.value = false\n    if ($el !== null) {\n      removeGlobalNode($el)\n      $el = null\n    }\n  }\n\n  const renderTeleport = () => {\n    return appendToBody.value !== true\n      ? contentRenderer()\n      : isTeleportVisible.value\n      ? [h(Teleport, { to: $el }, contentRenderer())]\n      : undefined\n  }\n\n  onUnmounted(hideTeleport)\n\n  return {\n    isTeleportVisible,\n    showTeleport,\n    hideTeleport,\n    renderTeleport,\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}