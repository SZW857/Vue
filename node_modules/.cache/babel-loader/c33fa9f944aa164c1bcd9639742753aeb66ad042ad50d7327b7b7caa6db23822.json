{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nvar dayjs = require('dayjs');\nvar customParseFormat = require('dayjs/plugin/customParseFormat.js');\nvar constants = require('./constants.js');\nvar picker = require('./common/picker.js');\nvar panelTimePick = require('./time-picker-com/panel-time-pick.js');\nvar panelTimeRange = require('./time-picker-com/panel-time-range.js');\nvar props = require('./common/props.js');\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\nvar dayjs__default = /*#__PURE__*/_interopDefaultLegacy(dayjs);\nvar customParseFormat__default = /*#__PURE__*/_interopDefaultLegacy(customParseFormat);\ndayjs__default[\"default\"].extend(customParseFormat__default[\"default\"]);\nvar TimePicker = vue.defineComponent({\n  name: \"ElTimePicker\",\n  install: null,\n  props: {\n    ...props.timePickerDefaultProps,\n    isRange: {\n      type: Boolean,\n      default: false\n    }\n  },\n  emits: [\"update:modelValue\"],\n  setup(props, ctx) {\n    const commonPicker = vue.ref();\n    const [type, Panel] = props.isRange ? [\"timerange\", panelTimeRange[\"default\"]] : [\"time\", panelTimePick[\"default\"]];\n    const modelUpdater = value => ctx.emit(\"update:modelValue\", value);\n    vue.provide(\"ElPopperOptions\", props.popperOptions);\n    ctx.expose({\n      focus: e => {\n        var _a;\n        (_a = commonPicker.value) == null ? void 0 : _a.handleFocusInput(e);\n      },\n      blur: e => {\n        var _a;\n        (_a = commonPicker.value) == null ? void 0 : _a.handleBlurInput(e);\n      },\n      handleOpen: () => {\n        var _a;\n        (_a = commonPicker.value) == null ? void 0 : _a.handleOpen();\n      },\n      handleClose: () => {\n        var _a;\n        (_a = commonPicker.value) == null ? void 0 : _a.handleClose();\n      }\n    });\n    return () => {\n      var _a;\n      const format = (_a = props.format) != null ? _a : constants.DEFAULT_FORMATS_TIME;\n      return vue.createVNode(picker[\"default\"], vue.mergeProps(props, {\n        \"ref\": commonPicker,\n        \"type\": type,\n        \"format\": format,\n        \"onUpdate:modelValue\": modelUpdater\n      }), {\n        default: props2 => vue.createVNode(Panel, props2, null)\n      });\n    };\n  }\n});\nexports[\"default\"] = TimePicker;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;AAQAA,yBAAK,CAACC,MAAN,CAAaC,qCAAb;AAEA,iBAAeC,mBAAe,CAAC;EAC7BC,IAAI,EAAE,cADuB;EAE7BC,OAAO,EAAE,IAFoB;EAG7BC,KAAK,EAAE;IAELC,+BAAS;IACPC,SADO;MAEPC,aAAS;MAFFA;;GAKN;;EACLC,KAAK,CAACJ,KAAD,EAAQK,GAAR,EAAa;IAChB,MAAMC,YAAY,GAAGC,OAAG,EAAxB;IACA,MAAM,CAACL,IAAD,EAAOM,KAAP,CAAgBR,QAAK,CAACC,OAAN,GAClB,CAAC,WAAD,EAAcQ,yBAAd,CADkB,GAElB,CAAC,MAAD,EAASC,wBAAT,CAFJ;;IAIAC,WAAMC,kBAAgBC,EAAeR,MAAGS,aAAM;;MAC9CH,KAAO;QACHI,MAAJ;QACE;MACN;MACAC;QACW,MAAE;QACLV,mBAAoBW,iBAApB;OALO;;QAOT;QACN;MACA;MACMD,WAAqC;QACnCV;QAXO;;IAaT;IACN;MACA;MACMY,YAAY,GAAM;aACJC,eAAZ;QAjBO;;QAmBT;QACN;MACA;QACMC,SAAWC,MAAQ;QACjBf;IACD;;AAGH","names":["dayjs","extend","customParseFormat","defineComponent","name","install","props","isRange","type","default","setup","ctx","commonPicker","ref","Panel","TimeRangePanel","TimePickPanel","provide","modelUpdater","value","popperOptions","expose","blur","handleFocusInput","handleOpen","_createVNode","handleClose","props2"],"sources":["../../../../../../packages/components/time-picker/src/time-picker.tsx"],"sourcesContent":["import { defineComponent, provide, ref } from 'vue'\nimport dayjs from 'dayjs'\nimport customParseFormat from 'dayjs/plugin/customParseFormat.js'\nimport { DEFAULT_FORMATS_TIME } from './constants'\nimport Picker from './common/picker.vue'\nimport TimePickPanel from './time-picker-com/panel-time-pick.vue'\nimport TimeRangePanel from './time-picker-com/panel-time-range.vue'\nimport { timePickerDefaultProps } from './common/props'\ndayjs.extend(customParseFormat)\n\nexport default defineComponent({\n  name: 'ElTimePicker',\n  install: null,\n  props: {\n    ...timePickerDefaultProps,\n    isRange: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  emits: ['update:modelValue'],\n  setup(props, ctx) {\n    const commonPicker = ref<InstanceType<typeof Picker>>()\n    const [type, Panel] = props.isRange\n      ? ['timerange', TimeRangePanel]\n      : ['time', TimePickPanel]\n\n    const modelUpdater = (value: any) => ctx.emit('update:modelValue', value)\n    provide('ElPopperOptions', props.popperOptions)\n    ctx.expose({\n      /**\n       * @description focus on the input element\n       */\n      focus: (e: FocusEvent | undefined) => {\n        commonPicker.value?.handleFocusInput(e)\n      },\n      /**\n       * @description blur from the input element\n       */\n      blur: (e: FocusEvent | undefined) => {\n        commonPicker.value?.handleBlurInput(e)\n      },\n      /**\n       * @description opens the picker element\n       */\n      handleOpen: () => {\n        commonPicker.value?.handleOpen()\n      },\n      /**\n       * @description closes the picker element\n       */\n      handleClose: () => {\n        commonPicker.value?.handleClose()\n      },\n    })\n\n    return () => {\n      const format = props.format ?? DEFAULT_FORMATS_TIME\n\n      return (\n        <Picker\n          {...props}\n          ref={commonPicker}\n          type={type}\n          format={format}\n          onUpdate:modelValue={modelUpdater}\n        >\n          {{\n            default: (props: any) => <Panel {...props} />,\n          }}\n        </Picker>\n      )\n    }\n  },\n})\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}