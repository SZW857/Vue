{"ast":null,"code":"// 首先先引入aixos\nimport axios from 'axios';\n// element引入文件\nimport { ElMessage } from 'element-plus';\n\n// 创建一个axios 实例\nconst api = axios.create({\n  baseURL: 'http://127.0.0.1:8083',\n  // 基准地址\n  timeout: 5000 // 超时时间\n});\n// 请求拦截\napi.interceptors.request.use(config => {\n  const token1 = window.localStorage.getItem('token');\n  // 判断是否存在token，如果存在的话，则每个http header都加上token\n  let token = sessionStorage.getItem('Authorization');\n  if (!config.headers.hasOwnProperty('Authorization') && token) {\n    config.headers.Authorization = token;\n  }\n  return config; // 请求拦截里面的需求可以自己写，有的项目需要配置很多，有的很少，这里就                                                                                        \n  // 不放了\n}, error => {\n  Promise.reject(error);\n});\n// 响应拦截\n/**\r\n 响应拦截也是一样，最基本的可以把返回出来的一些数据做简单处理，\r\n 比如把请求回来的提示信息解构出来，给予提示，这样就不用在每次请求完成后单独去写\r\n 这里用的是element-ui 里面的提示\r\n **/\napi.interceptors.response.use(res => {\n  if (token) {\n    config.headers.Authorization = 'Bearer ' + token;\n  }\n  // 放行\n  return config;\n}, err => {\n  console.log(err);\n  const {\n    data: result\n  } = res.data;\n  ElMessage({\n    message: \"发送成功\",\n    type: 'success'\n  });\n  return result;\n}, error => {\n  Promise.reject(error);\n});\n// 最后导出\nexport default api;","map":{"version":3,"names":["axios","ElMessage","api","create","baseURL","timeout","interceptors","request","use","config","token1","window","localStorage","getItem","token","sessionStorage","headers","hasOwnProperty","Authorization","error","Promise","reject","response","res","err","console","log","data","result","message","type"],"sources":["C:/Users/14486/Desktop/社区公益系统前端/vue_community/src/request/index.js"],"sourcesContent":["// 首先先引入aixos\r\nimport axios from 'axios'\r\n// element引入文件\r\nimport { ElMessage } from 'element-plus'\r\n\r\n\r\n// 创建一个axios 实例\r\nconst api = axios.create({\r\n    baseURL: 'http://127.0.0.1:8083', // 基准地址\r\n    timeout: 5000 // 超时时间\r\n})\r\n// 请求拦截\r\napi.interceptors.request.use((config) => {\r\n    const token1 = window.localStorage.getItem('token');\r\n    // 判断是否存在token，如果存在的话，则每个http header都加上token\r\n    let token = sessionStorage.getItem('Authorization')\r\n    if (!config.headers.hasOwnProperty('Authorization') && token) {\r\n        config.headers.Authorization = token;\r\n    }\r\n    return config      // 请求拦截里面的需求可以自己写，有的项目需要配置很多，有的很少，这里就                                                                                        \r\n                       // 不放了\r\n}, error => {\r\n    Promise.reject(error)\r\n})\r\n// 响应拦截\r\n/**\r\n 响应拦截也是一样，最基本的可以把返回出来的一些数据做简单处理，\r\n 比如把请求回来的提示信息解构出来，给予提示，这样就不用在每次请求完成后单独去写\r\n 这里用的是element-ui 里面的提示\r\n **/\r\napi.interceptors.response.use((res) => {\r\n\r\n\r\n    if (token) {\r\n        config.headers.Authorization = 'Bearer ' + token;\r\n    }\r\n    // 放行\r\n    return config;\r\n}, err => {\r\n    console.log(err);\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const { data: result, } = res.data\r\n    ElMessage({\r\n        message:\"发送成功\",\r\n        type: 'success',\r\n    })\r\n\r\n    return result\r\n}, error => {\r\n    Promise.reject(error)\r\n})\r\n// 最后导出\r\nexport default api;"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA,SAASC,SAAS,QAAQ,cAAc;;AAGxC;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACrBC,OAAO,EAAE,uBAAuB;EAAE;EAClCC,OAAO,EAAE,IAAI,CAAC;AAClB,CAAC,CAAC;AACF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACrC,MAAMC,MAAM,GAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACnD;EACA,IAAIC,KAAK,GAAGC,cAAc,CAACF,OAAO,CAAC,eAAe,CAAC;EACnD,IAAI,CAACJ,MAAM,CAACO,OAAO,CAACC,cAAc,CAAC,eAAe,CAAC,IAAIH,KAAK,EAAE;IAC1DL,MAAM,CAACO,OAAO,CAACE,aAAa,GAAGJ,KAAK;EACxC;EACA,OAAOL,MAAM,EAAM;EACA;AACvB,CAAC,EAAEU,KAAK,IAAI;EACRC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AACzB,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACAjB,GAAG,CAACI,YAAY,CAACgB,QAAQ,CAACd,GAAG,CAAEe,GAAG,IAAK;EAGnC,IAAIT,KAAK,EAAE;IACPL,MAAM,CAACO,OAAO,CAACE,aAAa,GAAG,SAAS,GAAGJ,KAAK;EACpD;EACA;EACA,OAAOL,MAAM;AACjB,CAAC,EAAEe,GAAG,IAAI;EACNC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;EAOhB,MAAM;IAAEG,IAAI,EAAEC;EAAQ,CAAC,GAAGL,GAAG,CAACI,IAAI;EAClC1B,SAAS,CAAC;IACN4B,OAAO,EAAC,MAAM;IACdC,IAAI,EAAE;EACV,CAAC,CAAC;EAEF,OAAOF,MAAM;AACjB,CAAC,EAAET,KAAK,IAAI;EACRC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AACzB,CAAC,CAAC;AACF;AACA,eAAejB,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}