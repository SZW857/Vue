{"ast":null,"code":"// The Bounding Box object\n\nfunction derive(v0, v1, v2, v3, t) {\n  return Math.pow(1 - t, 3) * v0 + 3 * Math.pow(1 - t, 2) * t * v1 + 3 * (1 - t) * Math.pow(t, 2) * v2 + Math.pow(t, 3) * v3;\n}\n/**\n * A bounding box is an enclosing box that describes the smallest measure within which all the points lie.\n * It is used to calculate the bounding box of a glyph or text path.\n *\n * On initialization, x1/y1/x2/y2 will be NaN. Check if the bounding box is empty using `isEmpty()`.\n *\n * @exports opentype.BoundingBox\n * @class\n * @constructor\n */\nfunction BoundingBox() {\n  this.x1 = Number.NaN;\n  this.y1 = Number.NaN;\n  this.x2 = Number.NaN;\n  this.y2 = Number.NaN;\n}\n\n/**\n * Returns true if the bounding box is empty, that is, no points have been added to the box yet.\n */\nBoundingBox.prototype.isEmpty = function () {\n  return isNaN(this.x1) || isNaN(this.y1) || isNaN(this.x2) || isNaN(this.y2);\n};\n\n/**\n * Add the point to the bounding box.\n * The x1/y1/x2/y2 coordinates of the bounding box will now encompass the given point.\n * @param {number} x - The X coordinate of the point.\n * @param {number} y - The Y coordinate of the point.\n */\nBoundingBox.prototype.addPoint = function (x, y) {\n  if (typeof x === 'number') {\n    if (isNaN(this.x1) || isNaN(this.x2)) {\n      this.x1 = x;\n      this.x2 = x;\n    }\n    if (x < this.x1) {\n      this.x1 = x;\n    }\n    if (x > this.x2) {\n      this.x2 = x;\n    }\n  }\n  if (typeof y === 'number') {\n    if (isNaN(this.y1) || isNaN(this.y2)) {\n      this.y1 = y;\n      this.y2 = y;\n    }\n    if (y < this.y1) {\n      this.y1 = y;\n    }\n    if (y > this.y2) {\n      this.y2 = y;\n    }\n  }\n};\n\n/**\n * Add a X coordinate to the bounding box.\n * This extends the bounding box to include the X coordinate.\n * This function is used internally inside of addBezier.\n * @param {number} x - The X coordinate of the point.\n */\nBoundingBox.prototype.addX = function (x) {\n  this.addPoint(x, null);\n};\n\n/**\n * Add a Y coordinate to the bounding box.\n * This extends the bounding box to include the Y coordinate.\n * This function is used internally inside of addBezier.\n * @param {number} y - The Y coordinate of the point.\n */\nBoundingBox.prototype.addY = function (y) {\n  this.addPoint(null, y);\n};\n\n/**\n * Add a Bézier curve to the bounding box.\n * This extends the bounding box to include the entire Bézier.\n * @param {number} x0 - The starting X coordinate.\n * @param {number} y0 - The starting Y coordinate.\n * @param {number} x1 - The X coordinate of the first control point.\n * @param {number} y1 - The Y coordinate of the first control point.\n * @param {number} x2 - The X coordinate of the second control point.\n * @param {number} y2 - The Y coordinate of the second control point.\n * @param {number} x - The ending X coordinate.\n * @param {number} y - The ending Y coordinate.\n */\nBoundingBox.prototype.addBezier = function (x0, y0, x1, y1, x2, y2, x, y) {\n  // This code is based on http://nishiohirokazu.blogspot.com/2009/06/how-to-calculate-bezier-curves-bounding.html\n  // and https://github.com/icons8/svg-path-bounding-box\n\n  const p0 = [x0, y0];\n  const p1 = [x1, y1];\n  const p2 = [x2, y2];\n  const p3 = [x, y];\n  this.addPoint(x0, y0);\n  this.addPoint(x, y);\n  for (let i = 0; i <= 1; i++) {\n    const b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];\n    const a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];\n    const c = 3 * p1[i] - 3 * p0[i];\n    if (a === 0) {\n      if (b === 0) continue;\n      const t = -c / b;\n      if (0 < t && t < 1) {\n        if (i === 0) this.addX(derive(p0[i], p1[i], p2[i], p3[i], t));\n        if (i === 1) this.addY(derive(p0[i], p1[i], p2[i], p3[i], t));\n      }\n      continue;\n    }\n    const b2ac = Math.pow(b, 2) - 4 * c * a;\n    if (b2ac < 0) continue;\n    const t1 = (-b + Math.sqrt(b2ac)) / (2 * a);\n    if (0 < t1 && t1 < 1) {\n      if (i === 0) this.addX(derive(p0[i], p1[i], p2[i], p3[i], t1));\n      if (i === 1) this.addY(derive(p0[i], p1[i], p2[i], p3[i], t1));\n    }\n    const t2 = (-b - Math.sqrt(b2ac)) / (2 * a);\n    if (0 < t2 && t2 < 1) {\n      if (i === 0) this.addX(derive(p0[i], p1[i], p2[i], p3[i], t2));\n      if (i === 1) this.addY(derive(p0[i], p1[i], p2[i], p3[i], t2));\n    }\n  }\n};\n\n/**\n * Add a quadratic curve to the bounding box.\n * This extends the bounding box to include the entire quadratic curve.\n * @param {number} x0 - The starting X coordinate.\n * @param {number} y0 - The starting Y coordinate.\n * @param {number} x1 - The X coordinate of the control point.\n * @param {number} y1 - The Y coordinate of the control point.\n * @param {number} x - The ending X coordinate.\n * @param {number} y - The ending Y coordinate.\n */\nBoundingBox.prototype.addQuad = function (x0, y0, x1, y1, x, y) {\n  const cp1x = x0 + 2 / 3 * (x1 - x0);\n  const cp1y = y0 + 2 / 3 * (y1 - y0);\n  const cp2x = cp1x + 1 / 3 * (x - x0);\n  const cp2y = cp1y + 1 / 3 * (y - y0);\n  this.addBezier(x0, y0, cp1x, cp1y, cp2x, cp2y, x, y);\n};\nexport default BoundingBox;","map":{"version":3,"names":["derive","v0","v1","v2","v3","t","Math","pow","BoundingBox","x1","Number","NaN","y1","x2","y2","prototype","isEmpty","isNaN","addPoint","x","y","addX","addY","addBezier","x0","y0","p0","p1","p2","p3","i","b","a","c","b2ac","t1","sqrt","t2","addQuad","cp1x","cp1y","cp2x","cp2y"],"sources":["C:/Users/14486/Desktop/社区公益系统前端/vue_community/node_modules/_opentype.js@0.7.3@opentype.js/src/bbox.js"],"sourcesContent":["// The Bounding Box object\n\nfunction derive(v0, v1, v2, v3, t) {\n    return Math.pow(1 - t, 3) * v0 +\n        3 * Math.pow(1 - t, 2) * t * v1 +\n        3 * (1 - t) * Math.pow(t, 2) * v2 +\n        Math.pow(t, 3) * v3;\n}\n/**\n * A bounding box is an enclosing box that describes the smallest measure within which all the points lie.\n * It is used to calculate the bounding box of a glyph or text path.\n *\n * On initialization, x1/y1/x2/y2 will be NaN. Check if the bounding box is empty using `isEmpty()`.\n *\n * @exports opentype.BoundingBox\n * @class\n * @constructor\n */\nfunction BoundingBox() {\n    this.x1 = Number.NaN;\n    this.y1 = Number.NaN;\n    this.x2 = Number.NaN;\n    this.y2 = Number.NaN;\n}\n\n/**\n * Returns true if the bounding box is empty, that is, no points have been added to the box yet.\n */\nBoundingBox.prototype.isEmpty = function() {\n    return isNaN(this.x1) || isNaN(this.y1) || isNaN(this.x2) || isNaN(this.y2);\n};\n\n/**\n * Add the point to the bounding box.\n * The x1/y1/x2/y2 coordinates of the bounding box will now encompass the given point.\n * @param {number} x - The X coordinate of the point.\n * @param {number} y - The Y coordinate of the point.\n */\nBoundingBox.prototype.addPoint = function(x, y) {\n    if (typeof x === 'number') {\n        if (isNaN(this.x1) || isNaN(this.x2)) {\n            this.x1 = x;\n            this.x2 = x;\n        }\n        if (x < this.x1) {\n            this.x1 = x;\n        }\n        if (x > this.x2) {\n            this.x2 = x;\n        }\n    }\n    if (typeof y === 'number') {\n        if (isNaN(this.y1) || isNaN(this.y2)) {\n            this.y1 = y;\n            this.y2 = y;\n        }\n        if (y < this.y1) {\n            this.y1 = y;\n        }\n        if (y > this.y2) {\n            this.y2 = y;\n        }\n    }\n};\n\n/**\n * Add a X coordinate to the bounding box.\n * This extends the bounding box to include the X coordinate.\n * This function is used internally inside of addBezier.\n * @param {number} x - The X coordinate of the point.\n */\nBoundingBox.prototype.addX = function(x) {\n    this.addPoint(x, null);\n};\n\n/**\n * Add a Y coordinate to the bounding box.\n * This extends the bounding box to include the Y coordinate.\n * This function is used internally inside of addBezier.\n * @param {number} y - The Y coordinate of the point.\n */\nBoundingBox.prototype.addY = function(y) {\n    this.addPoint(null, y);\n};\n\n/**\n * Add a Bézier curve to the bounding box.\n * This extends the bounding box to include the entire Bézier.\n * @param {number} x0 - The starting X coordinate.\n * @param {number} y0 - The starting Y coordinate.\n * @param {number} x1 - The X coordinate of the first control point.\n * @param {number} y1 - The Y coordinate of the first control point.\n * @param {number} x2 - The X coordinate of the second control point.\n * @param {number} y2 - The Y coordinate of the second control point.\n * @param {number} x - The ending X coordinate.\n * @param {number} y - The ending Y coordinate.\n */\nBoundingBox.prototype.addBezier = function(x0, y0, x1, y1, x2, y2, x, y) {\n    // This code is based on http://nishiohirokazu.blogspot.com/2009/06/how-to-calculate-bezier-curves-bounding.html\n    // and https://github.com/icons8/svg-path-bounding-box\n\n    const p0 = [x0, y0];\n    const p1 = [x1, y1];\n    const p2 = [x2, y2];\n    const p3 = [x, y];\n\n    this.addPoint(x0, y0);\n    this.addPoint(x, y);\n\n    for (let i = 0; i <= 1; i++) {\n        const b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];\n        const a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];\n        const c = 3 * p1[i] - 3 * p0[i];\n\n        if (a === 0) {\n            if (b === 0) continue;\n            const t = -c / b;\n            if (0 < t && t < 1) {\n                if (i === 0) this.addX(derive(p0[i], p1[i], p2[i], p3[i], t));\n                if (i === 1) this.addY(derive(p0[i], p1[i], p2[i], p3[i], t));\n            }\n            continue;\n        }\n\n        const b2ac = Math.pow(b, 2) - 4 * c * a;\n        if (b2ac < 0) continue;\n        const t1 = (-b + Math.sqrt(b2ac)) / (2 * a);\n        if (0 < t1 && t1 < 1) {\n            if (i === 0) this.addX(derive(p0[i], p1[i], p2[i], p3[i], t1));\n            if (i === 1) this.addY(derive(p0[i], p1[i], p2[i], p3[i], t1));\n        }\n        const t2 = (-b - Math.sqrt(b2ac)) / (2 * a);\n        if (0 < t2 && t2 < 1) {\n            if (i === 0) this.addX(derive(p0[i], p1[i], p2[i], p3[i], t2));\n            if (i === 1) this.addY(derive(p0[i], p1[i], p2[i], p3[i], t2));\n        }\n    }\n};\n\n/**\n * Add a quadratic curve to the bounding box.\n * This extends the bounding box to include the entire quadratic curve.\n * @param {number} x0 - The starting X coordinate.\n * @param {number} y0 - The starting Y coordinate.\n * @param {number} x1 - The X coordinate of the control point.\n * @param {number} y1 - The Y coordinate of the control point.\n * @param {number} x - The ending X coordinate.\n * @param {number} y - The ending Y coordinate.\n */\nBoundingBox.prototype.addQuad = function(x0, y0, x1, y1, x, y) {\n    const cp1x = x0 + 2 / 3 * (x1 - x0);\n    const cp1y = y0 + 2 / 3 * (y1 - y0);\n    const cp2x = cp1x + 1 / 3 * (x - x0);\n    const cp2y = cp1y + 1 / 3 * (y - y0);\n    this.addBezier(x0, y0, cp1x, cp1y, cp2x, cp2y, x, y);\n};\n\nexport default BoundingBox;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}