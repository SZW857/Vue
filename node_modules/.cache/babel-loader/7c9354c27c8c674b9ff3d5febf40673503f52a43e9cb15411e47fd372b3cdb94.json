{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar vue = require('vue');\nrequire('../../../hooks/index.js');\nvar useRadio = require('./use-radio.js');\nvar radioButton = require('./radio-button.js');\nvar pluginVue_exportHelper = require('../../../_virtual/plugin-vue_export-helper.js');\nvar index = require('../../../hooks/use-namespace/index.js');\nconst _hoisted_1 = [\"value\", \"name\", \"disabled\"];\nconst __default__ = vue.defineComponent({\n  name: \"ElRadioButton\"\n});\nconst _sfc_main = /* @__PURE__ */vue.defineComponent({\n  ...__default__,\n  props: radioButton.radioButtonProps,\n  setup(__props) {\n    const props = __props;\n    const ns = index.useNamespace(\"radio\");\n    const {\n      radioRef,\n      focus,\n      size,\n      disabled,\n      modelValue,\n      radioGroup\n    } = useRadio.useRadio(props);\n    const activeStyle = vue.computed(() => {\n      return {\n        backgroundColor: (radioGroup == null ? void 0 : radioGroup.fill) || \"\",\n        borderColor: (radioGroup == null ? void 0 : radioGroup.fill) || \"\",\n        boxShadow: (radioGroup == null ? void 0 : radioGroup.fill) ? `-1px 0 0 0 ${radioGroup.fill}` : \"\",\n        color: (radioGroup == null ? void 0 : radioGroup.textColor) || \"\"\n      };\n    });\n    return (_ctx, _cache) => {\n      var _a;\n      return vue.openBlock(), vue.createElementBlock(\"label\", {\n        class: vue.normalizeClass([vue.unref(ns).b(\"button\"), vue.unref(ns).is(\"active\", vue.unref(modelValue) === _ctx.label), vue.unref(ns).is(\"disabled\", vue.unref(disabled)), vue.unref(ns).is(\"focus\", vue.unref(focus)), vue.unref(ns).bm(\"button\", vue.unref(size))])\n      }, [vue.withDirectives(vue.createElementVNode(\"input\", {\n        ref_key: \"radioRef\",\n        ref: radioRef,\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => vue.isRef(modelValue) ? modelValue.value = $event : null),\n        class: vue.normalizeClass(vue.unref(ns).be(\"button\", \"original-radio\")),\n        value: _ctx.label,\n        type: \"radio\",\n        name: _ctx.name || ((_a = vue.unref(radioGroup)) == null ? void 0 : _a.name),\n        disabled: vue.unref(disabled),\n        onFocus: _cache[1] || (_cache[1] = $event => focus.value = true),\n        onBlur: _cache[2] || (_cache[2] = $event => focus.value = false)\n      }, null, 42, _hoisted_1), [[vue.vModelRadio, vue.unref(modelValue)]]), vue.createElementVNode(\"span\", {\n        class: vue.normalizeClass(vue.unref(ns).be(\"button\", \"inner\")),\n        style: vue.normalizeStyle(vue.unref(modelValue) === _ctx.label ? vue.unref(activeStyle) : {}),\n        onKeydown: _cache[3] || (_cache[3] = vue.withModifiers(() => {}, [\"stop\"]))\n      }, [vue.renderSlot(_ctx.$slots, \"default\", {}, () => [vue.createTextVNode(vue.toDisplayString(_ctx.label), 1)])], 38)], 2);\n    };\n  }\n});\nvar RadioButton = /* @__PURE__ */pluginVue_exportHelper[\"default\"](_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/radio/src/radio-button.vue\"]]);\nexports[\"default\"] = RadioButton;","map":{"version":3,"mappings":";;;;;;;;;;;;uCAwCc;EACZA,IAAM;AACR;;;;;;IAIM,WAAKC,mBAAa,OAAO;IACzB;MAAEC;MAAUC,KAAO;MAAAC;MAAMC;MAAUC,UAAY;MAAAC;IAAA,IACnDC,kBAASC,KAAK;IAEV,oBAAcC,aAAwB,MAAM;MACzC;QACLC,iBAAiB,eAAoB;QACrCC,aAAa,eAAoB;QACjCC,SAAW,iBAAmB,+BAAkC;QAChEC,OAAO,eAAyB;MAAA,CAClC;IAAA,CACD","names":["name","useNamespace","radioRef","focus","size","disabled","modelValue","radioGroup","useRadio","props","computed","backgroundColor","borderColor","boxShadow","color"],"sources":["../../../../../../packages/components/radio/src/radio-button.vue"],"sourcesContent":["<template>\n  <label\n    :class=\"[\n      ns.b('button'),\n      ns.is('active', modelValue === label),\n      ns.is('disabled', disabled),\n      ns.is('focus', focus),\n      ns.bm('button', size),\n    ]\"\n  >\n    <input\n      ref=\"radioRef\"\n      v-model=\"modelValue\"\n      :class=\"ns.be('button', 'original-radio')\"\n      :value=\"label\"\n      type=\"radio\"\n      :name=\"name || radioGroup?.name\"\n      :disabled=\"disabled\"\n      @focus=\"focus = true\"\n      @blur=\"focus = false\"\n    />\n    <span\n      :class=\"ns.be('button', 'inner')\"\n      :style=\"modelValue === label ? activeStyle : {}\"\n      @keydown.stop\n    >\n      <slot>\n        {{ label }}\n      </slot>\n    </span>\n  </label>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { useRadio } from './use-radio'\nimport { radioButtonProps } from './radio-button'\nimport type { CSSProperties } from 'vue'\n\ndefineOptions({\n  name: 'ElRadioButton',\n})\n\nconst props = defineProps(radioButtonProps)\n\nconst ns = useNamespace('radio')\nconst { radioRef, focus, size, disabled, modelValue, radioGroup } =\n  useRadio(props)\n\nconst activeStyle = computed<CSSProperties>(() => {\n  return {\n    backgroundColor: radioGroup?.fill || '',\n    borderColor: radioGroup?.fill || '',\n    boxShadow: radioGroup?.fill ? `-1px 0 0 0 ${radioGroup.fill}` : '',\n    color: radioGroup?.textColor || '',\n  }\n})\n</script>\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}