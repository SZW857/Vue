{"ast":null,"code":"// The `maxp` table establishes the memory requirements for the font.\n// We need it just to get the number of glyphs in the font.\n// https://www.microsoft.com/typography/OTSPEC/maxp.htm\n\nimport parse from '../parse';\nimport table from '../table';\n\n// Parse the maximum profile `maxp` table.\nfunction parseMaxpTable(data, start) {\n  const maxp = {};\n  const p = new parse.Parser(data, start);\n  maxp.version = p.parseVersion();\n  maxp.numGlyphs = p.parseUShort();\n  if (maxp.version === 1.0) {\n    maxp.maxPoints = p.parseUShort();\n    maxp.maxContours = p.parseUShort();\n    maxp.maxCompositePoints = p.parseUShort();\n    maxp.maxCompositeContours = p.parseUShort();\n    maxp.maxZones = p.parseUShort();\n    maxp.maxTwilightPoints = p.parseUShort();\n    maxp.maxStorage = p.parseUShort();\n    maxp.maxFunctionDefs = p.parseUShort();\n    maxp.maxInstructionDefs = p.parseUShort();\n    maxp.maxStackElements = p.parseUShort();\n    maxp.maxSizeOfInstructions = p.parseUShort();\n    maxp.maxComponentElements = p.parseUShort();\n    maxp.maxComponentDepth = p.parseUShort();\n  }\n  return maxp;\n}\nfunction makeMaxpTable(numGlyphs) {\n  return new table.Table('maxp', [{\n    name: 'version',\n    type: 'FIXED',\n    value: 0x00005000\n  }, {\n    name: 'numGlyphs',\n    type: 'USHORT',\n    value: numGlyphs\n  }]);\n}\nexport default {\n  parse: parseMaxpTable,\n  make: makeMaxpTable\n};","map":{"version":3,"names":["parse","table","parseMaxpTable","data","start","maxp","p","Parser","version","parseVersion","numGlyphs","parseUShort","maxPoints","maxContours","maxCompositePoints","maxCompositeContours","maxZones","maxTwilightPoints","maxStorage","maxFunctionDefs","maxInstructionDefs","maxStackElements","maxSizeOfInstructions","maxComponentElements","maxComponentDepth","makeMaxpTable","Table","name","type","value","make"],"sources":["C:/Users/14486/Desktop/社区公益系统前端/vue_community/node_modules/opentype.js/src/tables/maxp.js"],"sourcesContent":["// The `maxp` table establishes the memory requirements for the font.\n// We need it just to get the number of glyphs in the font.\n// https://www.microsoft.com/typography/OTSPEC/maxp.htm\n\nimport parse from '../parse';\nimport table from '../table';\n\n// Parse the maximum profile `maxp` table.\nfunction parseMaxpTable(data, start) {\n    const maxp = {};\n    const p = new parse.Parser(data, start);\n    maxp.version = p.parseVersion();\n    maxp.numGlyphs = p.parseUShort();\n    if (maxp.version === 1.0) {\n        maxp.maxPoints = p.parseUShort();\n        maxp.maxContours = p.parseUShort();\n        maxp.maxCompositePoints = p.parseUShort();\n        maxp.maxCompositeContours = p.parseUShort();\n        maxp.maxZones = p.parseUShort();\n        maxp.maxTwilightPoints = p.parseUShort();\n        maxp.maxStorage = p.parseUShort();\n        maxp.maxFunctionDefs = p.parseUShort();\n        maxp.maxInstructionDefs = p.parseUShort();\n        maxp.maxStackElements = p.parseUShort();\n        maxp.maxSizeOfInstructions = p.parseUShort();\n        maxp.maxComponentElements = p.parseUShort();\n        maxp.maxComponentDepth = p.parseUShort();\n    }\n\n    return maxp;\n}\n\nfunction makeMaxpTable(numGlyphs) {\n    return new table.Table('maxp', [\n        {name: 'version', type: 'FIXED', value: 0x00005000},\n        {name: 'numGlyphs', type: 'USHORT', value: numGlyphs}\n    ]);\n}\n\nexport default { parse: parseMaxpTable, make: makeMaxpTable };\n"],"mappings":"AAAA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,UAAU;AAC5B,OAAOC,KAAK,MAAM,UAAU;;AAE5B;AACA,SAASC,cAAc,CAACC,IAAI,EAAEC,KAAK,EAAE;EACjC,MAAMC,IAAI,GAAG,CAAC,CAAC;EACf,MAAMC,CAAC,GAAG,IAAIN,KAAK,CAACO,MAAM,CAACJ,IAAI,EAAEC,KAAK,CAAC;EACvCC,IAAI,CAACG,OAAO,GAAGF,CAAC,CAACG,YAAY,EAAE;EAC/BJ,IAAI,CAACK,SAAS,GAAGJ,CAAC,CAACK,WAAW,EAAE;EAChC,IAAIN,IAAI,CAACG,OAAO,KAAK,GAAG,EAAE;IACtBH,IAAI,CAACO,SAAS,GAAGN,CAAC,CAACK,WAAW,EAAE;IAChCN,IAAI,CAACQ,WAAW,GAAGP,CAAC,CAACK,WAAW,EAAE;IAClCN,IAAI,CAACS,kBAAkB,GAAGR,CAAC,CAACK,WAAW,EAAE;IACzCN,IAAI,CAACU,oBAAoB,GAAGT,CAAC,CAACK,WAAW,EAAE;IAC3CN,IAAI,CAACW,QAAQ,GAAGV,CAAC,CAACK,WAAW,EAAE;IAC/BN,IAAI,CAACY,iBAAiB,GAAGX,CAAC,CAACK,WAAW,EAAE;IACxCN,IAAI,CAACa,UAAU,GAAGZ,CAAC,CAACK,WAAW,EAAE;IACjCN,IAAI,CAACc,eAAe,GAAGb,CAAC,CAACK,WAAW,EAAE;IACtCN,IAAI,CAACe,kBAAkB,GAAGd,CAAC,CAACK,WAAW,EAAE;IACzCN,IAAI,CAACgB,gBAAgB,GAAGf,CAAC,CAACK,WAAW,EAAE;IACvCN,IAAI,CAACiB,qBAAqB,GAAGhB,CAAC,CAACK,WAAW,EAAE;IAC5CN,IAAI,CAACkB,oBAAoB,GAAGjB,CAAC,CAACK,WAAW,EAAE;IAC3CN,IAAI,CAACmB,iBAAiB,GAAGlB,CAAC,CAACK,WAAW,EAAE;EAC5C;EAEA,OAAON,IAAI;AACf;AAEA,SAASoB,aAAa,CAACf,SAAS,EAAE;EAC9B,OAAO,IAAIT,KAAK,CAACyB,KAAK,CAAC,MAAM,EAAE,CAC3B;IAACC,IAAI,EAAE,SAAS;IAAEC,IAAI,EAAE,OAAO;IAAEC,KAAK,EAAE;EAAU,CAAC,EACnD;IAACF,IAAI,EAAE,WAAW;IAAEC,IAAI,EAAE,QAAQ;IAAEC,KAAK,EAAEnB;EAAS,CAAC,CACxD,CAAC;AACN;AAEA,eAAe;EAAEV,KAAK,EAAEE,cAAc;EAAE4B,IAAI,EAAEL;AAAc,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}